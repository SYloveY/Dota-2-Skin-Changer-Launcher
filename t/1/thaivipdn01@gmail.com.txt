limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$MGY1MWNlOGQ1ODRlNTQ0Mu7PnGO5dy1m6xhkoF91f/moYt63IceXy 222||| 123:: Shattered Greatsword;Arm of the Dragon*s Disciple;Belt of the Dragon*s Disciple;Acolyte of Vengeance Hooded Mask;Pauldron of the Dragon*s Disciple;Faceless Death - Armor;Armature of the Belligerent Ram Belt;Armature of the Belligerent Ram Helm;Armature of the Belligerent Ram Shoulder;Armature of the Belligerent Ram Glove;Soul Diffuser;Golden Hydrakan Latch;Bound Shark Flippers;Shark Cowl;Shark Fin Cape;Claw of the Umizar Crawler;Mace of Aeons;Frozen Void Head;Frozen Void Arms;Frozen Void Shoulder;Golden Basher of Mage Skulls;Golden Offhand Basher of Mage Skulls;Frostmoot Tree;Kantusa the Script Sword;Valentine Ward;Monarch Bow;Assassination of Dark Feather Head;Assassination of Dark Feather Shoulder;Assassination of Dark Feather Belt;Assassination of Dark Feather Back;Phantom Assassin Anime Voice;Windrunner Anime Voice;Luna Anime Voice;Drow Ranger Anime Voice;Winter Wyvern Anime Voice;Spectre Anime Voice;Hestia Mega-Kills;Baby Roshan Prem;Sinister Shadow Legs;Sinister Shadow Head;Sinister Shadow Back;Sinister Shadow Arms;Assassination of Dark Feather Weapon;Samurai Set;Ancient Magus Style 1;Grim Destiny;Storegga 3 LVL Ult + Ice Tiny;Tales of the Windward Rogue;Forgotten Renegade;Opus of the Vizier Exile V 2.1;Guise of the Winged Bolt;Redemption of the Raidforged Rider;Chilling Feather;Royal Winterbloom; 123|||