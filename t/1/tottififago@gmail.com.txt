bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDMwMDAyMDAtMDQwMC0wNTAwLTAwMDYtMDAwNzAwMDgwMDA5OzsgMTExfHx8IDIyMjo6ICQyeSQxMCRaRGd3TkdZNFltTTFNemxqTVRVMFl1UGdXUmh3NWRFaW51WEVIdy9RRThJUzJRV0VFLzh4TyAyMjJ8fHwgMTIzOjogQ29uY29yZCBSZXZlcnNpb24gVVA7QXJtcyBvZiBIYXJzaCBTb2pvdXJuO0JlbHQgb2YgSGFyc2ggU29qb3VybjtQaGFudG9tIEFzY2Vuc2lvbjtQaGFudG9tIEFzY2Vuc2lvbiBCZWx0O1JpdmVyIFZpYWwgTm9uZTtTd2lmdCBDbGF3IGFuZCBGZXJvY2lvdXMgSGVhcnQ7TWFzayBvZiB0aGUgU2FuZ3N0cmF0aCBGb2xkO0RpcHBlciB0aGUgRGVzdHJveWVyO0JpdHRlciBMaW5lYWdlIEltbW9ydGFsIEF4ZXM7Q29uc3BpY3VvdXMgQ3VscHJpdCBBcm1vcjtDb25zcGljdWQ5519cyBDdWxwcml0IE1vaGF3aztTY2FsZSBvZiBCaXR0ZXIgU3BvaWwgSW1tb3J0YWwgVVA7SnVnZ2VybmF1dCBBcmNhbmEgUmVkIEJsYWRlZm9ybSBPcmlnaW5zO1RyYW5zdmVyc2FudCBTb3VsIG9mIHRoZSBDcmltc29uIFdpdG5lc3MgUHJlbTtEaWZmdXNhbCBMYW5jZSBQcmVtO1Nob3VsZGVycyBvZiB0aGUgQmxhZGVmb3JtIEFlc3RoZXRlO0NyaW1zb24gRWRnZSBvZiB0aGUgTG9zdCBPcmRlcjtCZWx0IG9mIHRoZSBCbGFkZWZvcm0gQWVzdGhldGU7V2FyZ29kIG9mIHRoZSBCbGFkZWtlZXBlcjtQcmF5ZXIgQmVhZHMgb2YgdGhlIEJsYWRla2VlcGVyO01hdGNoIFJlYWR5IC0gUGFwaWNoIFNtZWg7UGhhbnRvbSBBc2NlbnNpb24gV2VhcG9uO0Nyb3duIG9mIHRoZSBPbmUgVHJ1ZSBLaW5nO0FybW9yIG9mIFZpbGUgUmVsaXF1YXJ5O01hbnRsZSBvZiBWaWxlIFJlbGlxdWFyeTtQYXVsZHJvbnMgb2YgVmlsZSBSZWxpcXVhcnk7QXJtcyBvZiBWaWxlIFJlbGlxdWFyeTtXaW50ZXJibGlnaHQgUHJlbTtTcGFuIG9mIFNvcnJvdztDdXJzZWQgQmxhY2sgQ29sb3IgZm9yIFRCO1NjeXRoZXMgb2YgU29ycm93O1BhdWxkcm9ucyBvZiBFdGVybmFsIEhhcnZlc3QgUHJlbTtUZXJyYWluIC0gRGVzZXJ0O1NoYWRvdyBGaWVuZCBBcmNhbmEgRGVtb24gRWF0ZXI7R3JpcHMgb2YgRXRlcm5hbCBIYXJ2ZXN0IFByZW07Q292ZW5hbnQgb2YgdGhlIERlcHRocyBCZWx0O1BhdWxkcm9ucyBvZiBIYXJzaCBTb2pvdXJuO1RoZSBTdW1taXQgMyBDdXJzb3IgUGFjaztCb21idHJhaWxzIGFuZCBCb29tc3RpY2tzIFNwbGVlbjtCb21idHJhaWxzIGFuZCBCb29tc3RpY2tzIENhcnQ7Qm9tYnRyYWlscyBhbmQgQm9vbXN0aWNrcyBTcXVlZTtQb3dkZXJzbGVkIFJvb2tlcnkgQ2Fubm9uO0NyaW1zb24gUHJvZ2VuaXRvcnMgQmFuZTtkYXNoYm9hcmQgc3ZlbjtEYXJrIEFydGlzdHJ5IFRocm93YmFjaztNYW5pZm9sZCBQYXJhZG94IEdvdGhpYyBIdW50ZXI7U3ZlbiBJbW1vcnRhbHMgTWVnYVBhY2s7U2thZGkgTWVkdXNhIFYgMi4wO1BhcmFkaXNlIEJpcmQgU3Rpbmc7TWFycyBUSTEwIENvbGxlY3RvcnMgQ2FjaGUgTWVnYVBhY2s7IDEyM3x8fA==