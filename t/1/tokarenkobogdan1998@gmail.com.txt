limitHWID:: 1 000||| 111:: 08E4B71A-B443-944B-A300-2F1A731CEDDE 111||| 222:: $2y$10$YTUwNWQzM2Q2ZGViOTk1YupFw6OAs2/QxZINq8De7t8y/MEHqRS6i 222||| 123:: Mace of Aeons;Eminence of Ristul Knife Attack;Baby Roshan Prem;Armor of the Equilibrium;Spires of the Prophet Foretold;Garb of the Prophet Foretold;Tail of the Equilibrium;Freya;Seer of Infinity Space Eidolon;Heirlooms of Aeol Drias;Majesty Of The Colossus - Pebble;Barding of the Siege-Drake;Sunken Snapper Wings;Malefic Drakes Hood of the Crimson Witness;Ward of the Phoenix;Terrain - Spring;River Vial Boiling;Pedestal Bladeform Legacy;Creed of the Outlaw Huntsman;Iceplain Ravager;Forgotten Tactician;Burglar of Wasp;Bitterwing Legacy;Amberlight Raiment V 2.0;Ghost Judger;Eldritch Ice Set;Divine Flame V 2.0;Armor of the Moonlit Thicket V 2.1;Convalescing Empress;Allfather of Nature Set;Tales of the Windward Rogue;Bloodroot Guard;Vengeance of the Sunwarrior;Scavenger of the Basilisk;Chains of the Black Death Style 1;The Corruption of Nezzureem;Flowering Shade V 2.0;Arsenal of the Demonic Vessel V 2.1;Arabian Riders;The Witch Hunter V 2.0;Black Orc Warboss V 2.0;Harvests Hound;Marauder of the Chaos Wastes;Kit of the First Hunt V 2.1;Tipsy Brawler;Charge of the Wrathrunner;Chaos Chosen V 3.0;Rose And The Beast;Cloak of the Fallen;Nomad of the Burning Decree;Clock Master V 3.0;Furnator Set;Royal Winterbloom;Astrologer Set;Mischief of the Fae Forager;Smoky Dreamer;Bloody Bride;Kirin Rider Set;Dragons Ascension V 3.0;Wyvern Skin;Samurai Soul V 3.0;Blaze Armor V 2.1;Caerula Silva;Mystic of Celestial Art;Flamed Falcon Patrol Set;The Baptism of Melting Fire;The Path of Odocoeleus;Seaborne Reprisal;The Gifts of Zhuzhou;Dark Forest Punisher;Forbidden Knowledge;Bloody Ripper;Azure Constellation V 2.1;Hunter of Kings V 2.0;Azurite Warden V 2.1;Imperial Envoy;Darkfall Warden no effects V 2.1;Masks of Mischief;Light of Eleanor Set;Lich Master Necromancer V 2.1;Unfettered Malevolence;Chitinous Stalker;Carapace of the Hidden Hive Set;Antipodean Allies;Shoreline Sapper;Armor of the Stalwart Soul;Herald of Measureless Ruin V 2.1;Pitfall Crusader;Creeping Shadow;Harsh Sojourn;Arms of the Bogatyr;Countess of Ristul;Maze Watcher Set;Cunning Corsair;Beacon of Cerulean Light 1 Style V 2.1;Bestowments of the Centurion Vanguard;Kindred of the Umizar Crawler;The Dwarf Engineer;Enduring Solitude;Bite of the Surging Wind;Corridan Maestro V 2.0;Armature of the Belligerent Ram Blue;Clandestine Trail;Samurai Set;Bark of the Ageless Witness;Helm of the Dominator for Troll;Seablight Procession;Ferocious Heart;Omens Embrace;Corruption of the Virulent Krait;Unblinking Eternity;The Infernal Master;The Dusk Crawler Set;Bindings of the Battleranger;Wings of Colorful Icecrystals;Bearer of the Arkturan Talon;Grim Destiny; 123|||