limitHWID:: 1 000||| 111:: 2EF4D81C-74B9-11EB-80EC-8C8CAAE8281A 111||| 222:: 7aca3e4ac13cd507b6a1cf51f6d1c195f7d79eb09c340f0bbcfb609bc975b968b79b7946cf1bf7d87bf3de8a2eae379199284cd412464304e5f07e94a4a8b8a3 222||| 123:: Phantom Assasin RU Arcane voice;Terrorblade ENG Arcane voice;SF RU Arcane voice;Juggernaunt Eng Arcana Voice;Legion Commander RU Arcane voice;Zeus RU Arcane voice;Razzils Midas Knuckles Prem;Eternal Radiance Blades Prem;Molten Claw Prem;Axe of Phractos Prem;Mantle of the Cinder Baron Style 1;Crucible of Rile;Blastforge Exhaler;Darkclaw Emissary Cowl;Darkclaw Emissary Dress;Darkclaw Emissary Arms;Darkclaw Emissary Cloak;Geodesic Eidolon;Tormented Staff effect;Stone Infusion Prem;Mulctant Pall;Axia of Metira;Crescent Bow Arrow only;Children of Verodicia;Fluttering Staff V 2.0;Golden Sullen Hollow V 3.2;Nyx Assassins Dagon;Iron Surge V 2.2;Savage Mettle;The Lightning Orchid V 3.2;Tolling Shadows;Malefic Drakes Strike only Effect;Crimson Cyrridae;Guardians of the Lost Path Dire Towers;Edge of the Lost Order;Heavy Tenderizer;Hazhadal Magebreaker;Piscean Pulverizer;Ancestors Frozen Axe;Beast of Vermilion Wilds;Spirit of Anger V 2.1;Colossal Crystal Chorus effect;Majesty Of The Colossus - Pebble;Majesty Of The Colossus - Cobble;Paddapon of Ribbitar V 4.0;Majesty Of The Colossus - Monolith;Scarlet Oak;Pachyderm Powderwagon Elephant;Pachyderm Powderwagon Sign;Pachyderm Powderwagon Weapon;Pachyderm Powderwagon Spleen;Pachyderm Powderwagon Squee;Cannon of the Fortified Fabricator;Guardians of the Lost Path Radiant Towers;Aegis and Roshan St. Valentine Day;Overgrown Emblem Aghanim Effect;Grand Abscession Hook Bundle;TI-10 Shivas Effect;TI-10 Eul Scepter Effect;TI-10 Level Up Effect;TI-10 Aghanim Effect;TI-10 Bottle Effect;TI-10 Force Staff Effect;TI-10 Mjollnir Effect;TI-10 Mekasm Effect;TI-10 Radiance Effect;TI-10 Phase Boots Effect;25 lvl ping;TI-8 Blink lvl 1 Effect;TI-8 Fountain lvl 2 Effect;Ti-9 Roshan;TI-9 Seasonal Creep Deny Effect;Shatterblast Crown;Piston Impaler;The Iron Pioneer Cogs;Flashpoint Proselyte - Head;Blade of Tears and Crown of Tears;Coat of the Windward Rogue;Rapier of the Windward Rogue;Mask of the Confidant;The Barren Vector;Rectifier;Foliage of Eldritch Gnarl;Focal Resonance V 3.0;Fluttering Amethyst Trap + Icon;Monarch Bow V 2.0;Malefic Drakes Hood of the Crimson Witness;Arms of Desolation Prem;Avon of the Crescent Moon;Twilight Schism;Yulsarias Mantle Prem;Ice Blossom;Manias Mask Prem;Staff of Perplex Prem;Off-Hand Weapon of the Bloodforge;Mask of the Bloodforge;Weapon of the Bloodforge;Aghanims Basher Prem;Inverse Bayonet;Crown of the Dirgeful Overlord;Bracers of the Dirgeful Overlord;Armor of the Dirgeful Overlord;Splattering Forcipule;Mace of the Chosen Prem;Mask of the Crimson Cut-throat;Pads of the Crimson Cut-throat;Guard of the Crimson Cut-throat;Mark of the First Hunt Bestowed;Blade of the Crimson Cut-throat;Mancatcher of the Crimson Cut-throat;Big Bad Bandana;Crest of the Wyrm Lords;Kindred of the Iron Dragon V 3.0;Mount of the Burning Nightmare;Helm of the Burning Nightmare;Shield of the Burning Nightmare;Pauldrons of the Burning Nightmare;Chaos Arbiter;Crown of Gilded Worship;Gilded Edge V 2.0;Bloodstained Britches;Medium Tassels of the Black Death;Rapiers of the Burning God V 3.1;Spottin Goggles;Cannon of the Occultists Pursuit;Golden Full-Bore Bonanza;Infernal Chieftain of the Crimson Witness;Maraxiforms Fallen;Bracers of the Cavern Luminar;Legacy of the Fallen Legion;Golden Moonfall Prem;Shock of the Anvil;Arena Champion Armor;Arena Champion Belt;Staff of Gun-Yu;Auspice of the Whyrlegyge Prem;Golden Shards of Exile;Solar Gyre;Solar Forge;Golden Grasping Bludgeon;Rose of the Corridan Maestro;Complete Garb of the Corridan Maestro;Golden Pale Mausoleum;Sylvan Cascade;Alluvion Prophecy V 2.0;Sagas of the Cymurrin Sage;Hair of the Fallen Princess;Wings of the Fallen Princess;Armor of the Equilibrium;Tail of the Equilibrium;Queen of the Jack Bomber;Tools of the Rowdy Firebrand;Battlefury;Pyrexaec Floe;Valentine Ward;Fractal Horns of Inner Abysm UP;Belt of the Gleaming Seal;Argent Decimator Head;Argent Decimator Arms;Argent Decimator Legs;Battle Banner of the Masked;TI-10 Teleport lvl 3 Effect;Jewel of Aeons Prem;Golden Mask of Metira;Phantom Advent Belt UP;Phantom Advent Shoulders UP;Phantom Advent UP;Phantom Advent Weapon UP;Crystal Maiden Announcer;Crystal Maiden Mega-Kills;Terrain - Immortal Gardens;Watcher Below;Nothlic Burden Prem;Bracers of Aeons Prem;Golden Atomic Ray Thrusters Prem;Spaulders of the Psion Inquisitor;Eminence of Ristul Knife Attack;Severing Crest V 2.0;Bloodfeather Feast;Style of Twilight Shade;Sash of Twilight Shade;Anti-Mage Ultimate Red Dragon;Sherman Maiden V 4.1;Formed Alloy Set;Battle Dress of the Proven;Saccharine Saboteur;Rider of the Storm Set;Divine Anchor Style 2;Bestowments of the Divine Anchor effects;Ascendance of the Rime Lord 1st Style;Transmuted Armaments;Memories of the Vow Eternal;Garments of the Nightsilver Sentinel V 2.1;Black Nihility;Wrath of Ka V 2.1 Style 2;Herald of Measureless Ruin V 2.1;Gold Skymage;Dark Reef Escape V 2.1;Bindings of Deep Magma;Featherfall;Bewitching Flare V 2.0;Light of Eleanor Set;Reminiscence of Dreams;Peacock Priest;Barrier Rogue;Friend of the West;Promise of the First Dawn;The Baptism of Melting Fire;Gunboat Hegemon V 3.0;The Keen Commander;Tools of the Haruspex Set v 2.0;Hunter of Kings V 2.0;The Fractured Order V 3.0;Vengeance of the Sunwarrior;Ancient Magus Style 2;Cry of the Battlehawk;The Chained Scribe;Ritual of the Loyal Fold;Death Blossom Set;Fires of Vashundol no effect V 2.1;Grim Destiny;Plunder of the Savage Monger;Arsenal of the Demonic Vessel V 2.1;Strength of the Demon Stone Set V 3.1;Knight of the Burning Scale V 2.1;Opus of the Vizier Exile V 2.1;Golden Nether Lords Regalia Set Prem;Adage of the Smoldering Sage;Honored Servant of the Empire;Puppet Summoner;Dread Compact;Vestments of the Fallen Princess Style 1;Valkyries Shade;Eminence of the South Star;Righteous Thunderbolt and Arcana MegaPack; 123|||