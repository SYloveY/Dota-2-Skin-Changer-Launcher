bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMEM5QkUxQjUtOUJGRi0xMUVCLTgwRUYtMzhGM0FCNzU4NDU4IDExMXx8fCAyMjI6OiAkMnkkMTAkTXpsbFlUVmpZak0wWmpBMk56RmpOZXZ4VVg1VXBSM3JweHFFOFZZbzVlOXVKZW9uTk84OWUgMjIyfHx8IDEyMzo6IFdlYXRoZXIgTW9vbmJlYW07Q3J5c3RhbCBCYXNpbTtCbGluayBEYWdnZXIgbHZsIDEgVEktNiBFZmZlY3Q7RW1ibGVtIG9mIHRoZSBDcnlzdGFsIEVjaGVsb24gQWdoYW5pbSBFZmZlY3Q7VEktMTAgQWdoYW5pbSBFZmZlY3Q7QWVnaXMgYW5kIFJvc2hhbiBTdC4gVmFsZW50aW5lIERheTtUSS0xMCBCb3R0bGUgRWZmZWN0O1F1ZXN0aW9uIG1hcmsgRGVueTtSZXB0aWxpYW4gUmVmdWdlIERpcmUgQ3JlZXBzO1JlcHRpbGlhbiBSZWZ1Z2UgUmFkaWFudCBDcmVlcHM7VEktMTAgRXVsIFNjZXB0ZXIgRWZmZWN0O1RJLTggRm91bnRhaW4gbHZsIDEgRWZmZWN0O1BlZGVzdGFsIEphZGU7VEktNiBDb21wbGV4aXR5IEdhbWluZyBUUCBFZmZlY3Q7VEktNyBMZXZlbCBVcCBFZmZlY3Q7VEktMTAgTWpvbGxuaXIgRWZmZWN0O1RJLTcgUGhhc2UgQm9vdHMgRWZmZWN0O01pbmUgUmFkaXVzIDcwMjtSaXZlciBWaWFsIEdyZWVuO1RJLTcgU2hpdmFzIEd1YXJkIEVmZmVjdDtMaW5hIEFubm91bmNlcjtUZW1wbGFyIEFzc2Fzc2luIEFuaW1lIFZvaWNlO0Jyb29kIEh1bnRlciBIVUQ7U2Vjb25kIERpc2NpcGxlKnMgRGFnZ2VyO1NjeXRoZSBvZiB0aGUgSHVudGVyKnMgR2xvcnk7VEk5IENhY2hlIENsaW5reiBSZXN0bGVzcyBTaGlrYXJlZSBXZWFwb247Q29tcGxldGUgQWxnaWQgTGVnYWN5O1dlYXBvbiBvZiB0aGUgUGhvZW5peCBDbGFuO09mZmhhbmQgb2YgdGhlIFBob2VuaXggQ2xhbjtDb25zcGljdWQ5519cyBDdWxwcml0IFdlYXBvbnM7U29uZyBvZiB0aGUgQmx1ZWJpcmQgLSBRdWl2ZXI7U29uZyBvZiB0aGUgQmx1ZWJpcmQgLSBCb3c7Qmxvb2QgU2hhcmQ7VGhlIE9ibGl0ZXJhdG9yIG9mIE1hZ2ljO0tpdCBvZiB0aGUgRmlyc3QgSHVudCBWIDIuMTtDbGlua3ogQ2hpbmEgTW9kZWw7RnJlZSBBcmNhbmUgRHJvdyBSYW5nZXIgTW9kO09yZGVyIG9mIHRoZSBXYW5kZXJpbmcgRmxhbWUgViAyLjE7Q2FlcnVsYSBTaWx2YTtHaG9zdCBKdWRnZXI7U2FtYXJlZW4gU2FjcmlmaWNlO0Rlc29sYXRlIENvbnF1ZXN0IENoYW1waW9uO1NlYWJvcm5lIFJlcHJpc2FsO0JsYXppbmcgQ29zbW9zO0Z1bmdhbCBMb3JkIFNldDtBbGx1cmluZyBNZXNtZXI7RGVsaWdodGZ1bCBBZmZsaWN0aW9uO0dpZnRlZCBKZXN0ZXI7U3VuIEFzc2FzaW4gViAzLjA7VHJvbGwgV2FybG9yZCBKYWhSYWthbDtTd2lmdCBQYXRoZmluZGVyIFNldDtHcmltIERlc3Rpbnk7IDEyM3x8fA==