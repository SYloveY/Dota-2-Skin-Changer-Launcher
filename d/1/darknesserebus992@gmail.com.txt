bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogQjA1QzNBQTAtM0MyQi0xMUVCLTgwRTktOEM4Q0FBNDFGNTQ1IDExMXx8fCAyMjI6OiAkMnkkMTAkTVRJd1l6QTRPV1JqWXpFeE5ESmlZTzdyRWkwYi43TERwdmFwWGhSRGRiRzREaUEwaGxlQUMgMjIyfHx8IDEyMzo6IE1hamVzdHkgT2YgVGhlIENvbG9zc3VzIC0gUGViYmxlO0Zyb3N0bW9vdCBUcmVlO1dpbmdzIG9mIHRoZSBGb3VsZmVsbCBDb3JydXB0b3I7RnVyaWQ5519cyBSdW5lO1BhdWxkcm9uIG9mIHRoZSBTdG9ybXdyb3VnaHQgQXJiaXRlcjtHb2xkZW4gQmFzaGVyIG9mIE1hZ2UgU2t1bGxzO0Jhc2hlciBvZiBNYWdlIFNrdWxscztBbGdpZCBMZWdhY3k7U2hvdWxkZXJzIG9mIHRoZSBCbGFjayBXaW5kIFJhdmVuO01hY2Ugb2YgQWVvbnM7T2ZmLUhhbmQgU3dvcmQgb2YgdGhlIFNtb2xkZXJpbmcgU2FnZTtEYXVnaHRlcnMgb2YgSHlkcm9waGlpbmFlO011aCBLZWVuIEd1bjtGdWxsLUJvcmUgQm9uYW56YTtTaWdpbCBNYXNrIG9mIHRoZSBCbGFkZWtlZXBlcjtBcnNlbmFsIG9mIHRoZSBCbGFkZWtlZXBlcjtIZWFsaW5nIEZvdW50IG9mIHRoZSBMb3N0IElzbGVzO0JsYWNrZW5lZCBFZGdlIG9mIHRoZSBCbGFkZWtlZXBlcjtTZW1waXRlcm5hbCBSZXZlbGF0aW9ucyBIYXQ7UGhhbnRvbSBDb25jb3JkO0NhcHJpY2lvdXMgRmF0ZSBIZWFkO0JvdyBvZiB0aGUgQmF0dGxlcmFuZ2VyO0Zsb3dlcnNvbmcgR3VhcmQ7VGVtcGVzdCBIZWxtIG9mIHRoZSBUaHVuZGVyZ29kIFByZW07RHJlc3Mgb2YgdGhlIEJld2l0Y2hpbmcgRmxhcmU7VGhlIFNjYXJsZXQgRmxhcmUgSGVhZDtHbGVhbWluZyBTZWFsO0dvbGRlbiBIeWRyYWthbiBMYXRjaDtIb29rYmxhZGUgb2YgU2thZGk7VGhpcnN0IG9mIEV6dHpob2sgQnVuZGxlIFByZW07VGhlIExpZ2h0bmluZyBPcmNoaWQ7Q29tcGxldGUgR2FyYiBvZiB0aGUgQ29ycmlkYW4gTWFlc3RybztDcnkgb2YgdGhlIEJhdHRsZWhhd2s7VGhlIFdpdGNoIEh1bnRlciBWIDIuMDtFbGR3dXJtcyBUb3VjaDtUaGUgQ29ycnVwdGlvbiBvZiBOZXp6dXJlZW07QWRhZ2Ugb2YgdGhlIFNtb2xkZXJpbmcgU2FnZTtNZW1vcmllcyBvZiB0aGUgVm93IEV0ZXJuYWw7VGhlIER3YXJmIEVuZ2luZWVyO1RoZSBQYXRoIG9mIE9kb2NvZWxldXM7VHJpYWxzIG9mIHRoZSBCbGFja2d1YXJkIE1hZ3VzIE5vIGVmZmVjdHM7QXJteSBPZiBUaGUgVmFzdCBTZWE7Qmxvb2Ryb290IEd1YXJkO0JpbmRpbmdzIG9mIHRoZSBCYXR0bGVyYW5nZXI7TWFyYXVkZXIgb2YgdGhlIENoYW9zIFdhc3RlcztFdmVybGFzdGluZyBIZWF0IFYgMi4wO01hZ2lzdGVyIG9mIHRoZSBOYXJyb3cgRmF0ZXM7U2VhYm9ybmUgUmVwcmlzYWw7T2NlYW4gQ29ucXVlcm9yO1RoZSBHYWxsb3dzIFVuZGVyc3R1ZHkgU2V0O0NvcnJpZGFuIE1hZXN0cm8gViAyLjA7IDEyM3x8fA==