bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDMyQjAyOTAtMDQzNC0wNTNGLTQ0MDYtOTAwNzAwMDgwMDA5IDExMXx8fCAyMjI6OiA1MWE5YzliYjM5MDYxMWVmZDRlMzA4YjAzYmJkOTg5MmNhZjk0YzYzMzUxNDU5YzQwZjJmYWEwNjM4ZmExNjgzYTI2ODc4ODVkNjg3YjU1ZWExOTcyOTc4OTMxMjAwMWExYzg0OTczMmJjZDYxNjA5NDE2ZmFjYmY4NzFmMWFkMSAyMjJ8fHwgMTIzOjogZHJpdmVfZGlyOjpNYXJhdWRlciBvZiB0aGUgQ2hhb3MgV2FzdGVzO2RyaXZlX2Rpcjo6Qm91bnR5IEh1bnRlciBNYW5pYWMgU2V0O2RyaXZlX2Rpcjo6TG9zdCBSYW5nZXI7ZHJpdmVfZGlyOjpUaGUgRmFpdGggb2YgQXZlbmdlcnM7ZHJpdmVfZGlyOjpBbGdpZCBGYWxjb24gViAzLjE7ZHJpdmVfZGlyOjpEZWxpZ2h0cyBvZiBQZXRhbHVuYSBQYXRoZmluZGVyO2RyaXZlX2Rpcjo6QnJpbmdlciBvZiBUcm91Ymxlcztkcml2ZV9kaXI6Ok1pc2dpdmluZ3Mgb2YgdGhlIEVtZXJhbGQgQWdlO2RyaXZlX2Rpcjo6QWxsaWVkIENvbW1hbmRlciBTZXQ7ZHJpdmVfZGlyOjpGYXRlIE1lcmlkaWFuO2RyaXZlX2Rpcjo6U3VzYW5vIE9zIERlc2NlbmRhbnQ7ZHJpdmVfZGlyOjpEYWVtb25mZWxsIEZsYW1lO2RyaXZlX2Rpcjo6TG9yZCBvZiBDaHJvbm9wdGljIFN5bnRoZXNpcztkcml2ZV9kaXI6OkFybWFtZW50cyBvZiB0aGUgTmlnaHQgR3JvdmUgViAyLjE7ZHJpdmVfZGlyOjpGdXJ5IG9mIFdhciBHb2Q7ZHJpdmVfZGlyOjpFeWUgb2YgdGhlIEJlaG9sZGVyO2RyaXZlX2Rpcjo6QmxhZGUgb2YgVGVhcnMgYW5kIENyb3duIG9mIFRlYXJzO2RyaXZlX2Rpcjo6QWxsZmF0aGVyIG9mIE5hdHVyZSBTZXQ7ZHJpdmVfZGlyOjpBbnRpcG9kZWFuIEFsbGllcztkcml2ZV9kaXI6Ok1hbmRhdGUgb2YgdGhlIE5hbWVsZXNzO2RyaXZlX2Rpcjo6VG9sbCBvZiB0aGUgRmVhcmZ1bCBBcmlhO2RyaXZlX2Rpcjo6TGlnaHRicmluZ2VyIFNGO2RyaXZlX2Rpcjo6SHVzaCBvZiBFdGVybmFsIE5pZ2h0O2RyaXZlX2Rpcjo6U291bCBMaWxpdGg7ZHJpdmVfZGlyOjpGb3VsZmVsbCBDb3JydXB0b3I7ZHJpdmVfZGlyOjpCcmF3bGVyIG9mIHRoZSBHbGFjaWVyIFNlYSBWIDMuMDtkcml2ZV9kaXI6OlNlYWJsaWdodCBQcm9jZXNzaW9uO2RyaXZlX2Rpcjo6Um9zaGFuIEh1bnRlcnMgU2V0O2RyaXZlX2Rpcjo6QmluZGluZ3Mgb2YgdGhlIEJhdHRsZXJhbmdlciBMaWdodCBTdHlsZTtkcml2ZV9kaXI6OkltbW9ydGFsIEludm9rZXIgS2lkO2RyaXZlX2Rpcjo6UXVlZW4gb2YgUGFpbiBBcmNhbmEgTWVnYVBhY2s7ZHJpdmVfZGlyOjpQdXBwZXQgUHVkZ2UgUGVyc29uYSAoeWQ5519IGNhbiBhZGQgSG9vaykgVVA7ZHJpdmVfZGlyOjpNb3JwaGxpbmcgSW1tb3J0YWxzIE1lZ2FQYWNrIFVQO2RyaXZlX2Rpcjo6U0YgQXJjYW5hIE1lZ2FwYWNrOyAxMjN8fHw=