bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogNzFFOTA1MjEtOTM0MS1FNzE4LTlENzgtNzREMDJCQzRGNTE3IDExMXx8fCAyMjI6OiAkMnkkMTAkWXpjMU5qYzJOekJsTWpNM05XWm1aLnM5clVxT1hUZ1hqeVNJZElFU0MyeGVaRWgybVlvcG0gMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6T3JpZ2lucyBvZiBGYWl0aCBQcmVtO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgU3Vydml2b3I7ZHJpdmVfZGlyOjpCcmFjZXJzIGFuZCBTaG91bGRlcnMgb2YgdGhlIFN1cnZpdm9yO2RyaXZlX2Rpcjo6T2F0aGJvdW5kIERlZmlhbnQgSGVsbSBuZXc7ZHJpdmVfZGlyOjpHb2xkZW4gQmFzaGVyIEJsYWRlcyBWIDIuMDtkcml2ZV9kaXI6Ok9mZmhhbmQgQmxhZGUgb2YgdGhlIFN1cnZpdm9yIFByZW07ZHJpdmVfZGlyOjpBcmMgV2FyZGVuIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6QXhlIGZ1bGwgSW1tb3J0YWxzIE1lZ2FwYWNrIGFsdDtkcml2ZV9kaXI6Ok9yaWdpbiBvZiB0aGUgVW5tYWtpbmc7ZHJpdmVfZGlyOjpTbHVtYmVyaW5nIFRlcnJvcjtkcml2ZV9kaXI6OlByaW1hbCBQYWVhbjtkcml2ZV9kaXI6OlByaW1hbCBQZWFjZW1ha2VyO2RyaXZlX2Rpcjo6S2luZyBvZiBCZWFzdHMgSGF3aztkcml2ZV9kaXI6OkNoaWVmdGFpbiBvZiB0aGUgUHJpbWFsIFRyaWJlcyBCZWFzdDtkcml2ZV9kaXI6OkVkZ2Ugb2YgRXh0aW5jdGlvbiBCZWx0O2RyaXZlX2Rpcjo6RWRnZSBvZiBFeHRpbmN0aW9uIEJyYWNlcnM7ZHJpdmVfZGlyOjpFZGdlIG9mIEV4dGluY3Rpb24gSGVsbTtkcml2ZV9kaXI6Ok1hdyBvZiBFenR6aG9rO2RyaXZlX2Rpcjo6U2hvdWxkZXIgb2YgdGhlIEJsb29kZm9yZ2U7ZHJpdmVfZGlyOjpPZmYtSGFuZCBXZWFwb24gb2YgdGhlIEJsb29kZm9yZ2U7ZHJpdmVfZGlyOjpUaGlyc3Qgb2YgRXp0emhvayBCbGFkZTtkcml2ZV9kaXI6OkVwb2NoIG9mIHRoZSBBYnlzbTtkcml2ZV9kaXI6Okx5Y29zaWRhZSpzIEJyb29kO2RyaXZlX2Rpcjo6VGhpc3RsZSBDcmF3bGVyO2RyaXZlX2Rpcjo6SW5mZXJuYWwgTWVuYWNlO2RyaXZlX2Rpcjo6R29sZGVuIEluZmVybmFsIENoaWVmdGFpbjtkcml2ZV9kaXI6OkljZXBsYWluIFJhdmFnZXIgSG9ybjtkcml2ZV9kaXI6Okhhcm5lc3Mgb2YgQ29udGVzdGVkIEZhdGU7ZHJpdmVfZGlyOjpIb3JucyBvZiBDb250ZXN0ZWQgRmF0ZTtkcml2ZV9kaXI6OkJlbHQgb2YgQ29udGVzdGVkIEZhdGU7ZHJpdmVfZGlyOjpEaWFib2xpYyBBc3BlY3Q7ZHJpdmVfZGlyOjpUYWxvbnMgb2YgdGhlIEVuZGxlc3MgU3Rvcm0gTWQ5519bnQ7ZHJpdmVfZGlyOjpDaGFvcyBGdWxjcnVtO2RyaXZlX2Rpcjo6VGFsb25zIG9mIHRoZSBFbmRsZXNzIFN0b3JtIFNob3VsZGVyO2RyaXZlX2Rpcjo6Q2hhb3MgQXJiaXRlcjtkcml2ZV9kaXI6OkNsaW5reiBNZWdhUGFjaztkcml2ZV9kaXI6OkRLIFBlcnNvbmEgRGF2aW9uO2RyaXZlX2Rpcjo6RGF2aW9uKnMgRHJhZ29uIEhvbGQgSGVsbTtkcml2ZV9kaXI6OkZyb3N0IEF2YWxhbmNoZSBQcmVtO2RyaXZlX2Rpcjo6R29sZGVuIEljZSBCbG9zc29tO2RyaXZlX2Rpcjo6WXVsc2FyaWEqcyBHbGFjaWVyIFByZW07ZHJpdmVfZGlyOjpZdWxzYXJpYXMgTWFudGxlIFByZW07ZHJpdmVfZGlyOjpUaGUgRHVza2Jsb29tIFRyaWNrc3Rlcjtkcml2ZV9kaXI6OkhlYXJ0cyBvZiBNaXNydWxlO2RyaXZlX2Rpcjo6VGhlIFN1bmJyZWV6ZSBCaXJ0aHJpZ2h0O2RyaXZlX2Rpcjo6U2lsZW50IFdha2U7ZHJpdmVfZGlyOjpDcm93biBvZiB0aGUgU2FjcmVkIEh1bnQ7ZHJpdmVfZGlyOjpTaG91bGRlcnMgb2YgdGhlIFNhY3JlZCBIdW50O2RyaXZlX2Rpcjo6UmVhcGVycyBXcmVhdGg7ZHJpdmVfZGlyOjpFYXJ0aHNoYWtlciBNZWdhUGFjayBOZXc7ZHJpdmVfZGlyOjpLdW5nIGZ1IE1hc3Rlcjtkcml2ZV9kaXI6OlJhcGllciBvZiB0aGUgQnVybmluZyBHb2Q7ZHJpdmVfZGlyOjpCcmFjZXJzIG9mIEFlb25zO2RyaXZlX2Rpcjo6Q2xhc3p1cmVtZSBJbmN1cnNpb24gQmVsdDtkcml2ZV9kaXI6OkNsYXN6dXJlbWUgSW5jdXJzaW9uIEhlYWQ7ZHJpdmVfZGlyOjpKZXdlbCBvZiBBZW9ucztkcml2ZV9kaXI6Ok1hY2Ugb2YgQWVvbnMgUHJlbTtkcml2ZV9kaXI6OlBvcnRlbnQgUGF5bG9hZDtkcml2ZV9kaXI6OkdvbGRlbiBBdG9taWMgUmF5IFRocnVzdGVycyBQcmVtO2RyaXZlX2Rpcjo6SW1tb3J0YWwgSW52b2tlciBLaWQ7ZHJpdmVfZGlyOjpTd29yZCBvZiB0aGUgQmxhZGVmb3JtIEFlc3RoZXRlO2RyaXZlX2Rpcjo6SnVnZ2VybmF1dCBBcmNhbmEgUmVkIEJsYWRlZm9ybSBPcmlnaW5zO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgQmxhZGVmb3JtIEFlc3RoZXRlO2RyaXZlX2Rpcjo6Rm9ydHVuZXMgVG91dCBQcmVtO2RyaXZlX2Rpcjo6TGluZWFnZSBvZiB0aGUgU3Rvcm1sb3JkcyAtIEJhY2s7ZHJpdmVfZGlyOjpMaW5lYWdlIG9mIHRoZSBTdG9ybWxvcmRzIC0gQXJtcztkcml2ZV9kaXI6OkxlZ2FjeSBvZiB0aGUgRmFsbGVuIExlZ2lvbiBTdHlsZSAyIE5FVztkcml2ZV9kaXI6OkJhbmVmdWwgRGV2b3Rpb247ZHJpdmVfZGlyOjpMZWdpb24gQ29tbWFuZGVyIEFyY2FuYSBVUDtkcml2ZV9kaXI6OlNvdWwgb2YgdGhlIFNsYXllciBQcmVtO2RyaXZlX2Rpcjo6R2xvcnkgb2YgdGhlIEVsZGVyZmxhbWUgLSBBcm1zO2RyaXZlX2Rpcjo6V3lybXdyb3VnaHQgRmxhcmU7ZHJpdmVfZGlyOjpEaXNjaXBsZSBvZiB0aGUgV3lybXdyb3VnaHQgRmxhbWU7ZHJpdmVfZGlyOjpIZWxsLVNwYXIgQW5hdGhlbWEgT2JzaWRpYW4gQmxpZ2h0O2RyaXZlX2Rpcjo6SG9ybnMgb2YgdGhlIEJldHJheWVyO2RyaXZlX2Rpcjo6TXVsY3RhbnQgUGFsbCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO2RyaXZlX2Rpcjo6RmluIEtpbmdzIENoYXJtIG9mIEVtaW5lbnQgUmV2aXZhbCBFeGNlcHRpb25hbDtkcml2ZV9kaXI6Ok1vbmFyY2ggb2YgdGhlIFNhcHBoaXJlIEdsZW47ZHJpdmVfZGlyOjpTdWZmZXJ3b29kIFNhcGxpbmc7ZHJpdmVfZGlyOjpTaWducyBvZiB0aGUgQWxsZmF0aGVyIC0gQXJtcztkcml2ZV9kaXI6OlNpZ25zIG9mIHRoZSBBbGxmYXRoZXIgLSBIZWFkO2RyaXZlX2Rpcjo6U2lnbnMgb2YgdGhlIEFsbGZhdGhlciAtIFNob3VsZGVyO2RyaXZlX2Rpcjo6R3JlYXQgU2FnZXMgUmVja29uaW5nIFRpbWVsZXNzIFRhbGU7ZHJpdmVfZGlyOjpTdGFmZiBvZiB0aGUgRGVtb24gVHJpY2tzdGVyO2RyaXZlX2Rpcjo6QXJtb3Igb2YgdGhlIERlbW9uIFRyaWNrc3RlciBSZWQ7ZHJpdmVfZGlyOjpHYXJiIG9mIHRoZSBNYXNrcyBvZiBNaXNjaGllZjtkcml2ZV9kaXI6Ok1vcnBobGluZyBJbW1vcnRhbHMgTWVnYVBhY2sgVVA7ZHJpdmVfZGlyOjpOeXggQXNzYXNzaW4gTWVnYVBhY2sgbmV3O2RyaXZlX2Rpcjo6RXRpZW5uZSpzIFJldmVuZ2U7ZHJpdmVfZGlyOjpDb2F0IG9mIHRoZSBXaW5kd2FyZCBSb2d1ZTtkcml2ZV9kaXI6Ok1hc2sgb2YgdGhlIENvbmZpZGFudDtkcml2ZV9kaXI6OlJhcGllciBvZiB0aGUgV2luZHdhcmQgUm9ndWU7ZHJpdmVfZGlyOjpNYW5pZm9sZCBQYXJhZG94IFBBIEFyY2FuYSBTdHlsZSAzO2RyaXZlX2Rpcjo6Q29kaWNpbCBvZiB0aGUgVmVpbGVkIE9uZXM7ZHJpdmVfZGlyOjpBdm93YW5jZSBvZiB0aGUgVmVpbGVkIE9uZXM7ZHJpdmVfZGlyOjpCbG9zc29tIG9mIHRoZSBNZXJyeSBXYW5kZXJlcjtkcml2ZV9kaXI6Ok1lcnJ5IFdhbmRlcmVyKnMgQnJ1c2ggUHJlbTtkcml2ZV9kaXI6OkNyb3duIG9mIEN1cmlvdXMgQ29sZHNwZWxsO2RyaXZlX2Rpcjo6QmxhZGVzIG9mIFByaXNtYXRpYyBHcmFjZTtkcml2ZV9kaXI6OlRoZSBPcmRlciBvZiBDeXByaW47ZHJpdmVfZGlyOjpSb2JlcyBvZiB0aGUgQ2FwdGl2ZSBQcmluY2Vzcztkcml2ZV9kaXI6OkNyb3duIG9mIHRoZSBDYXB0aXZlIFByaW5jZXNzO2RyaXZlX2Rpcjo6RmVhc3Qgb2YgQWJzY2Vzc2lvbjtkcml2ZV9kaXI6OkdvbGRlbiBTY2F2ZW5naW5nIEd1dHRsZXNsdWc7ZHJpdmVfZGlyOjpJbnNhdGlhYmxlIEJvbmVzYXc7ZHJpdmVfZGlyOjpSaXBwZXJzIFJlZWw7ZHJpdmVfZGlyOjpEZW5kaSBEb2xsO2RyaXZlX2Rpcjo6TXVyZGVyIE1hc2s7ZHJpdmVfZGlyOjpRdWVlbiBvZiBQYWluIEFyY2FuYSBNZWdhUGFjaztkcml2ZV9kaXI6OkVkaWN0IG9mIFNoYWRvd3MgVmFsZWVyYSB0byBSaWtpO2RyaXZlX2Rpcjo6UGF1bGRyb25zIG9mIEV0ZXJuYWwgSGFydmVzdCBQcmVtO2RyaXZlX2Rpcjo6U2hhZG93IEZpZW5kIEFyY2FuYSBEZW1vbiBFYXRlcjtkcml2ZV9kaXI6OkFybXMgb2YgRGVzb2xhdGlvbiBQcmVtO2RyaXZlX2Rpcjo6VGhhbmF0b3MgTWVnYVBhY2sgVVA7ZHJpdmVfZGlyOjpZYXlhIGZvciBTbGFyZGFyIGJ5IFBhdGNob3VsaSBLbm93bGVkZ2U7ZHJpdmVfZGlyOjpHb2xkZW4gR3Jhc3BpbmcgQmx1ZGdlb24gZWZmZWN0O2RyaXZlX2Rpcjo6R29kKnMgTWVyY3k7ZHJpdmVfZGlyOjpBcmVuYSBDaGFtcGlvbiBBcm1vcjtkcml2ZV9kaXI6OkFyZW5hIENoYW1waW9uIEJlbHQ7ZHJpdmVfZGlyOjpQcm9nZW5pdG9ycyBCYW5lO2RyaXZlX2Rpcjo6U2xhcmsgTWVnYVBhY2sgTmV3O2RyaXZlX2Rpcjo6U25pcGVyIEltbW9ydGFsIFdlYXBvbiBvZiB0aGUgQXJkYWxhbiBJbnRlcmRpY3Rvcjtkcml2ZV9kaXI6OlRvcCBIYXQgb2YgdGhlIE9jY3VsdGlzdHMgUHVyc3VpdDtkcml2ZV9kaXI6OlBhdWxkcm9ucyBvZiB0aGUgU2lsdmVyIEZveDtkcml2ZV9kaXI6OkJyYWNlcnMgb2YgdGhlIFNpbHZlciBGb3g7ZHJpdmVfZGlyOjpGdWxsLUJvcmUgQm9uYW56YTtkcml2ZV9kaXI6OlBoYW50b20gQXNjZW5zaW9uIEJlbHQ7ZHJpdmVfZGlyOjpQaGFudG9tIEFzY2Vuc2lvbjtkcml2ZV9kaXI6OlRyYW5zdmVyc2FudCBTb3VsIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7ZHJpdmVfZGlyOjpQaGFudG9tIEFzY2Vuc2lvbiBXZWFwb247ZHJpdmVfZGlyOjpTdmVuIEltbW9ydGFscyBNZWdhUGFjayBVUDtkcml2ZV9kaXI6OkZsdXR0ZXJpbmcgQW1ldGh5c3QgKyBQdXJwbGUgRm9jYWwgUmVzb25hbmNlIERvdGEyQ2hhbmdlciBFZGl0aW9uO2RyaXZlX2Rpcjo6Um9sbGVybWF3c3RlciBhbmQgTWVjaGEgQm9vdHMgb2YgVHJhdmVsIE1rIElJSTtkcml2ZV9kaXI6OkFyY2FuaWMgUmVzb25hbmNlIEJlYW07ZHJpdmVfZGlyOjpCbGFja3NoaWVsZCBQcm90b2Ryb25lIE1pc3NpbGUgTGF1bmNoZXI7ZHJpdmVfZGlyOjpCbGFja3NoaWVsZCBQcm90b2Ryb25lIEFybW9yO2RyaXZlX2Rpcjo6QmxhY2tzaGllbGQgUHJvdG9kcm9uZSBTdGluZ2VyO2RyaXZlX2Rpcjo6SGF0Y2hldCBvZiB0aGUgR3VhcmRlZCBXb3JkO2RyaXZlX2Rpcjo6QXJtb3Igb2YgdGhlIEd1YXJkZWQgV29yZDtkcml2ZV9kaXI6OlR1c2tzIG9mIHRoZSBHdWFyZGVkIFdvcmQ7ZHJpdmVfZGlyOjpIZWxtIG9mIHRoZSBHdWFyZGVkIFdvcmQ7ZHJpdmVfZGlyOjpXaGlza3kgdGhlIFN0b3V0IEFydGlmYWN0IFByZW07ZHJpdmVfZGlyOjpHb2xkZW4gUGlzY2VhbiBQdWx2ZXJpemVyO2RyaXZlX2Rpcjo6TWFqZXN0eSBPZiBUaGUgQ29sb3NzdXMgLSBQZWJibGU7ZHJpdmVfZGlyOjpNYWplc3R5IE9mIFRoZSBDb2xvc3N1cyAtIENvYmJsZTtkcml2ZV9kaXI6Ok1lZGl1bSBGcm9zdG1vb3Q7ZHJpdmVfZGlyOjpNYWplc3R5IE9mIFRoZSBDb2xvc3N1cyAtIE1vbm9saXRoO2RyaXZlX2Rpcjo6U3dvcmQgb2YgdGhlIENvbG9zc3VzIFByZW07ZHJpdmVfZGlyOjpUSS05IE1qb2xsbmlyIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTkgTGV2ZWwgVXAgRWZmZWN0O2RyaXZlX2Rpcjo6VEktOSBGb3VudGFpbiBsdmwgMyBFZmZlY3Q7ZHJpdmVfZGlyOjpUSS05IEV1bCBTY2VwdGVyIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTkgU2hpdmFzIEVmZmVjdDtkcml2ZV9kaXI6OkFnaGFuaW1zIEludGVyZGltZW5zaW9uYWwgQmFieSBSb3NoYW47ZHJpdmVfZGlyOjpUaGUgSW50ZXJuYXRpb25hbCAyMDE1IEN1cnNvciBQYWNrOyAxMjN8fHw=