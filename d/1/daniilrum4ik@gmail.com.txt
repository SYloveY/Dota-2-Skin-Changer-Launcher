bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkWm1OaE5XTmhORGsyTUdKbE1EQXlOdWh0eE5XWmt4aWkwRFh1M0prdzIvMHpDZVpHNjBBbi4gMjIyfHx8IDEyMzo6IEFyYyBXYXJkZW4gTWFnaWNpYW4gU2hvdWxkZXI7QWVnaXMgYW5kIFJvc2hhbiBTdC4gVmFsZW50aW5lIERheTtSYXBpZXIgb2YgdGhlIEJ1cm5pbmcgR29kO1JhcGllcnMgb2YgdGhlIEJ1cm5pbmcgR29kIFYgMy4xO0NpbmRlciBTZW5zZWkgU3R5bGU7QXJtcyBvZiBEZXNvbGF0aW9uIFByZW07QmxpbmsgRGFnZ2VyIGx2bCAxIFRJLTYgRWZmZWN0O1RJLTUgZWZmZWN0IEJsaW5rIERhZ2dlcjtTdW5rZW4gRW1ibGVtIEFnaGFuaW0gRWZmZWN0O1RJLTUgZWZmZWN0IEJvdHRsZTsyNSBsdmwgcGluZztDb2xvclN0YXRzO1RJLTQgZWZmZWN0IERhZ29uO0Z1Y2sgRGVueTtUSS04IEV1bCBFZmZlY3Q7VEktNyBGb3JjZSBTdGFmZiBFZmZlY3Q7VEktNCBlZmZlY3QgcmVnZW4tZm91bnRhaW47UGVkZXN0YWwgUGxhbmV0ZmFsbCBDZWxlc3RpYWwgU3VtbW9ucztXaW50ZXIgU2N5dGhlIG9mIFZ5c2UgRWZmZWN0IDIwMTc7SXJvbiBCcmFuY2ggR0c7TGFzdGhpdCBHb2xkIC0gTmV3IEJsb29tIDIwMTk7VEktNyBMZXZlbCBVcCBFZmZlY3Q7VEktOSBNZWthc20gRWZmZWN0O01qb2xsbmlyIFRJLTYgRWZmZWN0O1BoYXNlIEJvb3RzIFRJLTYgRWZmZWN0O1B1bXBraW4gVHJlZXMgVVA7UmFkaWFuY2UgVEktNiBFZmZlY3Q7TWluZSBSYWRpdXMgNzAyO1JpdmVyIFZpYWwgR3JlZW47VEktOCBTaGl2YXMgRWZmZWN0O0thcHBhIFNpbGVuY2U7VEktNCBlZmZlY3QgVGVsZXBvcnQ7R3VhcmRpYW5zIG9mIHRoZSBMb3N0IFBhdGggRGlyZSBUb3dlcnM7R3VhcmRpYW5zIG9mIHRoZSBMb3N0IFBhdGggUmFkaWFudCBUb3dlcnM7V2ludGVyIFZlcnN1cyBTY3JlZW47Qm9vb29mdXMgd2l0aCBEYXJrIGVmZmVjdDtFeWUgb2YgRm9yZXNpZ2h0O1dlYXRoZXIgU2lyb2NjbztUZXJyYWluIC0gRGVzZXJ0O01lZXBvIEFubm91bmNlcjtBenVyZSBDb25zdGVsbGF0aW9uIEhVRDtFcG9jaCBvZiB0aGUgQWJ5c20gU3BpZGVybGluZ3M7TWFndXMgQXBleDtBY29seXRlIG9mIHRoZSBMb3N0IEFydHM7Rm9ybSBvZiB0aGUgR3JlYXQgQ2FsYW1pdHkgViAyLjE7QmxhZGUgb2YgVGVhcnMgYW5kIENyb3duIG9mIFRlYXJzO0dvbGRlbiBTaGFyZHMgb2YgRXhpbGU7RHJlYWQgb2YgdGhlIEdsZWFtaW5nIFNlYWwgU2V0O0RpZmZ1c2FsIExhbmNlO0NvbXBsZXRlIFdpbmdzIG9mIHRoZSBFdGhlcmVhbCBNb25hcmNoO0dyYW5kIEFic2Nlc3Npb24gSG9vayBCdW5kbGU7RW1pbmVuY2Ugb2YgUmlzdHVsIEtuaWZlIEF0dGFjaztCbG9vZGZlYXRoZXIgRmVhc3Q7U2V2ZXJpbmcgQ3Jlc3QgViAyLjA7SHVzaCBvZiBFdGVybmFsIE5pZ2h0O0dvbGRlbiBHcmFzcGluZyBCbHVkZ2VvbiBlZmZlY3Q7VGhlIEdvbGRlbiBCYXJiIG9mIFNrYWRpO0hlYWRodW50ZXIgU2xhcms7RnJhY3RhbCBIb3JucyBvZiBJbm5lciBBYnlzbSBVUDtQYWRkYXBvbiBvZiBSaWJiaXRhciBWIDQuMDtUaHVuZGVyZ29kKnMgQmFyZSBBcm1zO1RodW5kZXJnb2QqcyBCYXJlIENoZXN0O1RlbXBlc3QgSGVsbSBvZiB0aGUgVGh1bmRlcmdvZCBQcmVtO01vbHRlbiBDbGF3IFByZW07Q3J1Y2libGUgb2YgUmlsZTtNYW50bGUgb2YgdGhlIENpbmRlciBCYXJvbiBTdHlsZSAxO0ludmVyc2UgQmF5b25ldDtCcmFjZXJzIG9mIEFlb25zIFByZW07SmV3ZWwgb2YgQWVvbnMgUHJlbTtHcmVhdCBTYWdlKnMgUmVja29uaW5nO1N0YWZmIG9mIEd1bi1ZdTtJcm9uIFN1cmdlIFYgMi4yO1NhdmFnZSBNZXR0bGU7VGhlIExpZ2h0bmluZyBPcmNoaWQgb2YgRW1pbmVudCBSZXZpdmFsO0ZsdXR0ZXJpbmcgQW1ldGh5c3QgVHJhcCArIEljb247Rm9jYWwgUmVzb25hbmNlIFYgMy4wO1JlY3RpZmllcjtHZW9kZXNpYyBFaWRvbG9uO0VkZ2Ugb2YgdGhlIExvc3QgT3JkZXI7VGhlIFdhcmQgb2YgT2RvY29lbGV1cztHb2xkZW4gU3VsbGVuIEhvbGxvdyBWIDMuMjtNYXJrIG9mIHRoZSBGaXJzdCBIdW50IEJlc3Rvd2VkO01hamVzdHkgT2YgVGhlIENvbG9zc3VzIC0gUGViYmxlO1NtYWxsIEVsZW1lbnRhbCBJY2U7TWVkaXVtIEVsZW1lbnRhbCBJY2U7VGlueSBCYW5hbmE7SW5zYXRpYWJsZSBCb25lc2F3O1RpLTkgUm9zaGFuO0NpbmRlciBTZW5zZWk7VGlua2VyIFNjYXJlY3JvdyBTZXQ7RXhwbG9zaXZlIE1hbmlhYztWaXJ0dWQ5519cyBSb2FyIFYgMi4wO1RveGljIFNGO0Jlc3Rvd21lbnRzIG9mIHRoZSBEaXZpbmUgQW5jaG9yIGVmZmVjdHM7V2l0Y2ggSHVudGVyIFRlbXBsYXI7QW50aS1NYWdlIFVsdGltYXRlIFJlZCBEcmFnb247QW5jaWVudCBNZWNoYW5pc207UmVkIE1pc3QgUmVhcGVyIFNldDtGZWFzdCBvZiB0aGUgR2x1dHRvbnMgTGFyZGVyO0VycmFudCBTb2xkaWVyO0h1bnRlciBvZiBLaW5ncyBWIDIuMDtBbGx1cmUgb2YgdGhlIERlZXA7QWxsZmF0aGVyIG9mIE5hdHVyZSBTZXQ7VW5mZXR0ZXJlZCBNYWxldm9sZW5jZTtWZW5nZWFuY2Ugb2YgdGhlIFN1bndhcnJpb3I7UmVtaW5pc2NlbmNlIG9mIERyZWFtcztHb3BvUHVkZ2U7RGVtb25pYyBQdWduYSBWIDMuMDtNYXplIFdhdGNoZXIgU2V0O0dvbGQgU2t5bWFnZTtWYW50YWdlIG9mIHRoZSBCcmVhY2ggV2FyZGVuO0JpdGUgb2YgdGhlIFN1cmdpbmcgV2luZDtUaGUgSXJvbiBCZWFycyBTZXQ7T3V0bGFuZGlzaCBHb3VybWV0O0l0c3VrYSBLb3RvcmkgZm9yIFdLIGJ5IFBhdGNob3VsaSBLbm93bGVkZ2U7TWlzZ2l2aW5ncyBvZiB0aGUgRW1lcmFsZCBBZ2U7SGF2b2Mgb2YgRHJhZ29uIFBhbGFjZSBWIDIuMDtUaGUgVGltZWtlZXBlciBTaWx2ZXI7VHJlayBvZiB0aGUgVHJhaWxibGF6ZXI7RXhwb25lbnQgb2YgdGhlIEVuZGxlc3MgU3RhcnM7U3VzYW5vIE9zIERlc2NlbmRhbnQ7U3RyeWd3eXIgQmxvb2RzZWVrZXI7TGljaCBNYXN0ZXIgTmVjcm9tYW5jZXIgViAyLjE7Qm91bnR5IEh1bnRlciBNYW5pYWMgU2V0O1N0b3JlZ2dhIDMgTFZMIFVsdCArIEljZSBUaW55OyAxMjN8fHw=