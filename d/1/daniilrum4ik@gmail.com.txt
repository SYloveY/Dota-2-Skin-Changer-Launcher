bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkWm1OaE5XTmhORGsyTUdKbE1EQXlOdWh0eE5XWmt4aWkwRFh1M0prdzIvMHpDZVpHNjBBbi4gMjIyfHx8IDEyMzo6IEFyYyBXYXJkZW4gTWFnaWNpYW4gU2hvdWxkZXI7QWVnaXMgYW5kIFJvc2hhbiBTdC4gVmFsZW50aW5lIERheTtSYXBpZXIgb2YgdGhlIEJ1cm5pbmcgR29kO1JhcGllcnMgb2YgdGhlIEJ1cm5pbmcgR29kIFYgMy4xO0NpbmRlciBTZW5zZWkgU3R5bGU7QXJtcyBvZiBEZXNvbGF0aW9uIFByZW07QmxpbmsgRGFnZ2VyIGx2bCAxIFRJLTYgRWZmZWN0O1RJLTUgZWZmZWN0IEJsaW5rIERhZ2dlcjtTdW5rZW4gRW1ibGVtIEFnaGFuaW0gRWZmZWN0O1RJLTUgZWZmZWN0IEJvdHRsZTsyNSBsdmwgcGluZztDb2xvclN0YXRzO1RJLTQgZWZmZWN0IERhZ29uO0Z1Y2sgRGVueTtUSS04IEV1bCBFZmZlY3Q7VEktNyBGb3JjZSBTdGFmZiBFZmZlY3Q7VEktNCBlZmZlY3QgcmVnZW4tZm91bnRhaW47UGVkZXN0YWwgUGxhbmV0ZmFsbCBDZWxlc3RpYWwgU3VtbW9ucztXaW50ZXIgU2N5dGhlIG9mIFZ5c2UgRWZmZWN0IDIwMTc7SXJvbiBCcmFuY2ggR0c7TGFzdGhpdCBHb2xkIC0gTmV3IEJsb29tIDIwMTk7VEktNyBMZXZlbCBVcCBFZmZlY3Q7VEktOSBNZWthc20gRWZmZWN0O01qb2xsbmlyIFRJLTYgRWZmZWN0O1BoYXNlIEJvb3RzIFRJLTYgRWZmZWN0O1B1bXBraW4gVHJlZXMgVVA7UmFkaWFuY2UgVEktNiBFZmZlY3Q7TWluZSBSYWRpdXMgNzAyO1JpdmVyIFZpYWwgR3JlZW47Um9zaGFuIEhhbGxvd2VlbiBBbmdlbCBTa2luO1RJLTggU2hpdmFzIEVmZmVjdDtLYXBwYSBTaWxlbmNlO1RJLTQgZWZmZWN0IFRlbGVwb3J0O0d1YXJkaWFucyBvZiB0aGUgTG9zdCBQYXRoIERpcmUgVG93ZXJzO0d1YXJkaWFucyBvZiB0aGUgTG9zdCBQYXRoIFJhZGlhbnQgVG93ZXJzO1dpbnRlciBWZXJzdXMgU2NyZWVuO0Jvb29vZnVzIHdpdGggRGFyayBlZmZlY3Q7RXllIG9mIEZvcmVzaWdodDtXZWF0aGVyIFNpcm9jY287VGVycmFpbiAtIERlc2VydDtNZWVwbyBBbm5vdW5jZXI7QXp1cmUgQ29uc3RlbGxhdGlvbiBIVUQ7RXBvY2ggb2YgdGhlIEFieXNtIFNwaWRlcmxpbmdzO01hZ3VzIEFwZXg7QWNvbHl0ZSBvZiB0aGUgTG9zdCBBcnRzO0Zvcm0gb2YgdGhlIEdyZWF0IENhbGFtaXR5IFYgMi4xO0JsYWRlIG9mIFRlYXJzIGFuZCBDcm93biBvZiBUZWFycztHb2xkZW4gU2hhcmRzIG9mIEV4aWxlO0RyZWFkIG9mIHRoZSBHbGVhbWluZyBTZWFsIFNldDtEaWZmdXNhbCBMYW5jZTtDb21wbGV0ZSBXaW5ncyBvZiB0aGUgRXRoZXJlYWwgTW9uYXJjaDtHcmFuZCBBYnNjZXNzaW9uIEhvb2sgQnVuZGxlO0VtaW5lbmNlIG9mIFJpc3R1bCBLbmlmZSBBdHRhY2s7Qmxvb2RmZWF0aGVyIEZlYXN0O1NldmVyaW5nIENyZXN0IFYgMi4wO0h1c2ggb2YgRXRlcm5hbCBOaWdodDtHb2xkZW4gR3Jhc3BpbmcgQmx1ZGdlb24gZWZmZWN0O1RoZSBHb2xkZW4gQmFyYiBvZiBTa2FkaTtIZWFkaHVudGVyIFNsYXJrO0ZyYWN0YWwgSG9ybnMgb2YgSW5uZXIgQWJ5c20gVVA7UGFkZGFwb24gb2YgUmliYml0YXIgViA0LjA7VGh1bmRlcmdvZCpzIEJhcmUgQXJtcztUaHVuZGVyZ29kKnMgQmFyZSBDaGVzdDtUZW1wZXN0IEhlbG0gb2YgdGhlIFRodW5kZXJnb2QgUHJlbTtNb2x0ZW4gQ2xhdyBQcmVtO0NydWNpYmxlIG9mIFJpbGU7TWFudGxlIG9mIHRoZSBDaW5kZXIgQmFyb24gU3R5bGUgMTtJbnZlcnNlIEJheW9uZXQ7QnJhY2VycyBvZiBBZW9ucyBQcmVtO0pld2VsIG9mIEFlb25zIFByZW07R3JlYXQgU2FnZSpzIFJlY2tvbmluZztTdGFmZiBvZiBHdW4tWXU7SXJvbiBTdXJnZSBWIDIuMjtTYXZhZ2UgTWV0dGxlO1RoZSBMaWdodG5pbmcgT3JjaGlkIG9mIEVtaW5lbnQgUmV2aXZhbDtGbHV0dGVyaW5nIEFtZXRoeXN0IFRyYXAgKyBJY29uO0ZvY2FsIFJlc29uYW5jZSBWIDMuMDtSZWN0aWZpZXI7R2VvZGVzaWMgRWlkb2xvbjtFZGdlIG9mIHRoZSBMb3N0IE9yZGVyO1RoZSBXYXJkIG9mIE9kb2NvZWxldXM7R29sZGVuIFN1bGxlbiBIb2xsb3cgViAzLjI7TWFyayBvZiB0aGUgRmlyc3QgSHVudCBCZXN0b3dlZDtNYWplc3R5IE9mIFRoZSBDb2xvc3N1cyAtIFBlYmJsZTtTbWFsbCBFbGVtZW50YWwgSWNlO01lZGl1bSBFbGVtZW50YWwgSWNlO1RpbnkgQmFuYW5hO0NpbmRlciBTZW5zZWk7VGlua2VyIFNjYXJlY3JvdyBTZXQ7RXhwbG9zaXZlIE1hbmlhYztWaXJ0dWQ5519cyBSb2FyIFYgMi4wO1RveGljIFNGO0Jlc3Rvd21lbnRzIG9mIHRoZSBEaXZpbmUgQW5jaG9yIGVmZmVjdHM7V2l0Y2ggSHVudGVyIFRlbXBsYXI7QW50aS1NYWdlIFVsdGltYXRlIFJlZCBEcmFnb247QW5jaWVudCBNZWNoYW5pc207UmVkIE1pc3QgUmVhcGVyIFNldDtGZWFzdCBvZiB0aGUgR2x1dHRvbnMgTGFyZGVyO0VycmFudCBTb2xkaWVyO0h1bnRlciBvZiBLaW5ncyBWIDIuMDtBbGx1cmUgb2YgdGhlIERlZXA7QWxsZmF0aGVyIG9mIE5hdHVyZSBTZXQ7VW5mZXR0ZXJlZCBNYWxldm9sZW5jZTtWZW5nZWFuY2Ugb2YgdGhlIFN1bndhcnJpb3I7UmVtaW5pc2NlbmNlIG9mIERyZWFtcztHb3BvUHVkZ2U7RGVtb25pYyBQdWduYSBWIDMuMDtNYXplIFdhdGNoZXIgU2V0O0dvbGQgU2t5bWFnZTtWYW50YWdlIG9mIHRoZSBCcmVhY2ggV2FyZGVuO0JpdGUgb2YgdGhlIFN1cmdpbmcgV2luZDtUaGUgSXJvbiBCZWFycyBTZXQ7T3V0bGFuZGlzaCBHb3VybWV0O0l0c3VrYSBLb3RvcmkgZm9yIFdLIGJ5IFBhdGNob3VsaSBLbm93bGVkZ2U7TWlzZ2l2aW5ncyBvZiB0aGUgRW1lcmFsZCBBZ2U7SGF2b2Mgb2YgRHJhZ29uIFBhbGFjZSBWIDIuMDtUaGUgVGltZWtlZXBlciBTaWx2ZXI7VHJlayBvZiB0aGUgVHJhaWxibGF6ZXI7RXhwb25lbnQgb2YgdGhlIEVuZGxlc3MgU3RhcnM7U3VzYW5vIE9zIERlc2NlbmRhbnQ7U3RyeWd3eXIgQmxvb2RzZWVrZXI7TGljaCBNYXN0ZXIgTmVjcm9tYW5jZXIgViAyLjE7Qm91bnR5IEh1bnRlciBNYW5pYWMgU2V0O1N0b3JlZ2dhIDMgTFZMIFVsdCArIEljZSBUaW55OyAxMjN8fHw=