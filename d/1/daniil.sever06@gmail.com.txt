bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMzA5QzIzMDVCRTY4IDExMXx8fCAyMjI6OiAkMnkkMTAkWW1WalpUWTVORFpqWlRSaFpqaGtPT2JLejZOeFpMZms5bmZPQ3JzRERNcWVSdXpjQ2xIVmUgMjIyfHx8IDEyMzo6IEhpZGRlbiBWZWN0b3IgLSBIYXQ7SGlkZGVuIFZlY3RvciAtIEJsYWRlO0dvbGRlbiBJbmZlcm5hbCBDaGllZnRhaW47SW5mZXJuYWwgTWVuYWNlO0RpcmUgTmVtZXN0aWNlIENyZWVwcztSYWRpYW50IE5lbWVzdGljZSBDcmVlcHM7RGlwcGVyIHRoZSBEZXN0cm95ZXI7U3dpZnQgQ2xhdyBQcmVtO1RoZSBPcmRlciBvZiBDeXByaW47Q3Jvd24gb2YgdGhlIE1hbGlnbmFudCBSdWxlO0JsaXN0ZXJpbmcgU2hhZGUgb2YgdGhlIENyaW1zb24gV2l0bmVzcztCYXNoZXIgb2YgTWFnZSBTa3VsbHM7T2ZmaGFuZCBCYXNoZXIgb2YgTWFnZSBTa3VsbHM7VGVycmFpbiAtIEltbW9ydGFsIEdhcmRlbnM7R3VhcmRpYW5zIG9mIHRoZSBMb3N0IFBhdGggRGlyZSBUb3dlcnM7R3VhcmRpYW5zIG9mIHRoZSBMb3N0IFBhdGggUmFkaWFudCBUb3dlcnM7VjFsYXQgQW5ub3VuY2VyO0pld2VsIG9mIEFlb25zIFByZW07QnJhY2VycyBvZiBBZW9ucyBQcmVtO01hY2Ugb2YgQWVvbnMgUHJlbTtCbGFkZXMgb2YgUHJpc21hdGljIEdyYWNlO1d5cm13cm91Z2h0IEZsYXJlO0FyY2FuaWMgUmVzb25hbmNlIEJlYW07Um9sbGVybWF3c3RlciBQcmVtO1N1Ym1lcmdlZCBIYXphcmQgSHVsbDtTdWJtZXJnZWQgSGF6YXJkIExhdW5jaGVyO1N1Ym1lcmdlZCBIYXphcmQgUHJvcGVsbGVyO1BhbGUgQXVndXI7UGFsZSBNYXVzb2xldW07RGFyayBBcnRpc3RyeSBCcmFjZXJzIFByZW07RGFyayBBcnRpc3RyeSBDYXBlIFByZW07RGFyayBBcnRpc3RyeSBCZWx0IFByZW07TWFndXMgQWNjb3JkO0RhcmsgQXJ0aXN0cnkgSGFpciAybmQgU3R5bGU7SnVnZ2VybmF1dCBBcmNhbmEgQmxhZGVmb3JtIExlZ2FjeTtGb3J0dW5lcyBUb3V0IFByZW07RGFyayBBcnRpc3RyeSBQYXVsZHJvbnMgUHJlbTtBc3RyYWwgRHJpZnQ7U2hhcmRzIG9mIEV4aWxlIFByZW07SEVZIFRFSVRPS1UgQW5ub25jZXIgTWVnYS1LaWxsO1NpbGVudCBXYWtlO1JlYXBlcnMgV3JlYXRoO0NvbnN0ZWxsYXRpb24gQXJtb3I7V2luZHJhbmdlciBBcmNhbmEgc3R5bGUgMSAoQmx1ZSBCaXJkKSArIEZ1bGwgV1IgaW1tb3J0YWw7SnVuZ2xlIFNlY3JldHM7S2luIG9mIHRoZSBTYW5nc3RyYXRoIEZvbGQ7TGlnaHQgb2YgRWxlYW5vciBTZXQ7QW50aW1hZ2UgV2VpIEZlbWFsZSAoWWQ5519IGNhbiBhZGQgV2VhcG9uIGFuZCBIZWFkKTtUaGUgQ29ycnVwdGlvbiBvZiBOZXp6dXJlZW07QmV3aXRjaGluZyBGbGFyZSBWIDIuMDtTeWx2YW5hcyBMaXZlIChHb2xkKTtNYWdpYyBQeXJvbWFuY2VyO0V4cGxvZXJlciBNYWdpYyBKdW5nbGU7QW5jaWVudCBHdWFyZGlhbiBvZiB0aGUgSnVuZ2xlIFJ1bGU7IDEyM3x8fA==