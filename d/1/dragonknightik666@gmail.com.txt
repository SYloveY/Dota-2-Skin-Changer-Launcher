limitHWID:: 1 000||| 111:: 1E00F2C0-008C-3901-E12E-001FC6888FEC 111||| 222:: d2ad0e5376eee6d6dbc039502a149e53ba4ba8d0a7ac3be22131c50968ed34f08d92f9498da6162b9bccf03e15113177fb866a8281c46b7165c1e74ff2bbbf1f 222||| 123:: Manifold Paradox PA Arcana Style 3;Immortal Invoker Kid;Weather Spring;Terrain - Sanctums of the Divine;Rick and Morty Announcer;Northern Winds - Music Pack;Banshi - Ghostbusters;Centaur - Nas ne dogonish;Kunkka Pirate;KoTL - Ti ne proidesh;Hearth of the Pit HUD;Arcana Crystal Maiden Frost Avalanche;The Sunbreeze Birthright;Tiara of the Faeshade Flower;Dress of the Faeshade Flower;The Gates of Nothl;Darkclaw Emissary Staff with custom Urn;Peacock Priest Exorcism;Virgas Arc;Bracers of Aeons;Lord of Luminaries Eidolons;Twisted Maelstrom with World Chasm Artifact;Disciple of the Wyrmwrought Flame;Dress of the Bewitching Flare Premium;Crown of the Witch Supreme;Left Hand of the Witch Supreme;Infernal Wings Mace;Golden Twilight Schism;Helm of the Dark Moon Stalker;Mount of the Winged Sentinel;Moonfall Prem;Mask of Metira;Spirit of the Sacred Grove - Back;Pterois of the Coastal Kingdom;Shroud of Ka;Moldering Mask of Ka;Sullen Rampart;Golden Sullen Hollow;Sullen Harvest;Crown of Vile Convocation;Shearing Deposition Prem;Chains of Vile Convocation;Tome of Forbidden Knowledge;Blaze of Oblivion Supernova;Span of the Temple of the Fallen Sun;The Barren Crown Prem;Tail of the Scouring Dunes;Haul of the Lucent Canopy;Red Sands Marauder - Head;Bogmarch Charm;Serpent Ward of Tang-Ki;Charm of the Lucent Canopy;Blacksail Cannoneer Hat;Pack of the Ardalan Interdictor;Horror from the Deep Off-Hand;Horror from the Deep Belt;Aquemerald Blade;Horror from the Deep Arms;Floodmask;Flow of the Flowering Shade;Crest of the Flowering Shade;Drape of the Flowering Shade;Edge of the Flowering Shade;Stuntwood Sanctuary of the Crimson Witness;Treant Immortal Head Stuntwood Symbiont;Arms of the Splintering Awe;Stock of the Splintering Awe;Verdant Predator Head;Chomper Ward;Tempest Helm of the Thundergod + Righteous Thunderbolt;TI-10 Bottle Effect;TI-9 Seasonal Creep Deny Effect;TI-4 effect regen-fountain;TI-10 Level Up Effect;Natures Prophet Mega-Kill;Crown of the Iceburnt Elegy;Wings of the Arctic Recluse;Crimson Cyrridae;Frostglade Familiar Hat;Bow of the Frostfangs V 2.0;Solar Forge Prem;AAMegaPack;Windranger Arcana style 2 (Orange Bird) and Full WR immortal;Sven Immortals MegaPack UP;Queen of Pain Arcana MegaPack;Puppet Pudge Persona (you can add Hook) UP;Trapping of the Secret Medicine;Eternal Testament;First Night of the Summer Child;Jakiro MegaPack;Legion Commander ModMaker MegaPack;Armaments of Leviathan Set;Bewitching Flare V 2.0;Mirana MegaPack;Ogre Magi Immortals Arcana MegaPack;Nyx Assassin MegaPack;Omniknight MegaPack;Aristocratic Rebirth;Silver Revenant;Ruler of the Frostbite Dunes;Occultists Pursuit;Silencer MegaPack;Chomper Set;Witch Doctor MegaPack;Devil Ripper;Chilling Feather;Eldwurms Touch V 3.1;Night Stalker Immortal and Reaper Kisilev ModMaker MegaPack;Gold Skymage; 123|||