bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDMwMDAyMDAtMDQwMC0wNTAwLTAwMDYtMDAwNzAwMDgwMDA5IDExMXx8fCAyMjI6OiAkMnkkMTAkTm1ZNU5XWTFZamN4TldKa05EQTRaZTMyL20wd1V4TXZKQXVDSkNzYmYvZEc4aTJPNjJ6b3kgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6UmF6emlscyBNaWRhcyBLbnVja2xlcyBQcmVtO2RyaXZlX2Rpcjo6U3BhdWxkZXJzIG9mIEJpZyAqVW47ZHJpdmVfZGlyOjpFdGVybmFsIFJhZGlhbmNlIEJsYWRlcyBQcmVtO2RyaXZlX2Rpcjo6RnJvc3RyZWFjaCBCcmlnYW5kcyBUaGVybW9zO2RyaXZlX2Rpcjo6V2FhYWdoIENhcCBvZiBMaXR0bGUgQmlnICpVbjtkcml2ZV9kaXI6OlN1aXQgb2YgdGhlIENvbnZpY3RzO2RyaXZlX2Rpcjo6VG94aWMgU2llZ2UgQXJtb3JlZCBTYWRkbGU7ZHJpdmVfZGlyOjpFbmRsZXNzIE5pZ2h0O2RyaXZlX2Rpcjo6Rm9yZ2VtYXN0ZXIqcyBIYW1tZXI7ZHJpdmVfZGlyOjpHdWFyZCBvZiB0aGUgUmVkIE1pc3Q7ZHJpdmVfZGlyOjpSYW1wYW50IE91dHJhZ2U7ZHJpdmVfZGlyOjpCZWx0IG9mIHRoZSBFbmR1cmluZyBDb25zY3JpcHQ7ZHJpdmVfZGlyOjpVbmRlZmVhdGVkIEdlbmVyYWwgQXJtb3I7ZHJpdmVfZGlyOjpUaGUgQmFzaGVyIEJsYWRlcztkcml2ZV9kaXI6OlNob3VsZGVyIFBsYXRlIG9mIHRoZSBGZXJ2ZW50IENvbnNjcmlwdDtkcml2ZV9kaXI6OkFjb2x5dGUgb2YgVmVuZ2VhbmNlIEhvb2RlZCBNYXNrO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgRHJhZ29uKnMgRGlzY2lwbGU7ZHJpdmVfZGlyOjpCcmFjZXJzIG9mIHRoZSBTdXJ2aXZvcjtkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBGb3Jnb3R0ZW4gUGxhbmU7ZHJpdmVfZGlyOjpXaWNrZWQgU3BhY2UgS25pZ2h0O2RyaXZlX2Rpcjo6R2xpZGVyIG9mIHRoZSBNYXJhdWRpbmcgUHlybztkcml2ZV9kaXI6OkNyb3cgb2YgRW1waXJpYyBJbmNlbmRpYXJ5O2RyaXZlX2Rpcjo6TWFzayBvZiB0aGUgUHJpbWFsIEZpcmV3aW5nO2RyaXZlX2Rpcjo6QnVybmluZyBKYWNrcztkcml2ZV9kaXI6Ok1hcmF1ZGVyIENoaWVmdGFpbiBvZiB0aGUgQ2hhb3MgV2FzdGVzO2RyaXZlX2Rpcjo6VGhpcnN0IG9mIEV6dHpob2sgQnVuZGxlIFByZW07ZHJpdmVfZGlyOjpGZWFzdCBvZiB0aGUgVW53aWxsaW5nIFNob3VsZGVycztkcml2ZV9kaXI6OkhlYWQgb2YgdGhlIFNhY3JpZmljaWFsIFNlcnBlbnQ7ZHJpdmVfZGlyOjpEcmFwZSBvZiB0aGUgV2VlcGluZyBCZWFzdDtkcml2ZV9kaXI6OkZlYXN0IG9mIHRoZSBVbndpbGxpbmcgQXJtb3I7ZHJpdmVfZGlyOjpHYXVudGxldHMgb2YgdGhlIFByaW1ldmFsIFByZWRhdG9yO2RyaXZlX2Rpcjo6UWFsZGluIEFzc2Fzc2luKnMgU2xpY2VyO2RyaXZlX2Rpcjo6QmVhdWxpZXUgUmluZztkcml2ZV9kaXI6OlBpc3RvbCBCbGFkZSBvZiB0aGUgSHVudGVyO2RyaXZlX2Rpcjo6V3JhcHMgb2YgdGhlIFNlYXNvbmVkIFZldGVyYW47ZHJpdmVfZGlyOjpDYXBlIG9mIHRoZSBIdW50ZXI7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgSHVudGVyKnMgR2xvcnk7ZHJpdmVfZGlyOjpIYW1tZXIgb2YgdGhlIFRpcHN5IEJyYXdsZXI7ZHJpdmVfZGlyOjpSZWQgRHJhZ29uIFNob3VsZGVycztkcml2ZV9kaXI6OlZpY2Ugb2YgdGhlIFdlc3Q7ZHJpdmVfZGlyOjpCYW5kYW5hIG9mIHRoZSBSdW1ydW5uZXIqcyBDYXJyb25hZGU7ZHJpdmVfZGlyOjpDYXBlIG9mIHRoZSBUaXBzeSBCcmF3bGVyO2RyaXZlX2Rpcjo6R2xvdmVzIG9mIHRoZSBMb2FkZWQgUHJvc3BlY3RzO2RyaXZlX2Rpcjo6QmFyYmFyb3VzIEJsYWRlcyBXZWFwb247ZHJpdmVfZGlyOjpCZWFzdCBvZiB0aGUgQ3JpbXNvbiBSaW5nIEFybW9yO2RyaXZlX2Rpcjo6QmFyYmFyb3VzIEJsYWRlcyBNYXNrO2RyaXZlX2Rpcjo6QmFyYmFyb3VzIEJsYWRlcyBCYWNrO2RyaXZlX2Rpcjo6QmFyYmFyb3VzIEJsYWRlcyBBcm1zO2RyaXZlX2Rpcjo6TGVncyBvZiB0aGUgU2lsa2VuIFF1ZWVuO2RyaXZlX2Rpcjo6QXJjYW5lIEluZmVzdGF0aW9uIEhlYWQ7ZHJpdmVfZGlyOjpMeWNvc2lkYWUqcyBCcm9vZDtkcml2ZV9kaXI6OlBlcmNlcHRpdmUgU3BpZGVybGluZztkcml2ZV9kaXI6OkJsYWNrIFJlYXZlcjtkcml2ZV9kaXI6OkJyYWlkZWQgVGFpbCBvZiB0aGUgQ29ucXVlcmluZyBUeXJhbnQ7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgQ2hhb3MgQ2hvc2VuO2RyaXZlX2Rpcjo6SGVsbSBvZiB0aGUgQ2hhb3MgQ2hvc2VuO2RyaXZlX2Rpcjo6RXRlcm5hbCBCZWx0IG9mIHRoZSBDaGFvcyBDaG9zZW47ZHJpdmVfZGlyOjpFdGVybmFsIEJhcmRpbmcgb2YgdGhlIENoYW9zIENob3Nlbjtkcml2ZV9kaXI6OkljZXBsYWluIFJhdmFnZXIgU2hpZWxkO2RyaXZlX2Rpcjo6UGF1bGRyb25zIG9mIHRoZSBCdXJuaW5nIE5pZ2h0bWFyZTtkcml2ZV9kaXI6OlNoaWVsZCBvZiB0aGUgQnVybmluZyBOaWdodG1hcmU7ZHJpdmVfZGlyOjpQZXJkaXRpb247ZHJpdmVfZGlyOjpXYXIgSGVsbSBvZiB0aGUgQmFsZWZ1bCBSZWlnbjtkcml2ZV9kaXI6OkhlYXQ7ZHJpdmVfZGlyOjpXcmFwIG9mIHRoZSBVcnVzaGluIEh1bnRzbWFuO2RyaXZlX2Rpcjo6S2l0IG9mIHRoZSBIdW50IEV0ZXJuYWw7ZHJpdmVfZGlyOjpHYXVudGxldHMgb2YgdGhlIENyeXB0IEd1YXJkaWFuO2RyaXZlX2Rpcjo6Q2FzayBvZiB0aGUgSHVudCBFdGVybmFsO2RyaXZlX2Rpcjo6R29sZGVuIFJhYmlkIFdhdGNoY29nO2RyaXZlX2Rpcjo6Um9ja2V0IG9mIHRoZSBLZWVuIENvbW1hbmRlcjtkcml2ZV9kaXI6OlRoZSBCcmFzcyBGbHllciBIZWFkO2RyaXZlX2Rpcjo6VGhlIElyb24gUGlvbmVlciBBcm1vcjtkcml2ZV9kaXI6OldhcmNvZyBFbGVjdHJvIFphcHBlcjtkcml2ZV9kaXI6OlJveWFsIFdpbnRlcmJsb29tO2RyaXZlX2Rpcjo6TGFuY2Ugb2YgdGhlIFd1cm1ibG9vZDtkcml2ZV9kaXI6OkN1aXJhc3Mgb2YgdGhlIFd1cm1ibG9vZDtkcml2ZV9kaXI6OlRoZSBHaWxkZWQgTWF3IFNoaWVsZDtkcml2ZV9kaXI6OkhlbG0gb2YgdGhlIFd1cm1ibG9vZDtkcml2ZV9kaXI6OkNhcGUgb2YgdGhlIEJ1cm5pbmcgU2NhbGU7ZHJpdmVfZGlyOjpCYXJkaW5nIG9mIHRoZSBCaXR0ZXJ3aW5nIExlZ2FjeTtkcml2ZV9kaXI6OkdhdW50bGV0cyBvZiBBc2NlbnNpb247ZHJpdmVfZGlyOjpNYWNlIG9mIEFlb25zO2RyaXZlX2Rpcjo6RnJvemVuIFZvaWQgU2hvdWxkZXI7ZHJpdmVfZGlyOjpGcm96ZW4gVm9pZCBIZWFkO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgRW1lcmFsZCBBZ2U7ZHJpdmVfZGlyOjpBcm1zIG9mIE5lenp1cmVlbTtkcml2ZV9kaXI6OkthbnR1c2EgdGhlIFNjcmlwdCBTd29yZDtkcml2ZV9kaXI6OkFybWQ5519ciBvZiB0aGUgRXhpbGVkIFJvbmluO2RyaXZlX2Rpcjo6TWFzayBvZiB0aGUgQmxhZGVzcnVubmVyO2RyaXZlX2Rpcjo6QmF0dGxlIEJhbm5lciBvZiB0aGUgTWFza2VkO2RyaXZlX2Rpcjo6U2luaXN0ZXIgU2hhZG93IEFybXM7ZHJpdmVfZGlyOjpIZWFsaW5nIEZvdW50IG9mIHRoZSBMb3N0IElzbGVzO2RyaXZlX2Rpcjo6QXJtb3Igb2YgdGhlIFJpcHRpZGUgUmFpZGVyO2RyaXZlX2Rpcjo6U3RhZmYgb2YgR3VuLVl1O2RyaXZlX2Rpcjo6R3JlYXQgU2FnZSpzIFJlY2tvbmluZztkcml2ZV9kaXI6OlNob3VsZGVycyBvZiB0aGUgRHJhZ29uIFBhbGFjZTtkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBEaWFib2xpY2FsIEZpZW5kO2RyaXZlX2Rpcjo6SG9ybnMgb2YgdGhlIERpYWJvbGljYWwgRmllbmQ7ZHJpdmVfZGlyOjpBcm1zIG9mIERlc29sYXRpb247ZHJpdmVfZGlyOjpCaW5kaW5ncyBvZiB0aGUgQmF0dGxlcmFuZ2VyO2RyaXZlX2Rpcjo6U3RvcmVnZ2EgMyBMVkwgVWx0ICsgSWNlIFRpbnk7ZHJpdmVfZGlyOjpGbGFpbCBvZiB0aGUgRWxlbWVudGFsIEltcGVyYXRvcjtkcml2ZV9kaXI6OlN3ZWVwIG9mIHRoZSBIZWxscnVubmVyO2RyaXZlX2Rpcjo6QmVhc3Qgb2YgdGhlIE91dGVyIFBsYW5lIFNob3VsZGVyO2RyaXZlX2Rpcjo6SXJvbiBTdXJnZTtkcml2ZV9kaXI6OkJlbHQgb2YgdGhlIEVsZW1lbnRhbCBJbXBlcmF0b3I7ZHJpdmVfZGlyOjpBcm1zIG9mIHRoZSBTdXJnaW5nIFdpbmQ7ZHJpdmVfZGlyOjpHb2xkZW4gQmFzaGVyIG9mIE1hZ2UgU2t1bGxzO2RyaXZlX2Rpcjo6R29sZGVuIE9mZmhhbmQgQmFzaGVyIG9mIE1hZ2UgU2t1bGxzO2RyaXZlX2Rpcjo6SGVsbCpzIEd1aWRlO2RyaXZlX2Rpcjo6QXJtb3Igb2YgQ3J1ZWwgUmVwcmlzYWw7ZHJpdmVfZGlyOjpIZWxtIG9mIHRoZSBOaW1ibGUgRWRnZTtkcml2ZV9kaXI6OkJlbHQgb2YgdGhlIExpZnRlZCBWZWlsO2RyaXZlX2Rpcjo6Q2xvYWsgb2YgdGhlIERhcmsgV3JhaXRoO2RyaXZlX2Rpcjo6RG9vbXNkYXkgUmlwcGVyIFdlYXBvbjtkcml2ZV9kaXI6OkRvb21zZGF5IFJpcHBlciBTaG91bGRlcjtkcml2ZV9kaXI6OkJsb29kbHVzdCBGb3JrO2RyaXZlX2Rpcjo6SGVhZCBvZiB0aGUgR2hhc3RseSBHb3VybWFuZDtkcml2ZV9kaXI6OkJhbGwtbi1DaGFpbnMgb2YgdGhlIEJsYWNrIERlYXRoO2RyaXZlX2Rpcjo6Qmxvb2RzdGFpbmVkIEJyaXRjaGVzO2RyaXZlX2Rpcjo6RGFwcGVyIERpc2d1aXNlIEFybXM7IDEyM3x8fA==