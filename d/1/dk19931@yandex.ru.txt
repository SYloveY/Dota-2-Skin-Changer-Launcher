bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkWlRCaFkyWXhNV0U1TWpnME5tRTROZTJSdFBRNG00QTh3ZFlLOTZYNGROUWxqb3Q4QkVlVE8gMjIyfHx8IDEyMzo6IFRoZSBTdGFubGV5IFBhcmFibGUgQW5ub3VuY2VyO1NleHkgV29tYW4gTWVnYS1LaWxsO0RBQyAyMDE1IENoYW9zIEtuaWdodCBDdXJzb3IgUGFjaztPdmVyZ3Jvd24gRW1ibGVtIEFnaGFuaW0gRWZmZWN0O1RJLTkgQmxpbmsgbHZsIDIgRWZmZWN0O0JhdHRsZSBQYXNzIEVmZmVjdCBFdWw7V2ludGVyIEJhdHRsZSBQYXNzIDIwMTYgRm91bnRhaW4gUmVnZW4gMyBsdmw7VEktMTAgTGV2ZWwgVXAgRWZmZWN0O1RJLTkgUFNHIExHRCBUUCBFZmZlY3Q7WXVsc2FyaWEqcyBHbGFjaWVyIFByZW07Tm90aGxpYyBCdXJkZW4gUHJlbTtQeXJleGFlYyBGbG9lO1NoZWFyaW5nIERlcG9zaXRpb247RmluIEtpbmcqcyBDaGFybSBQcmVtO0F1c3BpY2Ugb2YgdGhlIFdoeXJsZWd5Z2UgUHJlbTtBbGx1dmlvbiBQcm9waGVjeSBWIDIuMDtUaGUgQmFycmVuIFZlY3RvcjtMYXNoIG9mIHRoZSBMaXphcmQgS2luIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7R29sZGVuIExhbWIgdG8gdGhlIFNsYXVnaHRlcjtIdXNoIG9mIEV0ZXJuYWwgTmlnaHQ7SXJvbiBTdXJnZSBWIDIuMjtTYXZhZ2UgTWV0dGxlO0JhcmRpbmcgb2YgQ2hpbWVyaWMgUmFwcG9ydDtIYXJ2ZXN0ZWQgU2hvdWxkZXJzO0hvb2Qgb2YgTHVjaWQgVG9ybWVudDtNdWxjdGFudCBQYWxsO0F2YWRhIEtlZGF2cmE7RG90YUNpbmVtYSBCcmlnaHQgSFVEO1F1ZWVuIG9mIFBhaW4gQW5pbWUgVm9pY2U7V2VhdGhlciBTbm93O01hcmsgb2YgdGhlIE1pc3RyYWwgRmllbmQgViAyLjE7QnJ1bWFsIEJlcnNlcmtlcjtIdW50ZXJzIEdsb3J5O0xpbmVhZ2UgQ2hhcmdlIG9mIHRoZSBUdW5kcmEgV2FyZGVuO1NhY2NoYXJpbmUgU2Fib3RldXI7RGVsaWdodHMgb2YgUGV0YWx1bmEgUGF0aGZpbmRlcjtCaXR0ZXJ3aW5nIExlZ2FjeTtUZW1wZXN0cyBXcmF0aDtBbnZpbCBvZiB0aGUgRWFydGh3cmlnaHQ7SGFybmVzcyBvZiB0aGUgRmlzc3VyZWQgU291bDtUaGUgU2hlZXAgU2V0O0V4cG9uZW50IG9mIHRoZSBFbmRsZXNzIFN0YXJzO1RoZSBDaGFpbmVkIFNjcmliZTtBc2NlbmRhbmNlIG9mIHRoZSBSaW1lIExvcmQgMXN0IFN0eWxlO0Jld2l0Y2hpbmcgRmxhcmUgViAyLjA7VGFsZXMgb2YgdGhlIEdyZXkgV2FzdGVzO0lyZSBvZiBNb2x0ZW4gUmViaXJ0aDtBbmNpZW50IE1hZ3VzIFN0eWxlIDI7Q3Jvd24gb2YgVGhlIE5pZ2h0d29ybGQ7Q2hhcm1lciBvZiBGaXJlc25ha2U7R29sZCBTa3ltYWdlO0JsZXNzaW5nIG9mIHRoZSBDcmVzdGVkIFVtYnJhO0Zlcm9jaWQ5519cyBUb3hpY2FudDtEcmVhZCBDb21wYWN0O0JpbmRpbmdzIG9mIHRoZSBCYXR0bGVyYW5nZXIgTGlnaHQgU3R5bGU7IDEyM3x8fA==