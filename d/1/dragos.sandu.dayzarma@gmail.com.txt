bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRkRBQkYwMDMtM0ExNi0zODQwLUI2Q0EtMjIwRjg3MThGQ0IxIDExMXx8fCAyMjI6OiAkMnkkMTAkWW1SbU1UTTJOVE14TlRNME9UYzBPLjBaMHFVTVQwM3A5M3JRNUFPLmFvQjVMeUt6Ync0eTYgMjIyfHx8IDEyMzo6IFJlcHRpbGlhbiBSZWZ1Z2UgRGlyZSBDcmVlcHM7SmluIGFuZCBZaW4gRm94IFNwaXJpdHMgT25seSBCbGFjaztEZWNsYXJhdGlvbiBvZiB0aGUgRGl2aW5lIExpZ2h0IFJhZGlhbnQgVG93ZXJzO0RlY2xhcmF0aW9uIG9mIHRoZSBEaXZpbmUgU2hhZG93IERpcmUgVG93ZXJzO1JlcHRpbGlhbiBSZWZ1Z2UgUmFkaWFudCBDcmVlcHM7TWFjZSBvZiBWaW5jZXJlIEF0YWNrIEVmZmVjdDtEcm9kbyB0aGUgRHJ1ZmZpbiBhbmQgQmx1ZSBFZmZlY3Q7U2hhbWJsaW5nIERyYXVnO0FybW9yIG9mIHRoZSBTaGFtYmxpbmcgRHJhdWc7QXJtcyBvZiB0aGUgU2hhbWJsaW5nIERyYXVnO0hlbG0gb2YgdGhlIFNoYW1ibGluZyBEcmF1ZztHb2xkZW4gUGFsZSBNYXVzb2xldW07RmFpdGhmdWwgRm9sbG93ZXJzO1JpdmVyIFZpYWwgT2lsO2Rhc2hib2FyZCBxb3AgNDtQeXhsIGFuY2llbnRzIGxvYWRpbmdzY3JlZW47TWF3IG9mIEV6dHpob2s7V3JhdGggb2YgdGhlIEZhbGxlbiBIZWFkO0dvbGRlbiBTaWxlbnQgV2FrZTtIZWxtIG9mIHRoZSBFbWJlciBEZW1vbnM7Rm9ydHVuZXMgVG91dCBQcmVtO0phZ2dlZCBIb25vciBCcmFjZXI7SmFnZ2VkIEhvbm9yIEJhbm5lcjtKYWdnZWQgSG9ub3IgTWFzaztKYWdnZWQgSG9ub3IgTGVncztKYWdnZWQgSG9ub3IgQmxhZGU7V2F0ZXJsb2dnZWQgS3Vua2thIFNob2VzO1ByaXplIG9mIHRoZSBTYWx0d29ybiBNYXJpbmVyO0xldmlhdGhhbiBXaGFsZSBCbGFkZSBQcmVtO0dvbGRlbiBUd2lsaWdodCBTY2hpc207U2F2YWdlIEJlYXN0IFNoYXBlc2hpZnQ7U2F2YWdlIEJlYXN0IFN1bW1vbiBXb2x2ZXM7SHVuZ2VyIG9mIHRoZSBIb3dsaW5nIFdpbGRzIEhlYWQ7QXJtcyBvZiB0aGUgTHVjZW50IENhbm9weTtIYXVsIG9mIHRoZSBMdWNlbnQgQ2Fub3B5O0NyZXN0IG9mIHRoZSBMdWNlbnQgQ2Fub3B5O1JlZCBTYW5kcyBNYXJhdWRlciAtIEhlYWQ7Q3JpbXNvbiBDZW5zZXIgb2YgR2xpc3MgVVA7UmVkIFNhbmRzIE1hcmF1ZGVyIC0gT2ZmaGFuZDtTY2FsZXMgb2YgRWxhc215cjtTbGFyZGFyIEltbW9ydGFsIEhlYWQgRmluIG9mIHRoZSBGaXJzdCBTcGVhcjtTaGFkb3cgaW4gdGhlIERlZXAgRGFnZ2VyO0FuY2llbnQgSW5oZXJpdGFuY2UgLSBCZWx0O0NvbnNwaWN1b3VzIEN1bHByaXQgTW9oYXdrO0JpdHRlciBMaW5lYWdlIEltbW9ydGFsIEF4ZXM7U3dvcmQgb2YgdGhlIE1hbGlnbmFudCBSdWxlO1RlbXBlc3QgSGVsbSBvZiB0aGUgVGh1bmRlcmdvZCArIFJpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdDtGcm9zdCBBdmFsYW5jaGUgUHJlbTtUZXJyYWluIC0gU2FuY3R1bXMgb2YgdGhlIERpdmluZTtXZWF0aGVyIFJhaW47VGhlRmF0UmF0IFdhcnJpb3IgU29uZ3MgTXVzaWMgUGFjayBPZmZpY2lhbDtHb3RoaWMgV2hpc3BlciBCZWx0O0NvZGljaWwgb2YgdGhlIFZlaWxlZCBPbmVzO0F2b3dhbmNlIG9mIHRoZSBWZWlsZWQgT25lcztNYW5pZm9sZCBQYXJhZG94IFBBIEFyY2FuYSBTdHlsZSAyO1F1ZWVuIG9mIFBhaW4gQXJjYW5hIE1lZ2FQYWNrO0ljZSBMaW5hIFByZW1pdW07QmV3aXRjaGluZyBGbGFyZSBWIDIuMDtXaW5kcmFuZ2VyIEFyY2FuYSBzdHlsZSAxIChCbHVlIEJpcmQpICsgRnVsbCBXUiBpbW1vcnRhbDtQcm92aW5jZSBvZiB0aGUgUHNpb24gSW5xdWlzaXRvcjtEcmVhZCBDb21wYWN0IFN0eWxlIDI7V3JhdGggb2YgS2EgViAyLjE7RXZlcmJsYWNrO0JpZyBVbiBWIDMuMDtBQU1lZ2FQYWNrO1RyaWJhbCBUZXJyb3IgViAzLjA7R2lhbnQgSHVudGVyIFYgMi4xO0RlYnRzIG9mIHRoZSBOaWdodHdhdGNobWFuO0J1cm5pbmcgTmlnaHRtYXJlO1F1ZXR6YWw7RG9vbSBJbW1vcnRhbHMgTWVnYVBhY2s7REsgUGVyc29uYSBEYXZpb247QWlyYm9ybmUgTWFjaGV0ZTtIdXNrYXIgTWVnYVBhY2s7TGVnaW9uIENvbW1hbmRlciBNb2RNYWtlciBNZWdhUGFjaztHb2xkZW4gRGFyayBNYXcgSW5oaWJpdG8gYW5kIEdvbGRlbiBQcm9mYW5lIFVuaW9uIGFuZCBHb2xkZW4gRHJlYWQgUmVxdWlzaXRpb24gTGlmZXN0ZWFsZXIgSW1tb3J0YWxzIE1lZ2FwYWNrO0dydWVzb21lIEVtYnJhY2U7RmxpZ2h0IG9mIHRoZSBDcmVzY2VudCBNb29uO1NhdmFnZSBCZWFzdDtNaXJhbmEgVEkxMCBDb2xsZWN0b3JzIENhY2hlIE1lZ2FQYWNrO0NvcnJ1cHRlZCBTaHJpbmUgR2FybWVudHM7U2lsZW5jZXIgVEkxMCBDb2xsZWN0b3JzIENhY2hlIE1lZ2FQYWNrO1NreXdyYXRoIE1hZ2UgTWVnYVBhY2sgVGhhbmF0b3M7QmxhY2sgU2FpbHMgQ29ubm9uZWVyO1N0b3JtIFNwaXJpdCBNZWdhUGFjaztTdmVuIEltbW9ydGFscyBNZWdhUGFjaztGdWxsIE1ldGFsIFRlY2hpZXM7QXp0ZWMgV2FycmlvcjtVcnNhIEltbW9ydGFscyBNZWdhUGFjaztEZXZpbCBSaXBwZXI7Rm9yZXRlbGxlcnMgT2F0aDtXcmFpdGggS2luZyBBcmNhbmEgTWVnYVBhY2s7QW50aU1hZ2UgRmVtYWxlIFBlcnNvbmEgVGhlIERpc2NpcGxlcyBQYXRoIEFudGktTWFnZSBBcmNhbmEgQU1hO0FybW9yIG9mIHRoZSBTaGF0dGVyZWQgVmFuZ3VhcmQ7UHVkZ2UgVEkxMCBDb2xsZWN0b3JzIENhY2hlIE1lZ2FQYWNrOyAxMjN8fHw=