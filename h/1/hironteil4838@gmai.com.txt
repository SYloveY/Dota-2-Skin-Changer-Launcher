bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkTVRjeU9UZGtNamMyTmpjMU4yUTBZZVVrMkQxUTFLdS5yc3FWdlF6OXgxUzloU2pWb0U4S3UgMjIyfHx8IDEyMzo6IENhcGUgb2YgdGhlIFJpc2luZyBHYWxlO1dlYXRoZXIgTW9vbmJlYW07R29sZGVuIE5vdGhsaWMgQnVyZGVuO0dvbGRlbiBNYXNrIG9mIE1ldGlyYTtBeGlhIG9mIE1ldGlyYTtFbWluZW5jZSBvZiBSaXN0dWwgS25pZmUgQXR0YWNrO1NoYWRlIG9mIEFuZ3Vpc2g7U29sYXIgRm9yZ2U7U29sYXIgR3lyZTtHcmFuZCBBYnNjZXNzaW9uIEhvb2sgQnVuZGxlO0RpcmVjb3VydCBKZXN0ZXIgQ2FwO0dvbGRlbiBTY2F2ZW5naW5nIEd1dHRsZXNsdWc7TWFndXMgQXBleDtUcmFpbmVyIERyYWdvbjtXaW5kcmFuZ2VyIEFyY2FuYSBzdHlsZSAxO0Zvb3RmYWxscyBvZiB0aGUgU3BvcmVmYXRoZXJzIC0gRGVhdGggV2FyZDtBd2FsZWJzIFRydW5kbGV3ZWVkO01hc3F1ZSBvZiBBd2FsZWI7RW1lcmFsZCBTdWJqdWdhdGlvbjtFbWVyYWxkIENvbnF1ZXN0O1JlZmxlY3Rpb25zIFNoYWRlIENvbG9yIGZvciBUQjtTd2luZSBvZiB0aGUgU3Vua2VuIEdhbGxleSBQcmVtO0FyY2FuYSBTRiBEZW1vbiBFYXRoZXI7RmVhc3Qgb2YgQWJzY2Vzc2lvbjtDb2RpY2lsIG9mIHRoZSBWZWlsZWQgT25lcztBdm93YW5jZSBvZiB0aGUgVmVpbGVkIE9uZXM7TWFuaWZvbGQgUGFyYWRveCBQQSBBcmNhbmEgU3R5bGUgMztQdWxzYXIgUmVtbmFudCBQcmVtO0dsb3J5IG9mIHRoZSBFbGRlcmZsYW1lIC0gQXJtcztNYXcgb2YgRXp0emhvaztDcmltc29uIEhlYXJ0cyBvZiBNaXNydWxlO0Zyb3N0IEF2YWxhbmNoZSBQcmVtO0RyZWFkIFJldHJpYnV0aW9uIC0gQnJhY2VycztUb21vKmthbiBJbmNhcm5hdGUgQXJtb3I7VG9tbyprYW4gSW5jYXJuYXRlIEhvb2Q7SG9vZHdpbmsgR2xlaXBuaXI7VG9tbyprYW4gSW5jYXJuYXRlIFRhaWw7VG9tbyprYW4gSW5jYXJuYXRlIEFyYmFsZXN0O0JlbmV2b2xlbnQgQ29tcGFuaW9uIFByZW07TGVmdCBIYW5kIG9mIHRoZSBXaXRjaCBTdXByZW1lO0hvcm5zIG9mIHRoZSBCZXRyYXllcjtGaW4gS2luZ3MgQ2hhcm0gb2YgRW1pbmVudCBSZXZpdmFsIEV4Y2VwdGlvbmFsO011bGN0YW50IFBhbGwgb2YgdGhlIENyaW1zb24gV2l0bmVzcztUaGUgQmVsbCBvZiBNZXJhbnRoaWE7VGhlIE9yZGVyIG9mIEN5cHJpbjtCbGFkZXMgb2YgUHJpc21hdGljIEdyYWNlO0ZsdXR0ZXJpbmcgTW9ydGlzIFByZW07SnVnZ2VybmF1dCBBcmNhbmEgQmxhZGVmb3JtIExlZ2FjeTtHbGFyZSBvZiB0aGUgVHlyYW50O0NoYWlucyBvZiBWaWxlIENvbnZvY2F0aW9uO0xpY2ggSW1tb3J0YWwgSGVhZCBQZXJ2ZXJzaW9ucyBvZiB0aGUgQmxvb2R3aG9ybDtTaGVhcmluZyBEZXBvc2l0aW9uO0RlY2xhcmF0aW9uIG9mIHRoZSBEaXZpbmUgTGlnaHQgUmFkaWFudCBUb3dlcnM7RGVjbGFyYXRpb24gb2YgdGhlIERpdmluZSBTaGFkb3cgRGlyZSBUb3dlcnM7VGVycmFpbiAtIFNhbmN0dW1zIG9mIHRoZSBEaXZpbmU7QWdoYW5pbSBEdW5nZW9uIFNjZXB0ZXIgRWZmZWN0O1dvb2RsYW5kIFdhcmJhbmRzIC0gRGlyZSBDcmVlcHM7V29vZGxhbmQgV2FyYmFuZHMgLSBEaXJlIFNpZWdlIENyZWVwcztXb29kbGFuZCBXYXJiYW5kcyAtIFJhZGlhbnQgQ3JlZXBzO1dvb2RsYW5kIFdhcmJhbmRzIC0gUmFkaWFudCBTaWVnZSBDcmVlcHM7Q29uc3RlbGxhdGlvbiBBcm1vcjtIaWRkZW4gVmVjdG9yIC0gQXJtb3I7SGlkZGVuIFZlY3RvciAtIEJlbHQ7SGlkZGVuIFZlY3RvciAtIEhhdDtIaWRkZW4gVmVjdG9yIC0gQmxhZGU7Q29uc3RlbGxhdGlvbiBXZWFwb247UGhhbnRvbSBBZHZlbnQgQmVsdCBVUDtQaGFudG9tIEFkdmVudCBVUDtQaGFudG9tIEFkdmVudCBTaG91bGRlcnMgVVA7RHJlYWQgUmV0cmlidXRpb24gLSBDYXBlO0RyZWFkIFJldHJpYnV0aW9uIC0gSGVhZHdlYXI7SGVsbSBvZiB0aGUgRGFyayBNb29uIFN0YWxrZXI7TW9vbmZhbGwgUHJlbTtNb3VudCBvZiB0aGUgV2luZ2VkIFNlbnRpbmVsO1Rvcm1lbnRlZCBTdGFmZjtEYXJrIEZvcmVzdCBQdW5pc2hlciBCYWNrO0xlc2hyYWMgVGh1bmRlciBHcmlmZmluIFRhaWw7TWFudGxlIG9mIHRoZSBXaGlzcGVyZWQgQm9uZDtEcmVhZCBSZXRyaWJ1dGlvbiAtIFF1aXZlcjtEcmVhZCBSZXRyaWJ1dGlvbiAtIFNob3VsZGVyIEFybW9yO0RyZWFkIFJldHJpYnV0aW9uO01hZ3VzIEFwZXggUHJlbTtNYWd1cyBBY2NvcmQ7TWFudGxlIG9mIHRoZSBCbGFja2d1YXJkIE1hZ3VzO1NvdWwgRGlmZnVzZXIgUHJlbTtBZ2hhbmltcyBMYWJ5cmludGggU2hhZGVyIEVmZmVjdDtSYW5kb20gRW1ibGVtO1BlcmNlcHRpb25zIG9mIHRoZSBFdGVybmFsIE1pbmQ7TWFjZSBvZiBBZW9ucyBQcmVtO0JyYWNlcnMgb2YgQWVvbnM7SmV3ZWwgb2YgQWVvbnM7T3JpZ2luIG9mIHRoZSBVbm1ha2luZztTbHVtYmVyaW5nIFRlcnJvcjtIYXJ2ZXN0ZWQgU2hvdWxkZXJzO0h1bnRlcnMgSG9hcmQ7VGluZXMgb2YgVHliYXJhO0hlYXJ0bGVzcyBIdW50IC0gSGVhZDtEYXJrY2xhdyBFbWlzc2FyeSBTdGFmZjtEYXJrIEFydGlzdHJ5IENhcGUgUHJlbTtHb2xkZW4gVHdpbGlnaHQgU2NoaXNtO1JpdmVyIFZpYWwgQ2hyb21lO0RyZWFkIFJldHJpYnV0aW9uIC0gTGVnIEFybW9yO1JpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrO1dyYWl0aCBLaW5nIEFyY2FuYSBNZWdhUGFjaztSdWJpY2sgQXJjYW5hIHdpdGggSW1tb3J0YWw7UXVlZW4gb2YgUGFpbiBBcmNhbmEgTWVnYVBhY2s7TW9ua2V5IEtpbmcgQXJjYW5hIE1lZ2FQYWNrO01vcnBobGluZyBJbW1vcnRhbHMgTWVnYVBhY2sgVVA7TGVnaW9uIENvbW1hbmRlciBNb2RNYWtlciBNZWdhUGFjaztTdG9ybSBTcGlyaXQgTWVnYVBhY2s7REsgUGVyc29uYSBEYXZpb247U2xhcmsgTWVnYVBhY2sgTmV3O09ncmUgTWFnaSBJbW1vcnRhbHMgQXJjYW5hIE1lZ2FQYWNrO1R3aXN0ZWQgTWFlbHN0cm9tO0JsYXppbmcgQ29zbW9zOyAxMjN8fHw=