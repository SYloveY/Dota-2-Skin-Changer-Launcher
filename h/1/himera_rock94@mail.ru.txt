limitHWID:: 1 000||| 111:: 032E02B4-0499-0596-7B06-480700080009 111||| 222:: $2y$10$MDdjZTBiNTVmNDhkYWNjO.JYnOAVO9g3CXLo.VQ9qXDKSOG/OhgV6 222||| 123:: drive_dir::Focal Resonance V 3.0;drive_dir::Mantle of the Whispered Bond;drive_dir::Ritual of the Loyal Fold;drive_dir::TI-9 Bottle Effect;drive_dir::Golden Shards of Exile Prem;drive_dir::Astral Drift;drive_dir::Tormented Staff of Eminent Revival Exceptional;drive_dir::Sven Immortals MegaPack UP;drive_dir::SF Arcana Megapack;drive_dir::Kung fu Master;drive_dir::Slark MegaPack New;drive_dir::Juggernaut Arcana Red Bladeform Origins;drive_dir::Storm Spirit MegaPack;drive_dir::Temple Defender;drive_dir::Concord Reversion UP;drive_dir::Phantom Concord Prem;drive_dir::Concord Dominion;drive_dir::Steward of the Forbidden Chamber Head;drive_dir::Steward of the Forbidden Chamber Shoulder;drive_dir::Steward of the Forbidden Chamber Armor;drive_dir::Queen of Pain Arcana MegaPack;drive_dir::Rapiers of the Burning God V 3.1;drive_dir::Kunkka Immortals MegaPack;drive_dir::Serrakura Prem;drive_dir::Hidden Vector - Blade;drive_dir::Hidden Vector - Hat;drive_dir::Hidden Vector - Belt;drive_dir::Hidden Vector - Armor;drive_dir::Apogee of the Guardian Flame;drive_dir::Enigmatic Emblem of the Diretide - Green;drive_dir::Blistering Shade of the Crimson Witness for Arcana;drive_dir::Crimson Unbroken Fealty;drive_dir::Armor of Grim Destiny;drive_dir::Scarlet Oak; 123|||