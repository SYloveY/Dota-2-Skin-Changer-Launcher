bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRDVBRDYxRTYtNkQwNy1CQkVELUVCNjAtMjQ0QkZFN0QzOEM1IDExMXx8fCAyMjI6OiAkMnkkMTAkTnpNelpEazRNelJoWldJME9XTXdaZXVDckFXL1M4WmloOHIvblBhVWxYd0QvNnFqWDUwTWUgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6Q3VzdG9tIERhc2hib2FyZCAxMDA7ZHJpdmVfZGlyOjpIVUQgb2YgdGhlIEJ1cm5pbmcgU2NhbGUgSWNlO2RyaXZlX2Rpcjo6VHdpbGlnaHQgSGV4IC0gT2ZmaGFuZDtkcml2ZV9kaXI6OldpbmdzIG9mIHRoZSBGYWUgRm9yYWdlcjtkcml2ZV9kaXI6OkxhbnRlcm4gb2YgdGhlIFNhY2NoYXJpbmUgU2Fib3RldXI7ZHJpdmVfZGlyOjpPZmZoYW5kIEJhc2hlciBvZiBNYWdlIFNrdWxscztkcml2ZV9kaXI6OlNjb3JjaGluZyBUYWxvbjtkcml2ZV9kaXI6OlB1bXBraW4gVHJlZXMgVVA7ZHJpdmVfZGlyOjpGcmFjdGFsIEhvcm5zIG9mIElubmVyIEFieXNtIFVQO2RyaXZlX2Rpcjo6V2luZ3Mgb2YgdGhlIEZvdWxmZWxsIENvcnJ1cHRvciBQcmVtaXVtO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgTGlmdGVkIFZlaWw7ZHJpdmVfZGlyOjpDYXBlIG9mIHRoZSBDcmVlcGluZyBTaGFkb3c7ZHJpdmVfZGlyOjpCcmFjZXJzIG9mIHRoZSBDYXZlcm4gTHVtaW5hcjtkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBPbmUgVHJ1ZSBLaW5nO2RyaXZlX2Rpcjo6Q3Jlc2NlbnQgQm93IEFycm93IG9ubHk7ZHJpdmVfZGlyOjpTcGlyaXQgb2YgdGhlIFNhY3JlZCBHcm92ZSAtIEFybXM7ZHJpdmVfZGlyOjpBcmN0aWMgZmFuZztkcml2ZV9kaXI6OkZyb3plbiBTaWdpbCBvZiB0aGUgR2xhY2llciBTZWE7ZHJpdmVfZGlyOjpCZWFyZCBvZiB0aGUgSGVyZXRpYztkcml2ZV9kaXI6OlBhdWxkcm9ucyBvZiB0aGUgQnVybmluZyBOaWdodG1hcmU7ZHJpdmVfZGlyOjpKZXdlbCBvZiBBZW9ucyBQcmVtO2RyaXZlX2Rpcjo6R29sZGVuIEF0b21pYyBSYXkgVGhydXN0ZXJzIFByZW07ZHJpdmVfZGlyOjpSYWlubWFrZXIgTUsuVklJO2RyaXZlX2Rpcjo6VmFsZW50aW5lIFdhcmQ7ZHJpdmVfZGlyOjpTaGFkb3cgaW4gdGhlIERlZXAgQnJhY2Vycztkcml2ZV9kaXI6OlNoYWRvdyBpbiB0aGUgRGVlcCBCYWNrO2RyaXZlX2Rpcjo6R29sZGVuIEh5ZHJha2FuIExhdGNoO2RyaXZlX2Rpcjo6Q29uc3BpY3VvdXMgQ3VscHJpdCBBcm1vcjtkcml2ZV9kaXI6OkNvbnNwaWN1b3VzIEN1bHByaXQgTW9oYXdrO2RyaXZlX2Rpcjo6bW9oYXdrIHNob3VsZGVyO2RyaXZlX2Rpcjo6QXJtcyBvZiBIYXJzaCBTb2pvdXJuO2RyaXZlX2Rpcjo6QmVsdCBvZiBIYXJzaCBTb2pvdXJuO2RyaXZlX2Rpcjo6THVja3kgQWxwaW5lIFN0YWxrZXIqcyBIYXQ7ZHJpdmVfZGlyOjpHaXJkbGUgb2YgdGhlIEZlcm9jaWQ5519cyBIZWFydDtkcml2ZV9kaXI6OkJhcmsgb2YgdGhlIEFnZWxlc3MgV2l0bmVzcztkcml2ZV9kaXI6OlRpbmtlciBTY2FyZWNyb3cgU2V0O2RyaXZlX2Rpcjo6Um9sbGVybWF3c3RlciBhbmQgTWVjaGEgQm9vdHMgb2YgVHJhdmVsIE1rIElJSTsgMTIzfHx8