bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRDVBRDYxRTYtNkQwNy1CQkVELUVCNjAtMjQ0QkZFN0QzOEM1IDExMXx8fCAyMjI6OiAkMnkkMTAkTnpNelpEazRNelJoWldJME9XTXdaZXVDckFXL1M4WmloOHIvblBhVWxYd0QvNnFqWDUwTWUgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6Q3VzdG9tIERhc2hib2FyZCAxMDA7ZHJpdmVfZGlyOjpIVUQgb2YgdGhlIEJ1cm5pbmcgU2NhbGUgSWNlO2RyaXZlX2Rpcjo6RXZlcmJsYWNrO2RyaXZlX2Rpcjo6RGFya2JyZXcgRW5mb3JjZXIgYW5kIEV0ZXJuYWwgUmFkaWFuY2UgQmxhZGVzIGFuZCBNaWRhcyBLbnVja2xlcyBNZWdhUGFjaztkcml2ZV9kaXI6OkFBTWVnYVBhY2s7ZHJpdmVfZGlyOjpJbW1vcnRhbCBJbnZva2VyIEtpZDtkcml2ZV9kaXI6OlBoYW50b20gQXNjZW5zaW9uIEJlbHQ7ZHJpdmVfZGlyOjpQaGFudG9tIEFzY2Vuc2lvbjtkcml2ZV9kaXI6OlBoYW50b20gQXNjZW5zaW9uIFNob3VsZGVycztkcml2ZV9kaXI6OlBoYW50b20gQXNjZW5zaW9uIFdlYXBvbjtkcml2ZV9kaXI6OlB1cnBsZSBDb2xvciBmb3IgVEI7ZHJpdmVfZGlyOjpEZW1vbiBGb3JtIG9mIHRoZSBGb3VsZmVsbCBDb3JydXB0b3IgVVA7ZHJpdmVfZGlyOjpDaGFzbSBvZiB0aGUgQnJva2VuIENvZGUgQXJtb3I7ZHJpdmVfZGlyOjpTY3l0aGVzIG9mIFNvcnJvdztkcml2ZV9kaXI6OkRyZXNzIG9mIHRoZSBGYWVzaGFkZSBGbG93ZXI7ZHJpdmVfZGlyOjpCZWx0IG9mIHRoZSBGYWVzaGFkZSBGbG93ZXI7ZHJpdmVfZGlyOjpDcmltc29uIEhlYXJ0cyBvZiBNaXNydWxlO2RyaXZlX2Rpcjo6VHdpbGlnaHQgSGV4IC0gT2ZmaGFuZDtkcml2ZV9kaXI6OldpbmdzIG9mIHRoZSBGYWUgRm9yYWdlcjtkcml2ZV9kaXI6OkxhbnRlcm4gb2YgdGhlIFNhY2NoYXJpbmUgU2Fib3RldXI7ZHJpdmVfZGlyOjpUaGUgQmFzaGVyIEJsYWRlcyBmb3IgV2VpO2RyaXZlX2Rpcjo6T2ZmaGFuZCBCYXNoZXIgb2YgTWFnZSBTa3VsbHM7ZHJpdmVfZGlyOjpQdXBwZXQgUHVkZ2UgUGVyc29uYSAoeWQ5519IGNhbiBhZGQgSG9vaykgVVA7ZHJpdmVfZGlyOjpTY29yY2hpbmcgVGFsb247ZHJpdmVfZGlyOjpQdW1wa2luIFRyZWVzIFVQO2RyaXZlX2Rpcjo6QW50aW1hZ2UgV2VpIEZlbWFsZSAoWWQ5519IGNhbiBhZGQgV2VhcG9uIGFuZCBIZWFkKTtkcml2ZV9kaXI6OkZyYWN0YWwgSG9ybnMgb2YgSW5uZXIgQWJ5c20gVVA7ZHJpdmVfZGlyOjpXaW5ncyBvZiB0aGUgRm91bGZlbGwgQ29ycnVwdG9yIFByZW1pdW07ZHJpdmVfZGlyOjpNYW5pZm9sZCBQYXJhZG94IFBBIEFyY2FuYSBTdHlsZSAzO2RyaXZlX2Rpcjo6QXZvd2FuY2Ugb2YgdGhlIFZlaWxlZCBPbmVzO2RyaXZlX2Rpcjo6Q29kaWNpbCBvZiB0aGUgVmVpbGVkIE9uZXM7ZHJpdmVfZGlyOjpCZWx0IG9mIHRoZSBMaWZ0ZWQgVmVpbDtkcml2ZV9kaXI6OkNhcGUgb2YgdGhlIENyZWVwaW5nIFNoYWRvdztkcml2ZV9kaXI6OkdvbGRlbiBHcmF2ZWxtYXcgUHJlbTtkcml2ZV9kaXI6OlBsYW5ldGZhbGwgQnVybmluZyBEZXNjZW50O2RyaXZlX2Rpcjo6QmVsdCBvZiBUZWN0b25pYyBJbXBsaWNhdGlvbnM7ZHJpdmVfZGlyOjpCcmFjZXJzIG9mIHRoZSBDYXZlcm4gTHVtaW5hcjtkcml2ZV9kaXI6OkNyaW1zb24gVW5icm9rZW4gRmVhbHR5O2RyaXZlX2Rpcjo6UGF1bGRyb24gb2YgdGhlIERyZWFkYm9ybiBSZWdlbnQ7ZHJpdmVfZGlyOjpDcm93biBvZiB0aGUgTWFsaWduYW50IFJ1bGU7ZHJpdmVfZGlyOjpDbG9hayBvZiB0aGUgRGFyayBSZXNlcnZvaXI7ZHJpdmVfZGlyOjpCbGlzdGVyaW5nIFNoYWRlIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgT25lIFRydWUgS2luZztkcml2ZV9kaXI6OkNvbnRyb2xsZWQgQnVybjtkcml2ZV9kaXI6OkNsZWFyY3V0IENhdmFsaWVyIFNob3VsZGVycztkcml2ZV9kaXI6OkdvbGRlbiBSZWN0aWZpZXI7ZHJpdmVfZGlyOjpDbGVhcmN1dCBDYXZhbGllciBIZWFkO2RyaXZlX2Rpcjo6Q2xlYXJjdXQgQ2F2YWxpZXIgQmFjaztkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBTaWVnZSBFbmdpbmU7ZHJpdmVfZGlyOjpTcGlyaXQgQnJlYWtlciBNZWdhUGFjaztkcml2ZV9kaXI6OkdvbGRlbiBTdGFmZiBvZiBQZXJwbGV4IFByZW07ZHJpdmVfZGlyOjpDcnV4IG9mIFBlcnBsZXggQXJjYW5hIFN0eWxlO2RyaXZlX2Rpcjo6SGVhZCBvZiB0aGUgSW1wb3NzaWJsZSBSZWFsbTtkcml2ZV9kaXI6OlJ1YmljayBBcmNhbmEgd2l0aCBJbW1vcnRhbDtkcml2ZV9kaXI6OlNob2NrIG9mIHRoZSBBbnZpbCBQcmVtO2RyaXZlX2Rpcjo6VHJ1bmsgb2YgdGhlIE9ybmF0ZSBDcnVlbHR5O2RyaXZlX2Rpcjo6RXllcyBvZiBBcmRlbm9rO2RyaXZlX2Rpcjo6QmVsdCBvZiBPcm5hdGUgQ3J1ZWx0eTtkcml2ZV9kaXI6OkJyYWNlciBvZiB0aGUgU3BpcmFsIEJvcmU7ZHJpdmVfZGlyOjpQdWxzYXIgUmVtbmFudCBQcmVtO2RyaXZlX2Rpcjo6U3Bpcml0IG9mIHRoZSBTYWNyZWQgR3JvdmUgLSBTaG91bGRlcjtkcml2ZV9kaXI6OlRzdWt1bW8gdGhlIE1vb24gQ2xvdWQ7ZHJpdmVfZGlyOjpTcGlyaXQgb2YgdGhlIFNhY3JlZCBHcm92ZSAtIFF1aXZlcjtkcml2ZV9kaXI6OlNwaXJpdCBvZiB0aGUgU2FjcmVkIEdyb3ZlIC0gSGVhZDtkcml2ZV9kaXI6OkNyZXNjZW50IEJvdyBBcnJvdyBvbmx5O2RyaXZlX2Rpcjo6U3Bpcml0IG9mIHRoZSBTYWNyZWQgR3JvdmUgLSBCYWNrO2RyaXZlX2Rpcjo6U3Bpcml0IG9mIHRoZSBTYWNyZWQgR3JvdmUgLSBBcm1zO2RyaXZlX2Rpcjo6RGlzY2lwbGUgb2YgdGhlIFd5cm13cm91Z2h0IEZsYW1lO2RyaXZlX2Rpcjo6U291bCBvZiB0aGUgU2xheWVyIFByZW07ZHJpdmVfZGlyOjpHb2xkZW4gV3lybXdyb3VnaHQgRmxhcmUgUHJlbTtkcml2ZV9kaXI6Okdsb3J5IG9mIHRoZSBFbGRlcmZsYW1lIC0gQXJtcztkcml2ZV9kaXI6OkFyY3RpYyBmYW5nO2RyaXZlX2Rpcjo6QXJtb3Igb2YgdGhlIEd1YXJkZWQgV29yZDtkcml2ZV9kaXI6OlR1c2tzIG9mIERpc3Rpbmd1aXNoZWQgRXhwZWRpdGlvbmFyeTtkcml2ZV9kaXI6OkhlbG0gb2YgdGhlIEd1YXJkZWQgV29yZDtkcml2ZV9kaXI6OldoaXNreSB0aGUgU3RvdXQgQXJ0aWZhY3QgUHJlbTtkcml2ZV9kaXI6OkdvbGRlbiBQaXNjZWFuIFB1bHZlcml6ZXI7ZHJpdmVfZGlyOjpGcm96ZW4gU2lnaWwgb2YgdGhlIEdsYWNpZXIgU2VhO2RyaXZlX2Rpcjo6TWVycnkgV2FuZGVyZXIqcyBCcnVzaCBQcmVtO2RyaXZlX2Rpcjo6Q3Jvd24gb2YgQ3VyaWQ5519cyBDb2xkc3BlbGw7ZHJpdmVfZGlyOjpCbG9zc29tIG9mIHRoZSBNZXJyeSBXYW5kZXJlcjtkcml2ZV9kaXI6OlN1bGxlbiBIYXJ2ZXN0O2RyaXZlX2Rpcjo6R29sZGVuIFN1bGxlbiBIb2xsb3c7ZHJpdmVfZGlyOjpTdWxsZW4gUmFtcGFydDtkcml2ZV9kaXI6OkZvd2wgT21lbiBIZWFkO2RyaXZlX2Rpcjo6QmVhcmQgb2YgdGhlIEhlcmV0aWM7ZHJpdmVfZGlyOjpBcmMgV2FyZGVuIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6QXhlIGZ1bGwgSW1tb3J0YWxzIE1lZ2FwYWNrIGFsdDtkcml2ZV9kaXI6Ok9yaWdpbiBvZiB0aGUgVW5tYWtpbmc7ZHJpdmVfZGlyOjpTbHVtYmVyaW5nIFRlcnJvcjtkcml2ZV9kaXI6OkJyaXN0bGViYWNrIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6RGlhYm9saWMgQXNwZWN0O2RyaXZlX2Rpcjo6VGFsb25zIG9mIHRoZSBFbmRsZXNzIFN0b3JtIE1vdW50IEdyZWVuIFN0eWxlO2RyaXZlX2Rpcjo6R29sZGVuIENoYW9zIEZ1bGNydW07ZHJpdmVfZGlyOjpQYXVsZHJvbnMgb2YgdGhlIEJ1cm5pbmcgTmlnaHRtYXJlO2RyaXZlX2Rpcjo6VGFsb25zIG9mIHRoZSBFbmRsZXNzIFN0b3JtIFdlYXBvbiBHcmVlbiBTdHlsZTtkcml2ZV9kaXI6OkN1cnNlZCBTcGlyaXQ7ZHJpdmVfZGlyOjpDcmltc29uIEJyYWNlcnMgb2YgQWVvbnMgUHJlbTtkcml2ZV9kaXI6OkNsYXN6dXJlbWUgSW5jdXJzaW9uIEJlbHQ7ZHJpdmVfZGlyOjpGYWNlbGVzcyBNYWRuZXNzO2RyaXZlX2Rpcjo6SmV3ZWwgb2YgQWVvbnMgUHJlbTtkcml2ZV9kaXI6Ok1hY2Ugb2YgQWVvbnMgUHJlbTtkcml2ZV9kaXI6OlByb3BlbGxlcnMgb2YgdGhlIFZlc3BpZHVuIEh1bnRlci1LaWxsZXI7ZHJpdmVfZGlyOjpIZWFkIG9mIHRoZSBWZXNwaWR1biBIdW50ZXItS2lsbGVyO2RyaXZlX2Rpcjo6Q29uZSBvZiB0aGUgVmVzcGlkdW4gSHVudGVyLUtpbGxlcjtkcml2ZV9kaXI6OlBheWxvYWQgb2YgdGhlIFZlc3BpZHVuIEh1bnRlci1LaWxsZXI7ZHJpdmVfZGlyOjpHb2xkZW4gQXRvbWljIFJheSBUaHJ1c3RlcnMgUHJlbTtkcml2ZV9kaXI6OlJhaW5tYWtlciBNSy5WSUk7ZHJpdmVfZGlyOjpWYWxlbnRpbmUgV2FyZDtkcml2ZV9kaXI6OkJyYWNlcnMgb2YgdGhlIEJsYWRlZm9ybSBBZXN0aGV0ZTtkcml2ZV9kaXI6OlNob3VsZGVycyBvZiB0aGUgQmxhZGVmb3JtIEFlc3RoZXRlO2RyaXZlX2Rpcjo6SnVnZ2VybmF1dCBBcmNhbmEgUmVkIEJsYWRlZm9ybSBPcmlnaW5zO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgQmxhZGVmb3JtIEFlc3RoZXRlO2RyaXZlX2Rpcjo6Q3JpbXNvbiBFZGdlIG9mIHRoZSBMb3N0IE9yZGVyO2RyaXZlX2Rpcjo6R29sZGVuIERhcmsgTWF3IEluaGliaXRvIGFuZCBHb2xkZW4gUHJvZmFuZSBVbmlvbiBhbmQgR29sZGVuIERyZWFkIFJlcXVpc2l0aW9uIExpZmVzdGVhbGVyIEltbW9ydGFscyBNZWdhcGFjaztkcml2ZV9kaXI6OlNoYWRvdyBpbiB0aGUgRGVlcCBCcmFjZXJzO2RyaXZlX2Rpcjo6U2hhZG93IGluIHRoZSBEZWVwIEJhY2s7ZHJpdmVfZGlyOjpTaGFkb3cgaW4gdGhlIERlZXAgSGVsbTtkcml2ZV9kaXI6OlNoYWRvdyBpbiB0aGUgRGVlcCBBcm1vcjtkcml2ZV9kaXI6OkdvbGRlbiBIeWRyYWthbiBMYXRjaDtkcml2ZV9kaXI6Ok1lZHVzYSBNZWdhUGFjayBORVc7ZHJpdmVfZGlyOjpNb25rZXkgS2luZyBBcmNhbmEgTWVnYVBhY2s7ZHJpdmVfZGlyOjpDb25zcGljdWQ5519cyBDdWxwcml0IEFybW9yO2RyaXZlX2Rpcjo6Q29uc3BpY3VvdXMgQ3VscHJpdCBNb2hhd2s7ZHJpdmVfZGlyOjptb2hhd2sgc2hvdWxkZXI7ZHJpdmVfZGlyOjpCaXR0ZXIgTGluZWFnZSBJbW1vcnRhbCBBeGVzO2RyaXZlX2Rpcjo6QW5jaWVudCBJbmhlcml0YW5jZSAtIFNob3VsZGVyO2RyaXZlX2Rpcjo6QW5jaWVudCBJbmhlcml0YW5jZSAtIEJlbHQ7ZHJpdmVfZGlyOjpBbmNpZW50IEluaGVyaXRhbmNlIC0gTmVjaztkcml2ZV9kaXI6OkFuY2llbnQgSW5oZXJpdGFuY2UgLSBCYWNrO2RyaXZlX2Rpcjo6QW50aG96b2EgR2lhbnQgV2VhcG9uO2RyaXZlX2Rpcjo6QXJtcyBvZiBIYXJzaCBTb2pvdXJuO2RyaXZlX2Rpcjo6QmVsdCBvZiBIYXJzaCBTb2pvdXJuO2RyaXZlX2Rpcjo6Q29uY29yZCBSZXZlcnNpb24gVVA7ZHJpdmVfZGlyOjpDb25jb3JkIERvbWluaW9uO2RyaXZlX2Rpcjo6UGhhbnRvbSBDb25jb3JkIFByZW07ZHJpdmVfZGlyOjpTd2lmdCBDbGF3IGFuZCBGZXJvY2lvdXMgSGVhcnQ7ZHJpdmVfZGlyOjpEaXBwZXIgdGhlIERlc3Ryb3llcjtkcml2ZV9kaXI6Okx1Y2t5IEFscGluZSBTdGFsa2VyKnMgSGF0O2RyaXZlX2Rpcjo6R2lyZGxlIG9mIHRoZSBGZXJvY2lvdXMgSGVhcnQ7ZHJpdmVfZGlyOjpCYXJrIG9mIHRoZSBBZ2VsZXNzIFdpdG5lc3M7ZHJpdmVfZGlyOjpSaXZlciBWaWFsIEJsYWNrO2RyaXZlX2Rpcjo6QWdoYW5pbXMgSW50ZXJkaW1lbnNpb25hbCBCYWJ5IFJvc2hhbjsgMTIzfHx8