bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogQzdDMjM1MEUtOENDMS00ODJGLUJBNkUtRkVEMTlEMUY4RkY4IDExMXx8fCAyMjI6OiAkMnkkMTAkT0dWalpqZzJPRFJrWlRjMk5qTTVaZVZvTHZENFovUjJiM2cwTC9YdmNEbDNmY013VVdxWFcgMjIyfHx8IDEyMzo6IEFlZ2lzIGFuZCBSb3NoYW4gU3QuIFZhbGVudGluZSBEYXk7QWdoYW5pbSBEdW5nZW9uIFNjZXB0ZXIgRWZmZWN0O1BsYW5ldGZhbGwgU3R1biBFZmZlY3Q7MjUgbHZsIHBpbmc7RW1pbmVuY2Ugb2YgUmlzdHVsIERlbnkgMjtTaWxlbnQgV2FrZSBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO01hbnRsZSBvZiB0aGUgQ2luZGVyIEJhcm9uIFN0eWxlIDI7TGl0dGxlIEJsaW5rIERhZ2dlcjtBeGUgb2YgUGhyYWN0b3M7TW9sdGVuIENsYXcgUHJlbTtTbHVtYmVyaW5nIFRlcnJvcjtUaGlyc3Qgb2YgRXp0emhvayBCdW5kbGUgUHJlbTtUaGlyc3Qgb2YgRXp0emhvayAtIE9mZi1IYW5kO0RvdGEgMiBDaGFuZ2VyIEVkaXRpb24gSHVudGVycyBIb2FyZCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO1RpbmVzIG9mIFR5YmFyYTtFbGl4aXIgb2YgRHJhZ29ucyBCcmVhdGggUHJlbTtCZWFzdCBvZiB0aGUgQ3JpbXNvbiBSaW5nIEJyYWNlcnM7Qmxhc3Rmb3JnZSBFeGhhbGVyIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7QmVhc3Qgb2YgdGhlIENyaW1zb24gUmluZyBXZWFwb247RGlhYm9saWMgQXNwZWN0O0Zyb3N0IEF2YWxhbmNoZSBQcmVtO0dvbGRlbiBJY2UgQmxvc3NvbTtOb3RobGljIEJ1cmRlbiBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzIFByZW07RGFya2NsYXcgRW1pc3NhcnkgU3RhZmYgd2l0aCBjdXN0b20gVXJuO0RhcmtjbGF3IEVtaXNzYXJ5IENvd2w7RGFya2NsYXcgRW1pc3NhcnkgRHJlc3M7UmVzaXN0aXZlIFBpbmZvbGQgUHJlbTtPcmIgb2YgRGVsaXZlcmFuY2U7RWxkZXIgRHJha2Ugb2YgQmxhemluZyBPYmxpdmlvbjtKYWRlIFJlY2tvbmluZyBQcmVtO0JlbHQgb2YgVGVjdG9uaWMgSW1wbGljYXRpb25zO01hY2Ugb2YgdGhlIEZpc3N1cmVkIFNvdWw7QXBvZ2VlIG9mIHRoZSBHdWFyZGlhbiBGbGFtZTtWaXJnYXMgQXJjO0Zsb3VyaXNoaW5nIExvZGVzdGFyIFByZW07TG9yZCBvZiBMdW1pbmFyaWVzIEVpZG9sb25zO1BlcmNlcHRpb25zIG9mIHRoZSBFdGVybmFsIE1pbmQ7Q2xhc3p1cmVtZSBJbmN1cnNpb24gQmVsdDtNYWNlIG9mIEFlb25zIFByZW07R29sZGVuIEF0b21pYyBSYXkgVGhydXN0ZXJzIFByZW07VGhlIFNwb2lscyBvZiBEZXp1bjtEYXJrIEFydGlzdHJ5IENhcGUgUHJlbTtEYXJrIEFydGlzdHJ5IEJlbHQgUHJlbTtEYXJrIEFydGlzdHJ5IEhhaXIgMm5kIFN0eWxlO1Nub3cgTWV0ZW9yO01hbnRsZSBvZiB0aGUgQmxhY2tndWFyZCBNYWd1cyBEMkMgRWRpdGlvbjtNYWd1cyBBY2NvcmQ7VG9ybWVudGVkIFN0YWZmO0JlbHQgb2YgVmlsZSBDb252b2NhdGlvbjtUb21lIG9mIEZvcmJpZGRlbiBLbm93bGVkZ2U7U2hlYXJpbmcgRGVwb3NpdGlvbiBQcmVtO1NvdWwgb2YgdGhlIFNsYXllciBQcmVtO0Rpc2NpcGxlIG9mIHRoZSBXeXJtd3JvdWdodCBGbGFtZTtIZWxsLVNwYXIgQW5hdGhlbWEgT2JzaWRpYW4gQmxpZ2h0O011bGN0YW50IFBhbGwgb2YgdGhlIENyaW1zb24gV2l0bmVzcztGaW4gS2luZ3MgQ2hhcm0gb2YgRW1pbmVudCBSZXZpdmFsIEV4Y2VwdGlvbmFsO0hvcm5zIG9mIHRoZSBCZXRyYXllcjtDb2xvciBNZWVwbztQaXRtb3VzZSBGcmF0ZXJuaXR5IFRhaWw7UHVsc2FyIFJlbW5hbnQgUHJlbTtNYW50bGUgb2YgdGhlIFRydWViYXJrIEFkaGVyZW50O01vbmFyY2ggb2YgdGhlIFNhcHBoaXJlIEdsZW47U3VmZmVyd29vZCBTYXBsaW5nO1N1bGxlbiBSYW1wYXJ0O1N1bGxlbiBIb2xsb3cgUHJlbTtCbGFjayBOaWhpbGl0eSBQcmVtO1BpZXJjaW5nIFVtYnJhZ2UgUGFjayBEb3RhIDIgQ2hhbmdlciBFZGl0aW9uO1NldmVyaW5nIExhc2ggUHJlbTtCYXJkaW5nIG9mIHRoZSBNYXplIEtlZXBlcjtBcm1zIG9mIERlc29sYXRpb247U2hlbGQgb2YgRXRlcm5hbCBOaWdodDtTZWEgUmFrZXMgQnJpZGxlO0dhcmIgb2YgdGhlIENvcnJpZGFuIE1hZXN0cm87TWFuZGF0ZSBvZiB0aGUgU3Rvcm1ib3JuO0NyZWF0b3JzIExpZ2h0IENvbG9yIGZvciBUQjtIZWxtIG9mIHRoZSBGb3VsZmVsbCBDb3JydXB0b3IgUHJlbWl1bTtDcnlzdGFsIERyeWFkIFByZW07R29sZGVuIFBpc2NlYW4gUHVsdmVyaXplcjtXaGlza3kgdGhlIFN0b3V0IEFydGlmYWN0IFByZW07UGFsZSBBdWd1cjtIZWxtIG9mIEdyaW0gUmVmb3JtYXRpb247TGFudGVybiBvZiB0aGUgSW5mZXJuYWwgTWF3O1RyaWJhbCBQYXRod2F5cyBTdGFmZjtTa2l0dGVyaW5nIERlc29sYXRpb24gUHJlbTtDcmltc29uIFBpcXVlIFByZW07V2luZHJhbmdlciBCbHVlIEltbW9ydGFsIEJpcmQgVVA7RmFtaWxsYXIgb2YgVHJ1ZSBWaXNpb247VGFpbCBvZiB0aGUgRmVyb2Npb3VzIFRveGljYW50O1dpbmdzIG9mIHRoZSBGYXRhbCBCbG9vbTtSb3NoYW4gR2FyZGVucztUZXJyYWluIC0gSW1tb3J0YWwgR2FyZGVucztJbmZlcm5hbCBDaGllZnRhaW4gb2YgdGhlIENyaW1zb24gV2l0bmVzcztQcmVsYXRlcyBCcmFjZXJzIG9mIHRoZSBXeXZlcm4gTGVnaW9uO1JhbXBhbnQgT3V0cmFnZSBQcmVtO1NwbGF0dGVyaW5nIEZvcmNpcHVsZTtDdWx0IG9mIEFrdG9rO0dvbGRlbiBNb29uZmFsbCBQcmVtO1NoYWRlIG9mIHRoZSBTcGl0ZWZ1bCBFeWU7R29sZGVuIExhbWIgdG8gdGhlIFNsYXVnaHRlciBQcmVtO0FybXMgb2YgdGhlIEx1Y2VudCBDYW5vcHk7SGF1bCBvZiB0aGUgTHVjZW50IENhbm9weTtTaG9jayBvZiB0aGUgQW52aWwgUHJlbTtUZW1wZXN0IEhlbG0gb2YgdGhlIFRodW5kZXJnb2QgKyBSaWdodGVvdXMgVGh1bmRlcmJvbHQ7Q29uY29yZCBSZXZlcnNpb24gVVA7V2luZHJhbmdlciBDdXN0b20gQmx1ZSBJbW1vcnRhbCBCb3c7Q3VzdG9tIEJsdWUgSW1tb3J0YWwgQ2FwZTtBdXNwaWNlIG9mIHRoZSBXaHlybGVneWdlIEVnZyBTY3JhbWJsZXI7Rmx1dHRlcmluZyBBbWV0aHlzdCBUcmFwICsgSWNvbjtGbHV0dGVyaW5nIEFtZXRoeXN0ICsgUHVycGxlIEZvY2FsIFJlc29uYW5jZSBEb3RhMkNoYW5nZXIgRWRpdGlvbjtCcm9vZG1vdGhlciBBbmltZSBWb2ljZTtDcnlzdGFsIE1haWRlbiBBbmltZSBWb2ljZTtEcm93IFJhbmdlciBBbmltZSBWb2ljZTtEZWF0aCBQcm9waGV0IEFuaW1lIFZvaWNlO0VuY2hhbnRyZXNzIEFuaW1lIFZvaWNlO0xpbmEgQW5pbWUgVm9pY2U7THVuYSBBbmltZSBWb2ljZTtNZWR1c2EgQW5pbWUgVm9pY2U7TmFnYSBTaXJlbiBBbmltZSBWb2ljZTtQaGFudG9tIEFzc2Fzc2luIEFuaW1lIFZvaWNlO1B1Y2sgQW5pbWUgVm9pY2U7U3BlY3RyZSBBbmltZSBWb2ljZTtUZW1wbGFyIEFzc2Fzc2luIEFuaW1lIFZvaWNlO1ZlbmdlZnVsIFNwaXJpdCBBbmltZSBWb2ljZTtXaW50ZXIgV3l2ZXJuIEFuaW1lIFZvaWNlO1Jpc2UgS3VqaWthd2EgQW5ub3VuY2VyIChKYXApO0JyYWNlcnMgb2YgdGhlIEFyZGFsYW4gSW50ZXJkaWN0b3I7UGFjayBvZiB0aGUgQXJkYWxhbiBJbnRlcmRpY3RvcjtIZWxtIG9mIHRoZSBBcmRhbGFuIEludGVyZGljdG9yO0NvbGFyIG9mIHRoZSBBcmRhbGFuIEludGVyZGljdG9yO1NuaXBlciBJbW1vcnRhbCBXZWFwb24gb2YgdGhlIEFyZGFsYW4gSW50ZXJkaWN0b3I7QXBwYXJhdHVzIG9mIEZ1bGwgVGhyb3R0bGU7U2hhZG93IGluIHRoZSBEZWVwIEFybW9yO0NvbXBsZXRlIFdpbmdzIG9mIHRoZSBFdGhlcmVhbCBNb25hcmNoO09yYiBvZiBSZW1pbmlzY2VuY2U7QnJhY2VycyBvZiB0aGUgRnJhY3R1cmVkIEVudm95O0NhcGUgb2YgdGhlIEZyYWN0dXJlZCBFbnZveTtXcmFpdGhiaW5kZXI7SG9vZHdpbmsgR2xlaXBuaXI7T3JpZ2luIG9mIHRoZSBVbm1ha2luZztDaGl0b2dlIE1lZ2EtS2lsbHM7VGhlRmF0UmF0IFdhcnJpb3IgU29uZ3MgTXVzaWMgUGFjayBPZmZpY2lhbDtDcmltc29uIE1vdXJuZnVsIFJldmVyaWU7U2hhcmRzIG9mIEV4aWxlIFByZW07QnJhY2VyIG9mIEZ1bGwgVGhyb3R0bGU7V2ludGVyIEJhdHRsZSBQYXNzIDIwMTYgVGVsZXBvcnQ7V2ludGVyIEJhdHRsZSBQYXNzIDIwMTYgRm91bnRhaW4gUmVnZW4gMyBsdmw7UHJlbGF0ZXMgTWFudGxlIG9mIHRoZSBXeXZlcm4gTGVnaW9uO0hvb2R3aW5rIERyYWdvbiBDcm9zc2JvdztHb2xkZW4gU2V2ZXJpbmcgQ3Jlc3QgUHJlbTtQaGFudG9tIEFkdmVudCBTaG91bGRlcnMgVVA7UGhhbnRvbSBBZHZlbnQgQmVsdCBVUDtQaGFudG9tIEFkdmVudCBVUDtBeGlhIG9mIE1ldGlyYTtCbGFja3NoaWVsZCBQcm90b2Ryb25lIEFybW9yO0JsYWNrc2hpZWxkIFByb3RvZHJvbmUgTWlzc2lsZSBMYXVuY2hlcjtCbGFja3NoaWVsZCBQcm90b2Ryb25lIFN0aW5nZXI7Um9sbGVybWF3c3RlcjtDb25zcGljdWQ5519cyBDdWxwcml0IE1vaGF3azttb2hhd2sgc2hvdWxkZXI7Q29uc3BpY3VvdXMgQ3VscHJpdCBBcm1vcjtMYXNoIG9mIHRoZSBMaXphcmQgS2luIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7Q3JpbXNvbiBDZW5zZXIgb2YgR2xpc3MgVVA7QXZvd2FuY2Ugb2YgdGhlIENyaW1zb24gV2l0bmVzcztHb2RzIE1lcmN5IG9mIHRoZSBDcmltc29uIFdpdG5lc3M7Q3JpbXNvbiBQcm9nZW5pdG9ycyBCYW5lO0hhcmJvcmJsb3Nzb20gb2YgdGhlIENyaW1zb24gV2l0bmVzcztQcmltYWwgUGVhY2VtYWtlciBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO0dyb21pdDtGZXR0ZXJzIG9mIE9tbmlzY2llbmNlIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7RGVzZXJ0IEJ1cm4gU2FkZGxlO0Rlc2VydCBCdXJuIE91dGZpdDtEZXNlcnQgQnVybiBDYXA7RGVzZXJ0IEJ1cm4gTW9ydHkgSW1tb3J0YWw7RGVzZXJ0IEJ1cm4gQ3Jvc3Nib3c7U291bCBEaWZmdXNlciBQcmVtO0lyb24gQnJhbmNoIEdHO1JveWFsIERlY3JlZSBXaGlwIEF0dGFjaztSaXZlciBWaWFsIFNUQU5EQVJUO0Nyb3duIG9mIHRoZSBSb3lhbCBEZWNyZWU7RGFzaGJvYXJkIFdSIEFyY2FuYTtEYXJrYnJldyBFbmZvcmNlciBhbmQgRXRlcm5hbCBSYWRpYW5jZSBCbGFkZXMgYW5kIE1pZGFzIEtudWNrbGVzIE1lZ2FQYWNrO0FBTWVnYVBhY2s7QW50aU1hZ2UgUkVEIE1lZ2FQYWNrO1VuYnJva2VuIFN0YWxsaW9uO0NsaW5reiBNZWdhUGFjaztFYXJ0aHNoYWtlciBNZWdhUGFjaztNb251bWVudHMgb2YgdGhlIE5hdHVyYWwgRGVtaXVyZ2U7RW5pZ21hIE1lZ2FQYWNrO0t1bmtrYSBJbW1vcnRhbHMgTWVnYVBhY2s7UmFkaWFudCBDb25xdWVyb3I7TWFycyBUSTEwIENvbGxlY3RvcnMgQ2FjaGUgTWVnYVBhY2s7TWVkdXNhIE1lZ2FQYWNrIE5FVztNaXJhbmEgVEkxMCBDb2xsZWN0b3JzIENhY2hlIE1lZ2FQYWNrO01vbmtleSBLaW5nIEFyY2FuYSBNZWdhUGFjaztPZ3JlIE1hZ2kgSW1tb3J0YWxzIEFyY2FuYSBNZWdhUGFjaztPbW5pa25pZ2h0IE1lZ2FQYWNrO0ljZSBQaG9lbml4IFYgMi4wO0FuY2llbnQgTWFndXMgU3R5bGUgMjtCbHVlIFNGO0V0ZXJuYWwgSGFydmVzdDtTcGlyaXQgQnJlYWtlciBNZWdhUGFjaztOZW9uIFNwaXJpdDtUaW1iZXJzYXcgTWVnYVBhY2s7VXJzYSBJbW1vcnRhbHMgTWVnYVBhY2s7V2l0Y2ggRG9jdG9yIE1lZ2FQYWNrO0NoaWxsIG9mIHRoZSBLZWVwZXJzIEdhemU7Um9zZSBBbmQgVGhlIEJlYXN0O0Jsb29keSBCcmlkZTtDdXJzZSBvZiB0aGUgV2ludGVyIFJvc2U7Q3VzdG9tIE1lZ2FQYWNrIFN2ZW4gVHJ1ZSBWaWdpbDtCbGF6aW5nIE9ibGl2aW9uIFYgMy4wO0ZvdWxmZWxsIENvcnJ1cHRvcjtTdGVlbCBLaW5nO1RpZGVodW50ZXIgTWVnYVBhY2s7RG9vbSBJbW1vcnRhbHMgTWVnYVBhY2s7Tnl4IEFzc2Fzc2luIE1lZ2FQYWNrIG5ldztTbGFyZGFyIE1lZ2FQYWNrIHNldDtHb2xkIFNreW1hZ2U7U3ZlbiBJbW1vcnRhbHMgTWVnYVBhY2sgVVA7VmVuZXJhdGVkIFRyaXVtdmlyYXRlOyAxMjN8fHw=