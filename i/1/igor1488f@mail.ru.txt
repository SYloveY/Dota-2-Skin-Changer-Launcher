bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkTW1VMlpEWXpaRFprTXpaaE9XWmhOLlRtcmFtLnhGQ29NN2R4eTNSaEZMZTFrZ1NhSG04bzIgMjIyfHx8IDEyMzo6IEFybXMgb2YgdGhlIEJpdHRlcndpbmcgTGVnYWN5O0JyYWNlcnMgb2YgdGhlIENhdmVybiBMdW1pbmFyO0hlYWxpbmcgRm91bnQgb2YgdGhlIExvc3QgSXNsZXM7QXJtcyBvZiBEZXNvbGF0aW9uO0hhemhhZGFsIE1hZ2VicmVha2VyO1dhdmVjdXR0ZXI7U2hhZG93IGluIHRoZSBEZWVwIEJyYWNlcnM7TWFqZXN0eSBPZiBUaGUgQ29sb3NzdXMgLSBQZWJibGU7SGVhZCBvZiB0aGUgSWNld3JhY2sgTWFyYXVkZXI7Q29uc3BpY3VvdXMgQ3VscHJpdCBBcm1vcjtTaG91bGRlcnMgb2YgdGhlIEltcGVyaWQ5519cyBDb21tYW5kO1Nob3VsZGVycyBvZiB0aGUgSWNld3JhY2sgTWFyYXVkZXI7Q3Jvd24gb2YgdGhlIE1lcmNpbGVzcztMZWdzIG9mIHRoZSBGYWxsZW4gUHJpbmNlc3M7RmVhdGhlcmVkIFdpbmdzIG9mIHRoZSBGYWxsZW4gUHJpbmNlc3M7RGltZW5zaW9uIFJpcHBlciBBcm1zO0FlZ2lzIGFuZCBSb3NoYW4gU3QuIFZhbGVudGluZSBEYXk7RW1ibGVtIG9mIHRoZSBDcnlzdGFsIEVjaGVsb24gQWdoYW5pbSBFZmZlY3Q7QmxpbmsgRGFnZ2VyIGx2bCAxIFRJLTYgRWZmZWN0O1RJLTEwIEJvdHRsZSBFZmZlY3Q7UmVwdGlsaWFuIFJlZnVnZSBSYWRpYW50IENyZWVwcztDaGlycHk7QSBEaXJlIEdhemU7SG9saWRheSBSYWRpYW50IFRvd2VyO1JlcHRpbGlhbiBSZWZ1Z2UgRGlyZSBDcmVlcHM7Um9zaGFuIEhhbGxvd2VlbiBTa2luO1dlYXRoZXIgQXNoO1B1bXBraW4gVHJlZXMgVVA7VGVycmFpbiAtIFNwcmluZztSaXZlciBWaWFsIEdyZWVuO0FsbGlhbmNlIERhc2hib2FyZDtFbGRlciBCYXJrIEhVRDtTcG9pbHMgZnJvbSB0aGUgU2hpZnRpbmcgU29yY2VyZXIgViAyLjA7VW5kZWZlYXRlZCBHZW5lcmFsO0tpdCBvZiB0aGUgRmlyc3QgSHVudCBWIDIuMTtXYXJyaW9yIG9mIEFyZW5hIFNldDtEcmFnb25zIEFzY2Vuc2lvbiBWIDMuMDtTaWdodCBvZiB0aGUgS2hhIFJlbiBGYWl0aGZ1bDtUaGUgSG9sbG93IFNldDtBaXJib3JuZSBBc3NhdWx0IENyYWZ0O1RoZSBQYXRoIG9mIE9kb2NvZWxldXM7R3VhcmRpYW4gb2YgVmFsaGFsbGE7TWFza3Mgb2YgTWlzY2hpZWY7Q3J1ZWwgUmVwcmlzYWw7Q3VubmluZyBDb3JzYWlyO1N1cmdpY2FsIFByZWNpc2lvbjtIYXJzaCBTb2pvdXJuO1JhcHR1cmVzIG9mIHRoZSBBYnlzc2FsIEtpbjtFdGVybmFsIEhhcnZlc3Q7VG94aWMgRGVhdGggRWF0ZXI7RGVlcCBTZWEgU2NvdW5kcmVsO0Zsb3dlcmluZyBTaGFkZSBWIDIuMDtTaXp6bGluZyBDaGFyZ2UgViAyLjA7QXJtYXR1cmUgb2YgdGhlIEJlbGxpZ2VyZW50IFJhbSBCbHVlO0Zlcm9jaWQ5519cyBIZWFydDtCaW5kaW5ncyBvZiB0aGUgQmF0dGxlcmFuZ2VyO1NhbXVyYWkgU2V0O0VtYmVyIFRpcHBlZCBDYXJhcGFjZSBTZXQ7R3JpbSBEZXN0aW55OyAxMjN8fHw=