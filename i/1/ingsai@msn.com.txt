bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDMyRTAyQjQtMDQ5OS0wNThELTNCMDYtREEwNzAwMDgwMDA5IDExMXx8fCAyMjI6OiAkMnkkMTAkWm1Ka056UXpPREZpWkdJMk5UWTROZVhYb3g4NU5CaUhRZ1A2eFFHUEFOLkZvRmhIZDdsTTYgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6TW9udW1lbnRzIG9mIHRoZSBOYXR1cmFsIERlbWl1cmdlO2RyaXZlX2Rpcjo6VHdpc3RlZCBNYWVsc3Ryb20gd2l0aCBXb3JsZCBDaGFzbSBBcnRpZmFjdDtkcml2ZV9kaXI6Okdlb2Rlc2ljIEVpZG9sb247ZHJpdmVfZGlyOjpCZW5ldm9sZW50IENvbXBhbmlvbiBQcmVtO2RyaXZlX2Rpcjo6VGh1bmRlciBHcmlmZmluO2RyaXZlX2Rpcjo6Q29hdCBvZiB0aGUgV2luZHdhcmQgUm9ndWU7ZHJpdmVfZGlyOjpNYXNrIG9mIHRoZSBDb25maWRhbnQ7ZHJpdmVfZGlyOjpSYXBpZXIgb2YgdGhlIFdpbmR3YXJkIFJvZ3VlO2RyaXZlX2Rpcjo6VmVuZ2VhbmNlIG9mIHRoZSBTdW53YXJyaW9yO2RyaXZlX2Rpcjo6UnVsZXIgb2YgdGhlIEZyb3N0Yml0ZSBEdW5lcztkcml2ZV9kaXI6OlRpZGVodW50ZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpTaG91bGRlcnMgb2YgdGhlIEZvcnRpZmllZCBGYWJyaWNhdG9yO2RyaXZlX2Rpcjo6QnJhd2xlciBvZiB0aGUgR2xhY2llciBTZWEgViAzLjA7ZHJpdmVfZGlyOjpWaXBlciBNZWdhUGFjaztkcml2ZV9kaXI6OkJlbGxvd3Mgb2YgQ3JlYXRpb247ZHJpdmVfZGlyOjpNYWNlIG9mIHRoZSBGaXNzdXJlZCBTb3VsO2RyaXZlX2Rpcjo6QmxhZGUgb2YgdGhlIEZyYWN0dXJlZCBPcmRlcjtkcml2ZV9kaXI6OkNvbmNvcmQgRG9taW5pb247ZHJpdmVfZGlyOjpDaGFvcyBDaG9zZW4gViAzLjA7ZHJpdmVfZGlyOjpBeGUgb2YgdGhlIFByb3Zlbjtkcml2ZV9kaXI6Ok1hbnRsZSBvZiB0aGUgVHJ1ZWJhcmsgQWRoZXJlbnQ7ZHJpdmVfZGlyOjpNb25hcmNoIG9mIHRoZSBTYXBwaGlyZSBHbGVuO2RyaXZlX2Rpcjo6U2hyb29tIFRoaW5nO2RyaXZlX2Rpcjo6SGF1bCBvZiB0aGUgTHVjZW50IENhbm9weTtkcml2ZV9kaXI6OkFyY2FuaWMgUmVzb25hbmNlIEJlYW07ZHJpdmVfZGlyOjpTdWJtZXJnZWQgSGF6YXJkIExhdW5jaGVyO2RyaXZlX2Rpcjo6U3VibWVyZ2VkIEhhemFyZCBQcm9wZWxsZXI7ZHJpdmVfZGlyOjpDb3Jwc2UgSGl2ZSBvZiBHcmltIFJlZm9ybWF0aW9uO2RyaXZlX2Rpcjo6UGFsZSBBdWd1ciBQcmVtO2RyaXZlX2Rpcjo6U2tpdHRlcmluZyBEZXNvbGF0aW9uIFByZW07ZHJpdmVfZGlyOjpDbGlua3ogTWVnYVBhY2s7ZHJpdmVfZGlyOjpSb2xsZXJtYXdzdGVyIGFuZCBNZWNoYSBCb290cyBvZiBUcmF2ZWwgTWsgSUlJO2RyaXZlX2Rpcjo6R29sZGVuIERhcmsgTWF3IEluaGliaXRvIGFuZCBHb2xkZW4gUHJvZmFuZSBVbmlvbiBhbmQgR29sZGVuIERyZWFkIFJlcXVpc2l0aW9uIExpZmVzdGVhbGVyIEltbW9ydGFscyBNZWdhcGFjaztkcml2ZV9kaXI6Okx5Y2FuIEtpc2lsZXYgTW9kTWFrZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpIZXJhbGQgb2YgdGhlIEVtYmVyIEV5ZSAtIEJydXNoO2RyaXZlX2Rpcjo6RXllcyBvZiBBcmRlbm9rO2RyaXZlX2Rpcjo6VGFpbCBvZiB0aGUgU2NvdXJpbmcgRHVuZXM7ZHJpdmVfZGlyOjpUaGUgQmFycmVuIENyb3duIFByZW07ZHJpdmVfZGlyOjpUaGUgQmFycmVuIFZlY3Rvcjtkcml2ZV9kaXI6OkNyaW1zb24gUGlxdWUgUHJlbTtkcml2ZV9kaXI6OkdvbGRlbiBQaXNjZWFuIFB1bHZlcml6ZXI7ZHJpdmVfZGlyOjpCYWNrIG9mIERpc3Rpbmd1aXNoZWQgRXhwZWRpdGlvbmFyeTtkcml2ZV9kaXI6OlR1c2tzIG9mIERpc3Rpbmd1aXNoZWQgRXhwZWRpdGlvbmFyeTtkcml2ZV9kaXI6OlRoZSBLaW5nIE9mIFRoaWV2ZXMgQmVsdDtkcml2ZV9kaXI6OkNsZWFyY3V0IENhdmFsaWVyIFdlYXBvbjtkcml2ZV9kaXI6OkNsZWFyY3V0IENhdmFsaWVyIFNob3VsZGVycztkcml2ZV9kaXI6OkNyb3duIG9mIENhbGFwaGFzIEFybW9yO2RyaXZlX2Rpcjo6VGhlIEFscGluZSBTdGFsa2VycyBTZXQ7ZHJpdmVfZGlyOjpTd2lmdCBDbGF3IGFuZCBGZXJvY2lvdXMgSGVhcnQ7ZHJpdmVfZGlyOjpEaXBwZXIgdGhlIERlc3Ryb3llcjtkcml2ZV9kaXI6OlNpZ25zIG9mIHRoZSBBbGxmYXRoZXIgLSBIZWFkO2RyaXZlX2Rpcjo6U29yY2VyZXIgb2YgdGhlIEJsYWNrIFBvb2w7ZHJpdmVfZGlyOjpHbGFyZSBvZiB0aGUgVHlyYW50O2RyaXZlX2Rpcjo6VG9tZSBvZiBGb3JiaWRkZW4gS25vd2xlZGdlO2RyaXZlX2Rpcjo6U2hlYXJpbmcgRGVwb3NpdGlvbiBQcmVtO2RyaXZlX2Rpcjo6TGljaCBJbW1vcnRhbCBIZWFkIFBlcnZlcnNpb25zIG9mIHRoZSBCbG9vZHdob3JsO2RyaXZlX2Rpcjo6U2x1bWJlcmluZyBUZXJyb3I7ZHJpdmVfZGlyOjpJbmZlcm5hbCBDaGllZnRhaW4gb2YgdGhlIENyaW1zb24gV2l0bmVzcztkcml2ZV9kaXI6OkljZXBsYWluIFJhdmFnZXIgQXJtb3I7ZHJpdmVfZGlyOjpCZWx0IG9mIENvbnRlc3RlZCBGYXRlO2RyaXZlX2Rpcjo6SWNlcGxhaW4gUmF2YWdlciBIb3JuO2RyaXZlX2Rpcjo6SWNlcGxhaW4gUmF2YWdlciBTaGllbGQ7ZHJpdmVfZGlyOjpUb3JtZW50ZWQgQ3Jvd247ZHJpdmVfZGlyOjpNYXNrIG9mIHRoZSBTYW5nc3RyYXRoIEZvbGQgUGF0aGZpbmRlcjtkcml2ZV9kaXI6OkRlc2VydCBCdXJuIFNhZGRsZTtkcml2ZV9kaXI6OkRlc2VydCBCdXJuIE91dGZpdDtkcml2ZV9kaXI6OkRlc2VydCBCdXJuIENhcDtkcml2ZV9kaXI6OkRlc2VydCBCdXJuIENyb3NzYm93O2RyaXZlX2Rpcjo6R29kKnMgTWVyY3k7ZHJpdmVfZGlyOjpLZWVwZXIgb2YgT2xveGljYW0qcyBHbGFzcyBIZWFkO2RyaXZlX2Rpcjo6S2VlcGVyIG9mIE9sb3hpY2FtKnMgR2xhc3MgUGF1bGRyb25zO2RyaXZlX2Rpcjo6S2VlcGVyIG9mIE9sb3hpY2FtKnMgR2xhc3MgQmVsdDtkcml2ZV9kaXI6Ok9yaWdpbiBvZiB0aGUgVW5tYWtpbmc7ZHJpdmVfZGlyOjpNb3JwaGxpbmcgSW1tb3J0YWxzIE1lZ2FQYWNrIFVQO2RyaXZlX2Rpcjo6UHJvbWluZW5jZTtkcml2ZV9kaXI6OkRlc2VydCBCdXJuIE1vcnR5IEltbW9ydGFsO2RyaXZlX2Rpcjo6RXllIG9mIHRoZSBXZWF0aGVyZWQgU3Rvcm0gU2lnaWw7ZHJpdmVfZGlyOjpIZWxtIG9mIHRoZSBHdWFyZGVkIFdvcmQ7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgR3VhcmRlZCBXb3JkO2RyaXZlX2Rpcjo6S25pZmUgb2YgRGlzdGluZ3Vpc2hlZCBFeHBlZGl0aW9uYXJ5O2RyaXZlX2Rpcjo6RGFya2JyZXcgRW5mb3JjZXIgYW5kIEV0ZXJuYWwgUmFkaWFuY2UgQmxhZGVzIGFuZCBNaWRhcyBLbnVja2xlcyBNZWdhUGFjaztkcml2ZV9kaXI6OklyZSBvZiB0aGUgQW5jaWVudCBHYW9sZXIgQXJtcztkcml2ZV9kaXI6Okpha2lybyBJbW1vcnRhbCBXaW5ncztkcml2ZV9kaXI6Okpha2lybyBJbW1vcnRhbHMgSGVhZHM7ZHJpdmVfZGlyOjpQaGFudG9tIENvbmNvcmQgUHJlbTtkcml2ZV9kaXI6OlRlbXBlc3QgSGVsbSBvZiB0aGUgVGh1bmRlcmdvZCArIFJpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdDtkcml2ZV9kaXI6OlRlbXBlc3QgUmV2ZWxhdGlvbjtkcml2ZV9kaXI6Okxhc2ggb2YgdGhlIExpemFyZCBLaW47ZHJpdmVfZGlyOjpOb3RobGljIEJ1cmRlbiBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO2RyaXZlX2Rpcjo6Q291bnRlbmFuY2Ugb2YgdGhlIEZvcmdvdHRlbiBSZW5lZ2FkZTtkcml2ZV9kaXI6OldpbmdzIG9mIERheWJyZWFrO2RyaXZlX2Rpcjo6Q29uY29yZCBSZXZlcnNpb24gVVA7ZHJpdmVfZGlyOjpHb2xkZW4gQ3lycmlkYWUgUHJlbTtkcml2ZV9kaXI6OkFsbHV2aW9uIFByb3BoZWN5IFYgMi4wO2RyaXZlX2Rpcjo6RnVyeSBvZiB0aGUgUmlnaHRlb3VzIFN0b3JtIC0gV2VhcG9uO2RyaXZlX2Rpcjo6VGFpbCBvZiB0aGUgVm93IEV0ZXJuYWw7ZHJpdmVfZGlyOjpNYXNrIG9mIHRoZSBWb3cgRXRlcm5hbDtkcml2ZV9kaXI6OkFybXMgb2YgdGhlIFZvdyBFdGVybmFsO2RyaXZlX2Rpcjo6RGF1Z2h0ZXJzIG9mIEh5ZHJvcGhpaW5hZSBQcmVtO2RyaXZlX2Rpcjo6Qm93IG9mIHRoZSBWb3cgRXRlcm5hbDtkcml2ZV9kaXI6OkdvbGRlbiBCcmFjZXJzIG9mIEZvcmxvcm4gUHJlY2lwaWNlO2RyaXZlX2Rpcjo6Qm9vayBvZiB0aGUgVml6aWVyIEV4aWxlIFByZW07ZHJpdmVfZGlyOjpXaXRjaCBEb2N0b3IgTWVnYVBhY2s7ZHJpdmVfZGlyOjpHaGFzdGx5IE5vY3R1cm5lO2RyaXZlX2Rpcjo6V3JhaXRoYmluZGVyO2RyaXZlX2Rpcjo6Q2FwZSBvZiB0aGUgRnJhY3R1cmVkIEVudm95O2RyaXZlX2Rpcjo6RGlhYm9saWMgQXNwZWN0O2RyaXZlX2Rpcjo6QWRvcm5tZW50cyBvZiB0aGUgQ3J5c3RhbCBQYXRoO2RyaXZlX2Rpcjo6U2FnYXMgb2YgdGhlIEN5bXVycmluIFNhZ2U7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgQ3J5c3RhbCBQYXRoO2RyaXZlX2Rpcjo6RGFya2NsYXcgRW1pc3NhcnkgRHJlc3M7ZHJpdmVfZGlyOjpTaWxlbmNlciBNZWdhUGFjaztkcml2ZV9kaXI6Ok9ncmUgTWFnaSBJbW1vcnRhbHMgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6SnVuZ2xld29ybSBTZW50aW5lbCBXYXJkO2RyaXZlX2Rpcjo6T3V0d29ybGQgRGV2b3V2ZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpCbGFkZXMgb2YgUHJpc21hdGljIEdyYWNlO2RyaXZlX2Rpcjo6VGhlIE9yZGVyIG9mIEN5cHJpbjtkcml2ZV9kaXI6OkZpcmVzdGFydGVyIEZ1ZWwgQ2FubmlzdGVyO2RyaXZlX2Rpcjo6UHJpemVkIEFjcXVpc2l0aW9ucyBIYXQ7ZHJpdmVfZGlyOjpCZWx0IG9mIHRoZSBNYW50YSBNYXJhdWRlcjtkcml2ZV9kaXI6OlNob2NrIG9mIHRoZSBBbnZpbCBQcmVtO2RyaXZlX2Rpcjo6Q3JpbXNvbiBQcm9nZW5pdG9ycyBCYW5lO2RyaXZlX2Rpcjo6R29sZGVuIExhbWIgdG8gdGhlIFNsYXVnaHRlciBQcmVtO2RyaXZlX2Rpcjo6Q3JpbXNvbiBDZW5zZXIgb2YgR2xpc3MgVVA7ZHJpdmVfZGlyOjpTcGlyaXQgb2YgQW5nZXIgViAyLjE7ZHJpdmVfZGlyOjpUYWxvbnMgb2YgdGhlIEVuZGxlc3MgU3Rvcm0gTWQ5519bnQ7ZHJpdmVfZGlyOjpDaGFvcyBGdWxjcnVtO2RyaXZlX2Rpcjo6RW50cm9waWMgU2hvdWxkZXJwYWRzIFByZW07ZHJpdmVfZGlyOjpUYWxvbnMgb2YgdGhlIEVuZGxlc3MgU3Rvcm0gV2VhcG9uO2RyaXZlX2Rpcjo6QmVhc3RtYXN0ZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpFbXBlcm9yIG9mIHRoZSBTdW47ZHJpdmVfZGlyOjpTd2luZSBvZiB0aGUgU3Vua2VuIEdhbGxleSBQcmVtO2RyaXZlX2Rpcjo6VG9ybWVudGVkIFN0YWZmO2RyaXZlX2Rpcjo6UGl0bWQ5519c2UgRnJhdGVybml0eSBCcmFjZXI7ZHJpdmVfZGlyOjpDb2xvciBNZWVwbztkcml2ZV9kaXI6OlBpdG1vdXNlIEZyYXRlcm5pdHkgR29nZ2xlcztkcml2ZV9kaXI6OlBpdG1vdXNlIEZyYXRlcm5pdHkgUGF1bGRyb247ZHJpdmVfZGlyOjpQaXRtb3VzZSBGcmF0ZXJuaXR5IFRhaWw7ZHJpdmVfZGlyOjpIZXJhbGQgb2YgdGhlIEVtYmVyIEV5ZSAtIE1hc2s7ZHJpdmVfZGlyOjpIZXJhbGQgb2YgdGhlIEVtYmVyIEV5ZSAtIEJlbHQ7ZHJpdmVfZGlyOjpIZXJhbGQgb2YgdGhlIEVtYmVyIEV5ZSAtIEFybW9yO2RyaXZlX2Rpcjo6VmlyZ2FzIEFyYztkcml2ZV9kaXI6OkdvbGRlbiBSZWN0aWZpZXI7ZHJpdmVfZGlyOjpGb3dsIFBsYWd1ZSBTZXQ7ZHJpdmVfZGlyOjpHb2xkZW4gU3VsbGVuIEhvbGxvdyBQcmVtO2RyaXZlX2Rpcjo6U3VsbGVuIEhhcnZlc3Q7ZHJpdmVfZGlyOjpIb3JuIG9mIHRoZSBTcGlyYWwgQm9yZTtkcml2ZV9kaXI6OkJlbHQgb2YgT3JuYXRlIENydWVsdHk7ZHJpdmVfZGlyOjpCcmFjZXIgb2YgdGhlIFNwaXJhbCBCb3JlO2RyaXZlX2Rpcjo6QXVzcGljZSBvZiB0aGUgV2h5cmxlZ3lnZTtkcml2ZV9kaXI6OkdvbGRlbiBBdG9taWMgUmF5IFRocnVzdGVycyBQcmVtO2RyaXZlX2Rpcjo6V3JhaXRoIEtpbmcgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6V3JhdGggb2YgRWNob2VzO2RyaXZlX2Rpcjo6THVjZW50eXIgUHJlbTtkcml2ZV9kaXI6OkJlbHQgb2YgdGhlIFNvdXRoIFN0YXI7ZHJpdmVfZGlyOjpNdWxjdGFudCBQYWxsIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7ZHJpdmVfZGlyOjpDcm93biBvZiB0aGUgSWNlYm9ybiBUcmluaXR5O2RyaXZlX2Rpcjo6Q2xhc3Agb2YgdGhlIEljZWJvcm4gVHJpbml0eTtkcml2ZV9kaXI6OkhlbG0gb2YgdGhlIERhcmsgTW9vbiBTdGFsa2VyO2RyaXZlX2Rpcjo6R29sZGVuIFR3aWxpZ2h0IFNjaGlzbTtkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBXaW5nZWQgU2VudGluZWw7ZHJpdmVfZGlyOjpHb2xkZW4gTW9vbmZhbGwgUHJlbTtkcml2ZV9kaXI6OlRpbmVzIG9mIFR5YmFyYTtkcml2ZV9kaXI6Okh1bnRlcnMgSG9hcmQ7ZHJpdmVfZGlyOjpEYXJrY2xhdyBFbWlzc2FyeSBTdGFmZjtkcml2ZV9kaXI6OkRhcmtjbGF3IEVtaXNzYXJ5IEFybXM7ZHJpdmVfZGlyOjpQYWNrIG9mIHRoZSBBcmRhbGFuIEludGVyZGljdG9yO2RyaXZlX2Rpcjo6U25pcGVyIEltbW9ydGFsIFdlYXBvbiBvZiB0aGUgQXJkYWxhbiBJbnRlcmRpY3Rvcjtkcml2ZV9kaXI6OkhlbG0gb2YgdGhlIEFyZGFsYW4gSW50ZXJkaWN0b3I7ZHJpdmVfZGlyOjpDb2xhciBvZiB0aGUgQXJkYWxhbiBJbnRlcmRpY3Rvcjtkcml2ZV9kaXI6OkJyYWNlcnMgb2YgdGhlIEFyZGFsYW4gSW50ZXJkaWN0b3I7ZHJpdmVfZGlyOjpQYXVsZHJvbnMgb2YgRXRlcm5hbCBIYXJ2ZXN0IFByZW07ZHJpdmVfZGlyOjpGb3dsIG9mIHRoZSBTdG9ybWNoYXJnZSBEcmFnb29uO2RyaXZlX2Rpcjo6TWFudGxlIG9mIHRoZSBTdG9ybWNoYXJnZSBEcmFnb29uO2RyaXZlX2Rpcjo6SGF0IG9mIHRoZSBTdG9ybWNoYXJnZSBEcmFnb29uO2RyaXZlX2Rpcjo6U2NhYmJhcmRzIG9mIHRoZSBTdG9ybWNoYXJnZSBEcmFnb29uO2RyaXZlX2Rpcjo6V3JhcHMgb2YgdGhlIFN0b3JtY2hhcmdlIERyYWdvb247ZHJpdmVfZGlyOjpHb2xkZW4gTWFudGxlIG9mIEdyaW0gRmFjYWRlO2RyaXZlX2Rpcjo6Q3Jvd24gb2YgQ2FsYXBoYXMgQmVsdDtkcml2ZV9kaXI6OkNyb3duIG9mIENhbGFwaGFzIFRhaWw7ZHJpdmVfZGlyOjpUcmVhbnQgUHJvdGVjdG9yIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6U2F2YWdlIEJlYXN0IFNoYXBlc2hpZnQ7ZHJpdmVfZGlyOjpTYXZhZ2UgQmVhc3QgU3VtbW9uIFdvbHZlcztkcml2ZV9kaXI6OkNoaWVmdGFpbiBvZiB0aGUgUHJpbWFsIFRyaWJlcyBIYXdrO2RyaXZlX2Rpcjo6Q2hpZWZ0YWluIG9mIHRoZSBQcmltYWwgVHJpYmVzIEJlYXN0O2RyaXZlX2Rpcjo6QXRyb2NpdGllcyBvZiB0aGUgQWJ5c3NhbCBTY291cmdlO2RyaXZlX2Rpcjo6Q3JpbXNvbiBFbWVyYWxkIENvbnF1ZXN0O2RyaXZlX2Rpcjo6Qm9vayBvZiB0aGUgSW5mZXJuYWwgTWF3O2RyaXZlX2Rpcjo6SG9vZCBvZiB0aGUgSW5mZXJuYWwgTWF3O2RyaXZlX2Rpcjo6QnJhY2VycyBvZiB0aGUgSW5mZXJuYWwgTWF3O2RyaXZlX2Rpcjo6R2FybWVudCBvZiB0aGUgSW5mZXJuYWwgTWF3O2RyaXZlX2Rpcjo6TGFudGVybiBvZiB0aGUgSW5mZXJuYWwgTWF3O2RyaXZlX2Rpcjo6UGF1bGRyb25zIG9mIHRoZSBJbmZlcm5hbCBNYXc7ZHJpdmVfZGlyOjpSdWJpY2sgQ3Vyc2UgLSBHb2RzIFJlYnVrZTtkcml2ZV9kaXI6OkZvcnN3b3JuIExlZ2FjeSAtIEFybW9yO2RyaXZlX2Rpcjo6Rm9yc3dvcm4gTGVnYWN5IC0gTGVncztkcml2ZV9kaXI6OlN1bGxlbiBSYW1wYXJ0O2RyaXZlX2Rpcjo6UGl0IEd1YXJkIFNldDtkcml2ZV9kaXI6OlBpdCBHdWFyZCBGYW1pbGlhcjtkcml2ZV9kaXI6OkZpbiBLaW5ncyBDaGFybSBvZiBFbWluZW50IFJldml2YWwgRXhjZXB0aW9uYWw7ZHJpdmVfZGlyOjpIZWxsLVNwYXIgQW5hdGhlbWEgT2JzaWRpYW4gQmxpZ2h0O2RyaXZlX2Rpcjo6VGhlIEhhbGxvd3MgV2l0aGluO2RyaXZlX2Rpcjo6UGFsZSBNYXVzb2xldW07ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgU2llZ2UgRW5naW5lO2RyaXZlX2Rpcjo6Q2xlYXJjdXQgQ2F2YWxpZXIgQmFjaztkcml2ZV9kaXI6OkNsZWFyY3V0IENhdmFsaWVyIEhlYWQ7ZHJpdmVfZGlyOjpUcmliYWwgUGF0aHdheXMgR29sZW07ZHJpdmVfZGlyOjpTaGF0dGVyYmxhc3QgQ29yZSBTaGF0dGVyYmxhc3QgQ3Jvd24gQXBvY2FseXBzZSBVbmJvdW5kO2RyaXZlX2Rpcjo6Q3VzdG9tIE1lZ2FQYWNrIEZhY2VsZXNzIFZvaWQgQmxhY2sgVGltZTtkcml2ZV9kaXI6OkN1c3RvbSBNZWdhcGFjayBIdXNrYXIgRmxhc2hwb2ludCBQcm9zZWx5dGUgKyBQdXJzdWl0IG9mIHRoZSBFbWJlciBEZW1vbnM7ZHJpdmVfZGlyOjpDdXN0b20gTWVnYVBhY2sgTGVnaW9uIENvbW1hbmRlciBNZXJlZGl0aCBSRTtkcml2ZV9kaXI6OkN1c3RvbSBOaWdodCBTdGFsa2VyIE1lZ2FwYWNrIEZyb3N0IFdhbGtlcjtkcml2ZV9kaXI6OkN1c3RvbSBNZWdhUGFjayBSYWluYm93IFN0YXRpY3M7ZHJpdmVfZGlyOjpDdXN0b20gTWVnYVBhY2sgU3ZlbiBUcnVlIFZpZ2lsO2RyaXZlX2Rpcjo6Q3VzdG9tIE1lZ2FQYWNrIFRlbXBsYXIgQXNzYXNzaW4gSnVuZ2xlIFNlY3JldHMgUkU7ZHJpdmVfZGlyOjpTaGVybWFuIE1haWRlbiBWIDQuMTtkcml2ZV9kaXI6OkljZSBQaG9lbml4IFByZW1pdW0gRWRpdGlvbjtkcml2ZV9kaXI6OlJlcHRpbGlhbiBSZWZ1Z2UgRGlyZSBDcmVlcHM7ZHJpdmVfZGlyOjpSZXB0aWxpYW4gUmVmdWdlIFJhZGlhbnQgQ3JlZXBzO2RyaXZlX2Rpcjo6RGVjbGFyYXRpb24gb2YgdGhlIERpdmluZSBMaWdodCBSYWRpYW50IFRvd2Vycztkcml2ZV9kaXI6OkRlY2xhcmF0aW9uIG9mIHRoZSBEaXZpbmUgU2hhZG93IERpcmUgVG93ZXJzO2RyaXZlX2Rpcjo6RnJvc3RoZWFydDtkcml2ZV9kaXI6OlRpbnkgRnJvc3Rtb290O2RyaXZlX2Rpcjo6U21hbGwgRnJvc3Rtb290O2RyaXZlX2Rpcjo6TWVkaXVtIEZyb3N0bW9vdDtkcml2ZV9kaXI6OkxhcmdlIEZyb3N0bW9vdDtkcml2ZV9kaXI6OkxpZ2h0Zm9yZ2VkIERyYWVuZWk7ZHJpdmVfZGlyOjpCYXJyYWN1ZGEgUkU7ZHJpdmVfZGlyOjpBZG9yaW5nIFdpbmdmYWxsO2RyaXZlX2Rpcjo6RmV0dGVycyBvZiBPbW5pc2NpZW5jZTtkcml2ZV9kaXI6OlBhcmFnb25zIFJlYnVrZTtkcml2ZV9kaXI6OkFybW9yIG9mIFNhY3JlZCBMaWdodDtkcml2ZV9kaXI6OkdhdW50bGV0cyBvZiBTYWNyZWQgTGlnaHQ7ZHJpdmVfZGlyOjpEYXJrIFdpbGxvdyBBbm5vdW5jZXI7ZHJpdmVfZGlyOjpEYXJrIFdpbGxvdyBNZWdhLUtpbGw7ZHJpdmVfZGlyOjpSdWJpY2sgQXJjYW5hIHdpdGggSW1tb3J0YWw7ZHJpdmVfZGlyOjpKdWRnZW1lbnQgb2YgdGhlIEZhbGxlbjtkcml2ZV9kaXI6OlBsYW5ldGZhbGw7ZHJpdmVfZGlyOjpHb2xkZW4gU3RhZmYgb2YgUGVycGxleCBQcmVtO2RyaXZlX2Rpcjo6RG9vbSBJbW1vcnRhbHMgTWVnYVBhY2s7ZHJpdmVfZGlyOjpSb3lhbCBEZWNyZWUgV2hpcCBBdHRhY2s7ZHJpdmVfZGlyOjpDcm93biBvZiB0aGUgUm95YWwgRGVjcmVlO2RyaXZlX2Rpcjo6R29sZGVuIEJsb29kZmVhdGhlciBGZWFzdDtkcml2ZV9kaXI6OlJhaW1lbnRzIG9mIHRoZSBFbWluZW5jZSBvZiBSaXN0dWw7ZHJpdmVfZGlyOjpCbG9zc29tIG9mIHRoZSBNZXJyeSBXYW5kZXJlcjtkcml2ZV9kaXI6OkNoYWxpY2Ugb2YgSXh5eGE7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgTmFyY2lzc2lzdGljIExlZWNoO2RyaXZlX2Rpcjo6R29sZGVuIEV5ZSBvZiBJeCp5eGE7ZHJpdmVfZGlyOjpCZWx0IG9mIHRoZSBOYXJjaXNzaXN0aWMgTGVlY2g7ZHJpdmVfZGlyOjpDYXBlIG9mIHRoZSBOYXJjaXNzaXN0aWMgTGVlY2g7ZHJpdmVfZGlyOjpTbGVldmVzIG9mIHRoZSBOYXJjaXNzaXN0aWMgTGVlY2g7ZHJpdmVfZGlyOjpNYXJrIG9mIHRoZSBGaXJzdCBIdW50IEhhcnZlc3RlZDtkcml2ZV9kaXI6OkhlYXJ0bGVzcyBIdW50IC0gSGVhZDtkcml2ZV9kaXI6OkhlYXJ0bGVzcyBIdW50IC0gQXJtb3I7ZHJpdmVfZGlyOjpCZWFzdCBvZiB0aGUgSXJvbiBDbGF3O2RyaXZlX2Rpcjo6UHVsc2FyIFJlbW5hbnQgUHJlbTtkcml2ZV9kaXI6OkhlbG0gb2YgRWNob2VzO2RyaXZlX2Rpcjo6Q3JpbXNvbiBNb3VybmZ1bCBSZXZlcmllO2RyaXZlX2Rpcjo6TGVncyBvZiB0aGUgRmFsbGVuIFByaW5jZXNzO2RyaXZlX2Rpcjo6TG9uZSBEcnVpZCBNZWdhUGFjaztkcml2ZV9kaXI6Ok1hdyBvZiBFenR6aG9rO2RyaXZlX2Rpcjo6VGhpcnN0IG9mIEV6dHpob2sgQnVuZGxlIFByZW07ZHJpdmVfZGlyOjpTaG91bGRlciBvZiB0aGUgQmxvb2Rmb3JnZTtkcml2ZV9kaXI6OkJlbHQgb2YgdGhlIEJsb29kZm9yZ2U7ZHJpdmVfZGlyOjpDYXBlIG9mIHRoZSBCbG9vZGZvcmdlO2RyaXZlX2Rpcjo6QnJhY2VyIG9mIHRoZSBCbG9vZGZvcmdlO2RyaXZlX2Rpcjo6SGF0IG9mIEZhbnRvY2NpbmlzIERpbGVtbWE7ZHJpdmVfZGlyOjpCcmFjZXJzIG9mIFRlY3RvbmljIEltcGxpY2F0aW9ucztkcml2ZV9kaXI6OkJlbHQgb2YgVGVjdG9uaWMgSW1wbGljYXRpb25zO2RyaXZlX2Rpcjo6SG9ybnMgb2YgdGhlIEJldHJheWVyO2RyaXZlX2Rpcjo6VHJpYmFsIFBhdGh3YXlzIFN0YWZmO2RyaXZlX2Rpcjo6SWxsaWRhbiBTdG9ybXJhZ2UgZm9yIFRlcnJvcmJsYWRlIFYgMi4wO2RyaXZlX2Rpcjo6Q3VzdG9tIE1lZ2FQYWNrIEZpZXJ5IFNwaXJpdDtkcml2ZV9kaXI6OlNreXdyYXRoIE1hZ2UgTWVnYVBhY2sgVGhhbmF0b3M7ZHJpdmVfZGlyOjpGbGlnaHQgb2YgRXBpcGhhbnk7ZHJpdmVfZGlyOjpHZWxpZCBUb3VjaCBWYWxlZXJhIGZvciBSaWtpO2RyaXZlX2Rpcjo6TW9ua2V5IEtpbmcgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6Q2xhdyBvZiBTZWFib3JuZSBSZXByaXNhbDtkcml2ZV9kaXI6OkltYWdlIG9mIFNlYWJvcm5lIFJlcHJpc2FsO2RyaXZlX2Rpcjo6UHJpemUgb2YgdGhlIFNhbHR3b3JuIE1hcmluZXI7ZHJpdmVfZGlyOjpCZWx0IG9mIFNlYWJvcm5lIFJlcHJpc2FsO2RyaXZlX2Rpcjo6RnJvc3Rtb290IEZyb3N0aXZ1cyBUcmVlO2RyaXZlX2Rpcjo6QnJld21hc3RlciBmcm9tIEhPVFM7ZHJpdmVfZGlyOjpCbHVlIFNGO2RyaXZlX2Rpcjo6V2F0ZXJsb2dnZWQgS3Vua2thIFNob2VzO2RyaXZlX2Rpcjo6TGV2aWF0aGFuIFdoYWxlIEJsYWRlIG9mIEVtaW5lbnQgUmV2aXZhbCBFeGNlcHRpb25hbDtkcml2ZV9kaXI6OlJhYmlkIFdhdGNoY29nO2RyaXZlX2Rpcjo6SG9vZHdpbmsgR2xlaXBuaXI7ZHJpdmVfZGlyOjpIb29kd2luayBEcmFnb24gQ3Jvc3Nib3c7ZHJpdmVfZGlyOjpIZWxtIG9mIHRoZSBTdW5ib3VuZCBEaXJlY3RpdmU7ZHJpdmVfZGlyOjpUaGUgSXJvbiBQaW9uZWVyIE1pc3NpbGU7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgU3VuYm91bmQgRGlyZWN0aXZlO2RyaXZlX2Rpcjo6Q2xvY2sgTWFzdGVyKnMgUG93ZXIgQ29ncztkcml2ZV9kaXI6OlNsYXJkYXIgTWVnYVBhY2sgc2V0O2RyaXZlX2Rpcjo6Tnl4IEFzc2Fzc2luIE1lZ2FQYWNrIG5ldztkcml2ZV9kaXI6OlRyYW5zdmVyc2FudCBTb3VsIG9mIHRoZSBDcmltc29uIFdpdG5lc3MgUHJlbTtkcml2ZV9kaXI6OkhpZGRlbiBWZWN0b3IgLSBBcm1vcjtkcml2ZV9kaXI6OkhpZGRlbiBWZWN0b3IgLSBCZWx0O2RyaXZlX2Rpcjo6SGlkZGVuIFZlY3RvciAtIEhhdDtkcml2ZV9kaXI6OkhpZGRlbiBWZWN0b3IgLSBCbGFkZTtkcml2ZV9kaXI6OlByaW1hbCBQZWFjZW1ha2VyO2RyaXZlX2Rpcjo6V2luZHJhbmdlciBBcmNhbmEgc3R5bGUgMSAoQmx1ZSBCaXJkKSArIEZ1bGwgV1IgaW1tb3J0YWw7ZHJpdmVfZGlyOjpHb2xkZW4gR3Jhc3BpbmcgQmx1ZGdlb24gUHJlbTtkcml2ZV9kaXI6OkdvbGRlbiBNYXNrIG9mIE1ldGlyYTtkcml2ZV9kaXI6OkhhcmJvcmJsb3Nzb207ZHJpdmVfZGlyOjpIeW1uIG9mIHRoZSBQaWQ5519cyBQbGFndWUgQXJtb3I7ZHJpdmVfZGlyOjpCYXJiYXJvdXMgQmxhZGVzIEJhY2s7ZHJpdmVfZGlyOjpCYXJiYXJvdXMgQmxhZGVzIE5lY2s7ZHJpdmVfZGlyOjpCYXJiYXJvdXMgQmxhZGVzIEFybXM7ZHJpdmVfZGlyOjpEaW1lbnNpb24gUmlwcGVyIExlZ3M7ZHJpdmVfZGlyOjpCbGFzdGZvcmdlIEV4aGFsZXIgb2YgdGhlIENyaW1zb24gV2l0bmVzcztkcml2ZV9kaXI6OkZsYWlsIG9mIHRoZSBWaW9sZW50IFByZWNpcGl0YXRlO2RyaXZlX2Rpcjo6RHJlYW1zIG9mIE1pZHN1bW1lciBRdWl2ZXI7ZHJpdmVfZGlyOjpEcmVhbXMgb2YgTWlkc3VtbWVyIFNob3VsZGVyO2RyaXZlX2Rpcjo6RHJlYW1zIG9mIE1pZHN1bW1lciBBcm1zO2RyaXZlX2Rpcjo6RHJlYW1zIG9mIE1pZHN1bW1lciBCYWNrO2RyaXZlX2Rpcjo6VHN1a3VtbyB0aGUgTW9vbiBDbG91ZDtkcml2ZV9kaXI6OkNob21wZXIgV2FyZDtkcml2ZV9kaXI6OlBheWxvYWQgb2YgdGhlIFZlc3BpZHVuIEh1bnRlci1LaWxsZXI7ZHJpdmVfZGlyOjpDb25lIG9mIHRoZSBWZXNwaWR1biBIdW50ZXItS2lsbGVyO2RyaXZlX2Rpcjo6SGVhZCBvZiB0aGUgVmVzcGlkdW4gSHVudGVyLUtpbGxlcjtkcml2ZV9kaXI6OlByb3BlbGxlcnMgb2YgdGhlIFZlc3BpZHVuIEh1bnRlci1LaWxsZXI7ZHJpdmVfZGlyOjpTb25ncyBvZiBTdGFyZmFsbCBHbGVuIC0gQXJtcztkcml2ZV9kaXI6OkZsb3VyaXNoaW5nIExvZGVzdGFyIFByZW07ZHJpdmVfZGlyOjpTaWducyBvZiB0aGUgQWxsZmF0aGVyIC0gV2VhcG9uO2RyaXZlX2Rpcjo6U2lnbnMgb2YgdGhlIEFsbGZhdGhlciAtIEFybXM7ZHJpdmVfZGlyOjpTaWducyBvZiB0aGUgQWxsZmF0aGVyIC0gTmVjaztkcml2ZV9kaXI6OkJyb29kbW90aGVyIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6VGh1bmRlcmluZyBGbGFpbCBHb2xkO2RyaXZlX2Rpcjo6VGFpbCBvZiBVbHRvcmlhO2RyaXZlX2Rpcjo6TWFudGxlIG9mIFVsdG9yaWE7ZHJpdmVfZGlyOjpIZWxtIG9mIFVsdG9yaWE7ZHJpdmVfZGlyOjpCZWx0IG9mIFVsdG9yaWE7ZHJpdmVfZGlyOjpCcmFjZSBvZiBVbHRvcmlhO2RyaXZlX2Rpcjo6TWVycnkgV2FuZGVyZXIqcyBCcnVzaCBQcmVtO2RyaXZlX2Rpcjo6Q3Jvd24gb2YgdGhlIEFnZWxlc3MgRmFlO2RyaXZlX2Rpcjo6REsgUGVyc29uYSBEYXZpb247ZHJpdmVfZGlyOjpTY29yY2hlZCBBbWJlciBTd29yZDtkcml2ZV9kaXI6OlN0b3JtIFNwaXJpdCBNZWdhUGFjaztkcml2ZV9kaXI6OlRoZSBMaWdodG5pbmcgT3JjaGlkIG9mIEVtaW5lbnQgUmV2aXZhbCBFeGNlcHRpb25hbDtkcml2ZV9kaXI6OkdvbGRlbiBGbG9vZG1hc2s7ZHJpdmVfZGlyOjpQaGFudG9tIEFzY2Vuc2lvbjtkcml2ZV9kaXI6OlNvdWwgRGlmZnVzZXIgUHJlbTtkcml2ZV9kaXI6OlBoYW50b20gQXNjZW5zaW9uIEJlbHQ7ZHJpdmVfZGlyOjpDcmltc29uIEdhdGVzIG9mIE5vdGhsO2RyaXZlX2Rpcjo6RHJlc3Mgb2YgdGhlIE1lcnF1ZWVuO2RyaXZlX2Rpcjo6Q3Jvd24gb2YgdGhlIE1lcnF1ZWVuO2RyaXZlX2Rpcjo6U2xlZXZlcyBvZiB0aGUgTWVycXVlZW47ZHJpdmVfZGlyOjpDb3ZlcnMgb2YgdGhlIE1lcnF1ZWVuO2RyaXZlX2Rpcjo6R2hvc3RzIG9mIEV0ZXJuYWwgVGVzdGFtZW50O2RyaXZlX2Rpcjo6QWxsdXJlIG9mIE1pcmFjbGUgRnJ1aXQ7ZHJpdmVfZGlyOjpDcmltc29uIEhlYXJ0cyBvZiBNaXNydWxlO2RyaXZlX2Rpcjo6VGhlIFN1bmJyZWV6ZSBCaXJ0aHJpZ2h0O2RyaXZlX2Rpcjo6QW1hdGVyYXN1O2RyaXZlX2Rpcjo6Q3VsdCBvZiBBa3Rvaztkcml2ZV9kaXI6OldpbmdzIG9mIHRoZSBGYXRhbCBCbG9vbTtkcml2ZV9kaXI6OlRhaWwgb2YgdGhlIEZlcm9jaWQ5519cyBUb3hpY2FudDtkcml2ZV9kaXI6OlNwaXR0ZXJzIG9mIHRoZSBWaXJ1bGVudCBLcmFpdDtkcml2ZV9kaXI6OkVtYmxlbSBvZiBEaXZpbml0eSBBZ2hhbmltIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTEwIEFnaGFuaW0gRWZmZWN0O2RyaXZlX2Rpcjo6VEktMTAgQmxpbmsgbHZsIDIgRWZmZWN0O2RyaXZlX2Rpcjo6VEktMTAgQm90dGxlIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTEwIEV1bCBTY2VwdGVyIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTEwIEZvdW50YWluIGx2bCAzIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTEwIExldmVsIFVwIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTEwIE1la2FzbSBFZmZlY3Q7ZHJpdmVfZGlyOjpUSS0xMCBNam9sbG5pciBFZmZlY3Q7ZHJpdmVfZGlyOjpUSS0xMCBQaGFzZSBCb290cyBFZmZlY3Q7ZHJpdmVfZGlyOjpUSS0xMCBSYWRpYW5jZSBFZmZlY3Q7ZHJpdmVfZGlyOjpUSS0xMCBTaGl2YXMgRWZmZWN0O2RyaXZlX2Rpcjo6VEktMTAgVGVsZXBvcnQgbHZsIDMgRWZmZWN0O2RyaXZlX2Rpcjo6VEktMTAgVGVsZXBvcnQgbHZsIDIgRWZmZWN0O2RyaXZlX2Rpcjo6VGVycmFpbiAtIFNhbmN0dW1zIG9mIHRoZSBEaXZpbmU7ZHJpdmVfZGlyOjpUaGUgSW50ZXJuYXRpb25hbCAyMDE4IEN1cnNvciBQYWNrO2RyaXZlX2Rpcjo6RGVtb25pYyBFc3NlbmNlIEhVRDtkcml2ZV9kaXI6OkJsb29keSBCYWJ5IEludm9rZXI7ZHJpdmVfZGlyOjpbQWJhZGRvbl0gVW5kZWFkIERlYXRoIEtuaWdodCB2MS4xO2RyaXZlX2Rpcjo6V2FyZGVuIGZvciBQaGFudG9tIEFzc2Fzc2luICsgV0MgMyBTb3VuZCBWIDIuMDtkcml2ZV9kaXI6OkdvbGRlbiBBcm1zIG9mIERlc29sYXRpb24gUHJlbTtkcml2ZV9kaXI6OkN1c3RvbSBNZWdhUGFjayBHb2xkIFB5cm9tYW5jZXIgUkU7ZHJpdmVfZGlyOjpadWxqaW4gZm9yIFRyb2xsIFdhcmxvcmQ7ZHJpdmVfZGlyOjpDdXN0b20gTWVnYVBhY2sgRHJvdyBSYW5nZXIgU3lsdmFuYXMgTGl2ZSAoVmlvbGV0KTtkcml2ZV9kaXI6OkVuaWdtYXRpYyBFbWJsZW0gb2YgdGhlIERpcmV0aWRlIC0gWWVsbG93O2RyaXZlX2Rpcjo6SG9ybnMgb2YgRXRlcm5hbCBIYXJ2ZXN0IFByZW07ZHJpdmVfZGlyOjpGb3J0dW5lcyBUb3V0IFByZW07ZHJpdmVfZGlyOjpBeGUgZnVsbCBJbW1vcnRhbHMgTWVnYXBhY2s7ZHJpdmVfZGlyOjpCbGFkZWZvcm0gTGVnYWN5IFByb3ZvY2F0aW9uIG9mIFJ1aW47ZHJpdmVfZGlyOjpQdWRnZSBUSTEwIENvbGxlY3RvcnMgQ2FjaGUgTWVnYVBhY2s7ZHJpdmVfZGlyOjpJY2UgTGluYSBQcmVtaXVtO2RyaXZlX2Rpcjo6U2ZTIERlbW9uIEh1bnRlciBGb3IgQW50aW1hZ2U7IDEyM3x8fA==