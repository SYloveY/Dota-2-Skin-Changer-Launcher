bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRDM5RDBDRTAtODQ0QS0xMUVBLTgwREMtMDAyQjY3MzVDOTJCIDExMXx8fCAyMjI6OiAkMnkkMTAkTkdJNU1qazFaRFV3WlRrNU5XVm1PT3Z4Z0lLMUpMeTBYemVyZDFRVVJ6WFJncHhBbVVOci4gMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6QWNvbHl0ZSBvZiBWZW5nZWFuY2UgViAyLjA7ZHJpdmVfZGlyOjpMb3N0IFJhbmdlcjtkcml2ZV9kaXI6OlNoZXJtYW4gTWFpZGVuIFYgNC4xO2RyaXZlX2Rpcjo6Qml0dGVyd2luZyBMZWdhY3k7ZHJpdmVfZGlyOjpBbGdpZCBGYWxjb24gViAzLjE7ZHJpdmVfZGlyOjpDaGxvZSB2b24gRWluemJlcm4gZm9yIEVhcnRoIFNwaXJpdCBieSBQYXRjaG91bGkgS25vd2xlZGdlO2RyaXZlX2Rpcjo6VGhlIFNoZWVwIFNldDtkcml2ZV9kaXI6OkF6dXJlIENvbnN0ZWxsYXRpb24gViAyLjE7ZHJpdmVfZGlyOjpXcmF0aCBvZiBLYSBWIDIuMTtkcml2ZV9kaXI6OlRvbGwgb2YgdGhlIEZlYXJmdWwgQXJpYTtkcml2ZV9kaXI6OkpvbGx5IFJlYXZlcjtkcml2ZV9kaXI6Ok1hY2Ugb2YgVmluY2VyZSBBdGFjayBFZmZlY3Q7ZHJpdmVfZGlyOjpEb3RhQ2luZW1hIC0gUXVlZW4gb2YgUGFpbiBTcGVsbHM7ZHJpdmVfZGlyOjpIYXpoYWRhbCBNYWdlYnJlYWtlcjtkcml2ZV9kaXI6Okl0c3VrYSBLb3RvcmkgZm9yIFdLIGJ5IFBhdGNob3VsaSBLbm93bGVkZ2U7ZHJpdmVfZGlyOjpBdmFkYSBLZWRhdnJhO2RyaXZlX2Rpcjo6TnlhcnVrbyBmb3IgTGlvbiBieSBQYXRjaG91bGkgS25vd2xlZGdlO2RyaXZlX2Rpcjo6UGhhbnRvbSBBZHZlbnQgQmVsdCBVUDtkcml2ZV9kaXI6OlBoYW50b20gQWR2ZW50IFVQO2RyaXZlX2Rpcjo6UGhhbnRvbSBBZHZlbnQgU2hvdWxkZXJzIFVQO2RyaXZlX2Rpcjo6UGhhbnRvbSBBZHZlbnQgV2VhcG9uIFVQO2RyaXZlX2Rpcjo6QXJyYXkgb2YgVHJhbnF1aWxpdHk7ZHJpdmVfZGlyOjpNaXNnaXZpbmdzIG9mIHRoZSBFbWVyYWxkIEFnZTtkcml2ZV9kaXI6OlRhbGVzIG9mIHRoZSBHcmV5IFdhc3Rlcztkcml2ZV9kaXI6OkF1c3BpY2Ugb2YgdGhlIFdoeXJsZWd5Z2UgUHJlbTtkcml2ZV9kaXI6OlZlbmdlYW5jZSBvZiB0aGUgU3Vud2Fycmlvcjtkcml2ZV9kaXI6OlN0ZWVsIEtpbmc7ZHJpdmVfZGlyOjpMaWdodGJyaW5nZXIgU0Y7ZHJpdmVfZGlyOjpCbG9zc29taW5nIEhhcm1vbnkgViAyLjA7ZHJpdmVfZGlyOjpUaW55IE1peCBWIDQuMDtkcml2ZV9kaXI6OkNvbmNlYWxlZCBSYXZlbjtkcml2ZV9kaXI6OkRhcmsgUmVlZiBFc2NhcGUgViAyLjE7ZHJpdmVfZGlyOjpTYXZhZ2UgTWV0dGxlO2RyaXZlX2Rpcjo6TW9yYmlmaWMgUHJvdmlzaW9uO2RyaXZlX2Rpcjo6TW9uc3Ryb3VzIFJlcHJpc2FsO2RyaXZlX2Rpcjo6QXVzcGljaWQ5519cyBTZWFkd2VsbGVyO2RyaXZlX2Rpcjo6QWxsZmF0aGVyIG9mIE5hdHVyZSBTZXQ7ZHJpdmVfZGlyOjpIYXZvYyBvZiBEcmFnb24gUGFsYWNlIFYgMi4wO2RyaXZlX2Rpcjo6T3Zlcmdyb3duIEVtYmxlbSBBZ2hhbmltIEVmZmVjdDtkcml2ZV9kaXI6OkJhdHRsZSBQYXNzIEVmZmVjdCBCbGluayBEYWdnZXI7ZHJpdmVfZGlyOjpUSS05IEJsaW5rIGx2bCAyIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTggQm90dGxlIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTkgU2Vhc29uYWwgQ3JlZXAgRGVueSBFZmZlY3Q7ZHJpdmVfZGlyOjpHdWFyZGlhbnMgb2YgdGhlIExvc3QgUGF0aCBSYWRpYW50IFRvd2Vycztkcml2ZV9kaXI6OkZhbGwgQmF0dGxlIFBhc3MgMjAxNiBFZmZlY3QgVGVsZXBvcnQ7ZHJpdmVfZGlyOjpSYWRpYW5jZSBUSS02IEVmZmVjdDtkcml2ZV9kaXI6OlBoYXNlIEJvb3RzIFRJLTYgRWZmZWN0O2RyaXZlX2Rpcjo6TWpvbGxuaXIgVEktNiBFZmZlY3Q7ZHJpdmVfZGlyOjpCYXR0bGUgUGFzcyBFZmZlY3QgRm91bnRhaW4gUmVnZW47ZHJpdmVfZGlyOjpCcmlnaHRza3llIFJlZnJlc2hlciBPcmI7ZHJpdmVfZGlyOjpEQUMgMjAxNSBDaGFvcyBLbmlnaHQgQ3Vyc29yIFBhY2s7ZHJpdmVfZGlyOjpDaHJvbXkgdGhlIENlbnRpcGVkZSBXYXJkO2RyaXZlX2Rpcjo6Q2F2ZXJuaXRlIERpcmUgQ3JlZXBzO2RyaXZlX2Rpcjo6RW1lcmFsZCBSb3NoYW47ZHJpdmVfZGlyOjpUZXJyYWluIC0gVGhlIEtpbmdzIE5ldyBKb3VybmV5O2RyaXZlX2Rpcjo6Uml2ZXIgVmlhbCBCbHVlO2RyaXZlX2Rpcjo6VGhlIEludGVybmF0aW9uYWwgMjAxOSBNdXNpYyBQYWNrO2RyaXZlX2Rpcjo6V2VhdGhlciBTaXJvY2NvO2RyaXZlX2Rpcjo6QXp1cmUgQ29uc3RlbGxhdGlvbiBIVUQ7ZHJpdmVfZGlyOjpDdXN0b20gRGFzaGJvYXJkIDEyNjtkcml2ZV9kaXI6OlN1c2FubyBPcyBEZXNjZW5kYW50O2RyaXZlX2Rpcjo6TGluYSBBbm5vdW5jZXI7ZHJpdmVfZGlyOjpMaW5hIE1lZ2EtS2lsbHM7ZHJpdmVfZGlyOjpEYXRhc3RhciBQcm9nZW5pdG9yIChBbHRlciBBcmNhbmEpO2RyaXZlX2Rpcjo6RGFlbW9uZmVsbCBGbGFtZTtkcml2ZV9kaXI6OkZhdGUgTWVyaWRpYW47ZHJpdmVfZGlyOjpUZW5ndSBHdWFyZGlhbiBTZXQ7ZHJpdmVfZGlyOjpIZWF2ZW5seSBTd29yZCBEb29tIFYgMy4wO2RyaXZlX2Rpcjo6Qm91bnR5IEh1bnRlciBNYW5pYWMgU2V0O2RyaXZlX2Rpcjo6R3J5cGhvbiBSaWRlciBTZXQ7ZHJpdmVfZGlyOjpEZWxpZ2h0cyBvZiBQZXRhbHVuYSBQYXRoZmluZGVyO2RyaXZlX2Rpcjo6QW5jaWVudCBNZWNoYW5pc207ZHJpdmVfZGlyOjpNYXJrIG9mIHRoZSBNaXN0cmFsIEZpZW5kIFYgMi4xO2RyaXZlX2Rpcjo6QmlnIFVuIFYgMy4wO2RyaXZlX2Rpcjo6T3Zlcmdyb3duO2RyaXZlX2Rpcjo6Q3J1Y2libGUgb2YgUmlsZTtkcml2ZV9kaXI6OlN0cnlnd3lyIEJsb29kc2Vla2VyO2RyaXZlX2Rpcjo6UGF0dGVybiBvZiB0aGUgU2lsa2VuIFF1ZWVuO2RyaXZlX2Rpcjo6SWNlcGxhaW4gUmF2YWdlcjtkcml2ZV9kaXI6OlNhY2NoYXJpbmUgU2Fib3RldXI7ZHJpdmVfZGlyOjpGYXRhbCBCbG9zc29tIFYgMy4wO2RyaXZlX2Rpcjo6TGlnaHRuaW5nIEhhcmJpbmdlcjtkcml2ZV9kaXI6OkZpcmVzIG9mIHRoZSBWb2xjYW5pYyBHdWFyZDtkcml2ZV9kaXI6OkRpdmluZSBBbmNob3IgU3R5bGUgMTtkcml2ZV9kaXI6OkJlc3Rvd21lbnRzIG9mIHRoZSBEaXZpbmUgQW5jaG9yIGVmZmVjdHM7ZHJpdmVfZGlyOjpBc2NlbmRhbmNlIG9mIHRoZSBSaW1lIExvcmQgMXN0IFN0eWxlO2RyaXZlX2Rpcjo6RXllIG9mIHRoZSBCZWhvbGRlcjtkcml2ZV9kaXI6OkRhcmtmYWxsIFdhcmRlbjtkcml2ZV9kaXI6OkJsYWRlIG9mIFRlYXJzIGFuZCBDcm93biBvZiBUZWFycztkcml2ZV9kaXI6OlZvb2RvbyBNZWVwbztkcml2ZV9kaXI6OkZ1cnkgb2YgV2FyIEdvZDtkcml2ZV9kaXI6OlByaXNtYXRpYyBHcmFjZTtkcml2ZV9kaXI6OlJlbWlsaWEgU2NhcmxldCBmb3IgTlMgYnkgUGF0Y2hvdWxpIEtub3dsZWRnZTtkcml2ZV9kaXI6OkNvYXQgb2YgdGhlIFdpbmR3YXJkIFJvZ3VlO2RyaXZlX2Rpcjo6TWFzayBvZiB0aGUgQ29uZmlkYW50O2RyaXZlX2Rpcjo6UmFwaWVyIG9mIHRoZSBXaW5kd2FyZCBSb2d1ZTtkcml2ZV9kaXI6OklyZSBvZiBNb2x0ZW4gUmViaXJ0aDtkcml2ZV9kaXI6Ok5vdmEgb2YgR29sZGVuIE5pcnZhbmE7ZHJpdmVfZGlyOjpBbmNpZW50IE1hZ3VzIFN0eWxlIDI7ZHJpdmVfZGlyOjpSdWJpY2sgQ3Vyc2UgLSBEZWF0aCBXYXJkO2RyaXZlX2Rpcjo6UnViaWNrIEN1cnNlIC0gRGVtb25pYyBQdXJnZTtkcml2ZV9kaXI6OlJ1YmljayBDdXJzZSAtIEV4b2NpcnNtO2RyaXZlX2Rpcjo6UnViaWNrIEN1cnNlIC0gRmFtaWxpYXI7ZHJpdmVfZGlyOjpSdWJpY2sgQ3Vyc2UgLSBGbGVzaCBHb2xlbTtkcml2ZV9kaXI6OlJ1YmljayBDdXJzZSAtIEZyZWV6aW5nIEZpZWxkO2RyaXZlX2Rpcjo6UnViaWNrIEN1cnNlIC0gSmV4O2RyaXZlX2Rpcjo6UnViaWNrIEN1cnNlIC0gTWFnbmV0aXplO2RyaXZlX2Rpcjo6UnViaWNrIEN1cnNlIC0gTWFzcyBTZXJwZW50IFdhcmQ7ZHJpdmVfZGlyOjpSdWJpY2sgQ3Vyc2UgLSBQb3dlciBDb2c7ZHJpdmVfZGlyOjpSdWJpY2sgQ3Vyc2UgLSBSZW1vdGUgTWluZTtkcml2ZV9kaXI6OlJ1YmljayBDdXJzZSAtIFNoYXBlc2hpZnQ7ZHJpdmVfZGlyOjpSdWJpY2sgQ3Vyc2UgLSBTcGlyaXQgQmVhcjtkcml2ZV9kaXI6OkZvdWxmZWxsIENvcnJ1cHRvcjtkcml2ZV9kaXI6OlN1Ym1lcmdlZCBIYXphcmQ7ZHJpdmVfZGlyOjpGb2xpYWdlIG9mIEVsZHJpdGNoIEduYXJsO2RyaXZlX2Rpcjo6QnJhd2xlciBvZiB0aGUgR2xhY2llciBTZWEgViAzLjA7ZHJpdmVfZGlyOjpXaW5ncyBvZiBDb2xvcmZ1bCBJY2VjcnlzdGFscztkcml2ZV9kaXI6OkRyZWFkIENvbXBhY3QgU3R5bGUgMjtkcml2ZV9kaXI6OkNoaWxsIG9mIHRoZSBLZWVwZXJzIEdhemU7ZHJpdmVfZGlyOjpGZXJvY2lvdXMgVG94aWNhbnQ7ZHJpdmVfZGlyOjpSb3NoYW4gSHVudGVycyBTZXQ7ZHJpdmVfZGlyOjpBYnlzc2FsIEN1aXJhc3M7ZHJpdmVfZGlyOjpHb2xkZW4gRmxvb2RtYXNrIGVmZmVjdDtkcml2ZV9kaXI6OlRyZWsgb2YgdGhlIFRyYWlsYmxhemVyO2RyaXZlX2Rpcjo6TWFnaXN0ZXIgb2YgdGhlIE5hcnJvdyBGYXRlcztkcml2ZV9kaXI6OkRlbW9uaWMgUHVnbmEgViAzLjA7ZHJpdmVfZGlyOjpSZW1pbmlzY2VuY2Ugb2YgRHJlYW1zO2RyaXZlX2Rpcjo6QXJtb3Igb2YgdGhlIFN0YWx3YXJ0IFNvdWw7ZHJpdmVfZGlyOjpDdXJzZWQgWmVhbG90O2RyaXZlX2Rpcjo6Q3Vyc2Ugb2YgdGhlIE5ldyBTZWFzb24gViAyLjE7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgU2FuZ3VpbmUgTW9vbiBTZXQ7ZHJpdmVfZGlyOjpXYXItQnVycm93IFJhdmFnZXI7ZHJpdmVfZGlyOjpMb3JkIG9mIENocm9ub3B0aWMgU3ludGhlc2lzO2RyaXZlX2Rpcjo6Qmxvb2R5IFJpcHBlcjtkcml2ZV9kaXI6OkV4cGxvc2l2ZSBNYW5pYWM7ZHJpdmVfZGlyOjpBbGxpZWQgQ29tbWFuZGVyIFNldDtkcml2ZV9kaXI6Okhhcm5lc3Mgb2YgdGhlIEZpc3N1cmVkIFNvdWw7ZHJpdmVfZGlyOjpTYW5ndWluZSBSb3lhbHR5O2RyaXZlX2Rpcjo6Qmxvb2RmZWF0aGVyIFdpbmdzIFByZW07ZHJpdmVfZGlyOjpCaW5kaW5ncyBvZiBEZWVwIE1hZ21hO2RyaXZlX2Rpcjo6VmFudGFnZSBvZiB0aGUgQnJlYWNoIFdhcmRlbjtkcml2ZV9kaXI6OkJsZXNzaW5nIG9mIHRoZSBDcmVzdGVkIFVtYnJhO2RyaXZlX2Rpcjo6S2VlbiBNYWNoaW5lO2RyaXZlX2Rpcjo6RHJhZ29uIExvcmUgQVdQO2RyaXZlX2Rpcjo6UGx1bmRlciBvZiB0aGUgU2F2YWdlIE1vbmdlcjtkcml2ZV9kaXI6Ok1hbGVmaWMgRHJha2VzIEhvb2Qgb2YgdGhlIENyaW1zb24gV2l0bmVzcztkcml2ZV9kaXI6OlBsYXRpbmcgb2YgdGhlIE5ldGhlcnN3YXJtIFZhbmd1YXJkO2RyaXZlX2Rpcjo6TWFsZWZpYyBEcmFrZXMgU3RyaWtlIG9ubHkgRWZmZWN0O2RyaXZlX2Rpcjo6QXJjdGljIENsaW5reiBWIDMuMDtkcml2ZV9kaXI6OkZsb3dlciBGbGFtZSBMaW5hIFYgMy4wO2RyaXZlX2Rpcjo6Q3JpbXNvbiBDeXJyaWRhZTtkcml2ZV9kaXI6OlRoZSBEdXNrIENyYXdsZXIgU2V0O2RyaXZlX2Rpcjo6UmVsaWNzIG9mIHRoZSBMb3N0IFZpZ2lsIFBhdGhmaW5kZXI7ZHJpdmVfZGlyOjpFbXBlcm9yIE9mIFRoZSBDbGVyZ3k7IDEyM3x8fA==