bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRDM5RDBDRTAtODQ0QS0xMUVBLTgwREMtMDAyQjY3MzVDOTJCIDExMXx8fCAyMjI6OiAkMnkkMTAkTkdJNU1qazFaRFV3WlRrNU5XVm1PT3Z4Z0lLMUpMeTBYemVyZDFRVVJ6WFJncHhBbVVOci4gMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6QmxhemluZyBDb3Ntb3M7ZHJpdmVfZGlyOjpEaXZpbmUgRmxhbWUgViAyLjA7ZHJpdmVfZGlyOjpFdmVybGFzdGluZyBIZWF0IFYgMi4wO2RyaXZlX2Rpcjo6RHJhZ29uZmlyZSBWIDIuMDtkcml2ZV9kaXI6OkluZmVybmFsIFdpbmdzIENsYXc7ZHJpdmVfZGlyOjpJbmZlcm5hbCBXaW5ncztkcml2ZV9kaXI6OlNjZXB0ZXIgb2YgQ29ycnVwdGVkIEFtYmVyO2RyaXZlX2Rpcjo6TWFudGxlIG9mIEhlbGwqcyBBbWJhc3NhZG9yO2RyaXZlX2Rpcjo6QWRvcm5tZW50cyBvZiB0aGUgV2l0Y2ggU3VwcmVtZTtkcml2ZV9kaXI6OkVwYXVsZXRzIG9mIEhlbGwqcyBBbWJhc3NhZG9yO2RyaXZlX2Rpcjo6Rmxvd2VyaW5nIFNoYWRlIFYgMi4wO2RyaXZlX2Rpcjo6RW5kdXJpbmcgU29saXR1ZGU7ZHJpdmVfZGlyOjpGbG93aW5nIEVudHJvcHkgViAyLjA7ZHJpdmVfZGlyOjpTZW50aW5lbHMgU2hlbGw7ZHJpdmVfZGlyOjpCZXdpdGNoaW5nIEZsYXJlIFYgMi4wO2RyaXZlX2Rpcjo6SWNlIExpbmEgMm5kIFN0eWxlO2RyaXZlX2Rpcjo6UmVnaW1lIG9mIHRoZSBFbnRoYWxlZW4gRHJhZ29uIFJlZCBTdHlsZTtkcml2ZV9kaXI6Ok55YXJ1a28gZm9yIExpb24gYnkgUGF0Y2hvdWxpIEtub3dsZWRnZTtkcml2ZV9kaXI6OkF6dXJlIENvbnN0ZWxsYXRpb24gViAyLjE7ZHJpdmVfZGlyOjpEYXJrIE1vb24gU3RhbGtlciBWIDIuMTtkcml2ZV9kaXI6OlJveWFsIFdpbnRlcmJsb29tO2RyaXZlX2Rpcjo6U2hlcm1hbiBNYWlkZW4gViA0LjE7ZHJpdmVfZGlyOjpCbHVlaGVhcnQgU292ZXJlaWduIFYgMi4wO2RyaXZlX2Rpcjo6U2hhdHRlcmJsYXN0IENyb3duO2RyaXZlX2Rpcjo6QXJtb3Igb2YgdGhlIEVxdWlsaWJyaXVtO2RyaXZlX2Rpcjo6R2FyYiBvZiB0aGUgUHJvcGhldCBGb3JldG9sZDtkcml2ZV9kaXI6OlRhaWwgb2YgdGhlIEVxdWlsaWJyaXVtO2RyaXZlX2Rpcjo6QW5jaWVudCBBcHBhcml0aW9uIENoaW5hIE1vZGVsO2RyaXZlX2Rpcjo6Q3ljbG9wZWFuIE1hcmF1ZGVyO2RyaXZlX2Rpcjo6QXJtYXR1cmUgb2YgdGhlIEJlbGxpZ2VyZW50IFJhbSBSZWQ7ZHJpdmVfZGlyOjpMb3N0IFJhbmdlcjtkcml2ZV9kaXI6OlBpc3RvbiBJbXBhbGVyO2RyaXZlX2Rpcjo6Qmxvb2Ryb290IEd1YXJkO2RyaXZlX2Rpcjo6VGhlIEdhemUgb2YgWmVidWxvbjtkcml2ZV9kaXI6OlRvbGwgb2YgdGhlIEZlYXJmdWwgQXJpYTtkcml2ZV9kaXI6OldyaXQgb2YgdGhlIFJveWFsIEJ1dGNoZXI7ZHJpdmVfZGlyOjpBcm1zIG9mIHRoZSBCb2dhdHlyO2RyaXZlX2Rpcjo6Sm9sbHkgUmVhdmVyO2RyaXZlX2Rpcjo6U291bCBMaWxpdGg7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBCZWx0IFVQO2RyaXZlX2Rpcjo6UGhhbnRvbSBBZHZlbnQgVVA7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBTaG91bGRlcnMgVVA7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBXZWFwb24gVVA7ZHJpdmVfZGlyOjpTcGFjZSBTcGVjdHJlIFYzLjA7ZHJpdmVfZGlyOjpUZW1wZXN0IEhlbG0gb2YgdGhlIFRodW5kZXJnb2QgUHJlbTtkcml2ZV9kaXI6OlJpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6UmVnYWxpYSBvZiB0aGUgV3JhaXRoIExvcmQgU2V0O2RyaXZlX2Rpcjo6SXRzdWthIEtvdG9yaSBmb3IgV0sgYnkgUGF0Y2hvdWxpIEtub3dsZWRnZTtkcml2ZV9kaXI6OkdyaW0gRGVzdGlueTtkcml2ZV9kaXI6OkJpbmRpbmdzIG9mIHRoZSBCYXR0bGVyYW5nZXIgTGlnaHQgU3R5bGU7ZHJpdmVfZGlyOjpQaXhlbCBXaW5kcnVubmVyO2RyaXZlX2Rpcjo6QXJyYXkgb2YgVHJhbnF1aWxpdHk7ZHJpdmVfZGlyOjpIdXNoIG9mIEV0ZXJuYWwgTmlnaHQ7ZHJpdmVfZGlyOjpIYXpoYWRhbCBNYWdlYnJlYWtlcjtkcml2ZV9kaXI6OlNpbGVudCBFZGljdDtkcml2ZV9kaXI6OkJvbmRzIG9mIFZpbmNlcmUgU2V0O2RyaXZlX2Rpcjo6RG90YUNpbmVtYSAtIFF1ZWVuIG9mIFBhaW4gU3BlbGxzO2RyaXZlX2Rpcjo6Qmxvb2RmZWF0aGVyIFdpbmdzIFByZW07ZHJpdmVfZGlyOjpTYW5ndWluZSBSb3lhbHR5O2RyaXZlX2Rpcjo6Q291bnRlc3Mgb2YgUmlzdHVsO2RyaXZlX2Rpcjo6V3JhdGggb2YgS2EgViAyLjE7ZHJpdmVfZGlyOjpXcmF0aCBvZiBLYSBWIDIuMSBTdHlsZSAyO2RyaXZlX2Rpcjo6QXBvc3RsZSBvZiBEZWNheSBWIDIuMTtkcml2ZV9kaXI6OkxpY2ggTWFzdGVyIE5lY3JvbWFuY2VyIFYgMi4xO2RyaXZlX2Rpcjo6QWxnaWQgRmFsY29uO2RyaXZlX2Rpcjo6R3Vpc2Ugb2YgdGhlIFdpbmdlZCBCb2x0O2RyaXZlX2Rpcjo6QWxnaWQgRmFsY29uIFYgMy4xO2RyaXZlX2Rpcjo6RGVhdGggQmxvc3NvbSBTZXQ7ZHJpdmVfZGlyOjpUaGUgSmFkZSBHZW5lcmFsO2RyaXZlX2Rpcjo6Q2hsb2Ugdm9uIEVpbnpiZXJuIGZvciBFYXJ0aCBTcGlyaXQgYnkgUGF0Y2hvdWxpIEtub3dsZWRnZTtkcml2ZV9kaXI6OkJlZHJvY2sgU2VyZW5pdHkgViAzLjE7ZHJpdmVfZGlyOjpSdXN0aWMgRmluZXJ5IFYgMi4wO2RyaXZlX2Rpcjo6Rmlyc3QgTmlnaHQgb2YgdGhlIFN1bW1lciBDaGlsZDtkcml2ZV9kaXI6OlRoZSBTaGVlcCBTZXQ7ZHJpdmVfZGlyOjpIZWFkbGFuZCBIdW50cmVzcztkcml2ZV9kaXI6OkdvZGRlc3Mgb2YgdGhlIFVuZGVyd29ybGQ7ZHJpdmVfZGlyOjpBdmFkYSBLZWRhdnJhOyAxMjN8fHw=