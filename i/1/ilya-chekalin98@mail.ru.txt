limitHWID:: 1 000||| 111:: D39D0CE0-844A-11EA-80DC-002B6735C92B 111||| 222:: $2y$10$NGI5Mjk1ZDUwZTk5NWVmOOvxgIK1JLy0Xzerd1QURzXRgpxAmUNr. 222||| 123:: drive_dir::Acolyte of Vengeance V 2.0;drive_dir::Lost Ranger;drive_dir::Sherman Maiden V 4.1;drive_dir::Bitterwing Legacy;drive_dir::Algid Falcon V 3.1;drive_dir::Chloe von Einzbern for Earth Spirit by Patchouli Knowledge;drive_dir::The Sheep Set;drive_dir::Azure Constellation V 2.1;drive_dir::Wrath of Ka V 2.1;drive_dir::Toll of the Fearful Aria;drive_dir::Jolly Reaver;drive_dir::Mace of Vincere Atack Effect;drive_dir::DotaCinema - Queen of Pain Spells;drive_dir::Hazhadal Magebreaker;drive_dir::Itsuka Kotori for WK by Patchouli Knowledge;drive_dir::Righteous Thunderbolt and Arcana MegaPack;drive_dir::Avada Kedavra;drive_dir::Nyaruko for Lion by Patchouli Knowledge;drive_dir::Phantom Advent Belt UP;drive_dir::Phantom Advent UP;drive_dir::Phantom Advent Shoulders UP;drive_dir::Phantom Advent Weapon UP;drive_dir::Array of Tranquility;drive_dir::Tempest Helm of the Thundergod Prem;drive_dir::Misgivings of the Emerald Age;drive_dir::Tales of the Grey Wastes;drive_dir::Auspice of the Whyrlegyge Prem;drive_dir::Vengeance of the Sunwarrior;drive_dir::Steel King;drive_dir::Lightbringer SF;drive_dir::Blossoming Harmony V 2.0;drive_dir::Tiny Mix V 4.0;drive_dir::Concealed Raven;drive_dir::Dark Reef Escape V 2.1;drive_dir::Savage Mettle;drive_dir::Morbific Provision;drive_dir::Monstrous Reprisal;drive_dir::Auspicious Seadweller;drive_dir::Allfather of Nature Set;drive_dir::Havoc of Dragon Palace V 2.0;drive_dir::Overgrown Emblem Aghanim Effect;drive_dir::Battle Pass Effect Blink Dagger;drive_dir::TI-9 Blink lvl 2 Effect;drive_dir::TI-8 Bottle Effect;drive_dir::TI-9 Seasonal Creep Deny Effect;drive_dir::Guardians of the Lost Path Radiant Towers;drive_dir::Fall Battle Pass 2016 Effect Teleport;drive_dir::Radiance TI-6 Effect;drive_dir::Phase Boots TI-6 Effect;drive_dir::Mjollnir TI-6 Effect;drive_dir::Battle Pass Effect Fountain Regen;drive_dir::Brightskye Refresher Orb;drive_dir::DAC 2015 Chaos Knight Cursor Pack;drive_dir::Chromy the Centipede Ward;drive_dir::Cavernite Dire Creeps;drive_dir::Emerald Roshan;drive_dir::Terrain - The Kings New Journey;drive_dir::River Vial Blue;drive_dir::The International 2019 Music Pack;drive_dir::Weather Sirocco;drive_dir::Azure Constellation HUD;drive_dir::Custom Dashboard 126;drive_dir::Susano Os Descendant;drive_dir::Lina Announcer;drive_dir::Lina Mega-Kills;drive_dir::Datastar Progenitor (Alter Arcana);drive_dir::Daemonfell Flame;drive_dir::Fate Meridian;drive_dir::Tengu Guardian Set;drive_dir::Heavenly Sword Doom V 3.0;drive_dir::Bounty Hunter Maniac Set;drive_dir::Gryphon Rider Set;drive_dir::Delights of Petaluna Pathfinder;drive_dir::Ancient Mechanism;drive_dir::Mark of the Mistral Fiend V 2.1;drive_dir::Big Un V 3.0;drive_dir::Overgrown;drive_dir::Crucible of Rile;drive_dir::Strygwyr Bloodseeker;drive_dir::Pattern of the Silken Queen;drive_dir::Iceplain Ravager;drive_dir::Saccharine Saboteur;drive_dir::Fatal Blossom V 3.0;drive_dir::Lightning Harbinger;drive_dir::Fires of the Volcanic Guard;drive_dir::Divine Anchor Style 1;drive_dir::Bestowments of the Divine Anchor effects;drive_dir::Ascendance of the Rime Lord 1st Style;drive_dir::Eye of the Beholder;drive_dir::Darkfall Warden;drive_dir::Blade of Tears and Crown of Tears;drive_dir::Voodoo Meepo;drive_dir::Fury of War God;drive_dir::Prismatic Grace;drive_dir::Remilia Scarlet for NS by Patchouli Knowledge;drive_dir::Coat of the Windward Rogue;drive_dir::Mask of the Confidant;drive_dir::Rapier of the Windward Rogue;drive_dir::Ire of Molten Rebirth;drive_dir::Nova of Golden Nirvana;drive_dir::Ancient Magus Style 2;drive_dir::Rubick Curse - Death Ward;drive_dir::Rubick Curse - Demonic Purge;drive_dir::Rubick Curse - Exocirsm;drive_dir::Rubick Curse - Familiar;drive_dir::Rubick Curse - Flesh Golem;drive_dir::Rubick Curse - Freezing Field;drive_dir::Rubick Curse - Jex;drive_dir::Rubick Curse - Magnetize;drive_dir::Rubick Curse - Mass Serpent Ward;drive_dir::Rubick Curse - Power Cog;drive_dir::Rubick Curse - Remote Mine;drive_dir::Rubick Curse - Shapeshift;drive_dir::Rubick Curse - Spirit Bear;drive_dir::Foulfell Corruptor;drive_dir::Submerged Hazard;drive_dir::Foliage of Eldritch Gnarl;drive_dir::Brawler of the Glacier Sea V 3.0;drive_dir::Wings of Colorful Icecrystals;drive_dir::Dread Compact Style 2;drive_dir::Chill of the Keepers Gaze;drive_dir::Ferocious Toxicant;drive_dir::Roshan Hunters Set;drive_dir::Abyssal Cuirass;drive_dir::Golden Floodmask effect;drive_dir::Trek of the Trailblazer;drive_dir::Magister of the Narrow Fates;drive_dir::Demonic Pugna V 3.0;drive_dir::Reminiscence of Dreams;drive_dir::Armor of the Stalwart Soul;drive_dir::Cursed Zealot;drive_dir::Curse of the New Season V 2.1;drive_dir::Armor of the Sanguine Moon Set;drive_dir::War-Burrow Ravager;drive_dir::Lord of Chronoptic Synthesis;drive_dir::Bloody Ripper;drive_dir::Explosive Maniac;drive_dir::Allied Commander Set;drive_dir::Harness of the Fissured Soul;drive_dir::Sanguine Royalty;drive_dir::Bloodfeather Wings Prem;drive_dir::Bindings of Deep Magma;drive_dir::Vantage of the Breach Warden;drive_dir::Blessing of the Crested Umbra;drive_dir::Keen Machine;drive_dir::Dragon Lore AWP;drive_dir::Plunder of the Savage Monger;drive_dir::Malefic Drakes Hood of the Crimson Witness;drive_dir::Plating of the Netherswarm Vanguard;drive_dir::Malefic Drakes Strike only Effect;drive_dir::Arctic Clinkz V 3.0;drive_dir::Flower Flame Lina V 3.0;drive_dir::Crimson Cyrridae;drive_dir::The Dusk Crawler Set; 123|||