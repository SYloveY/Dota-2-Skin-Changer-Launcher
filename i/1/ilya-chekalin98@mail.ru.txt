bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRDM5RDBDRTAtODQ0QS0xMUVBLTgwREMtMDAyQjY3MzVDOTJCIDExMXx8fCAyMjI6OiAkMnkkMTAkTkdJNU1qazFaRFV3WlRrNU5XVm1PT3Z4Z0lLMUpMeTBYemVyZDFRVVJ6WFJncHhBbVVOci4gMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6SWNlIExpbmEgMm5kIFN0eWxlO2RyaXZlX2Rpcjo6QWNvbHl0ZSBvZiBWZW5nZWFuY2UgViAyLjA7ZHJpdmVfZGlyOjpMb3N0IFJhbmdlcjtkcml2ZV9kaXI6OlNoZXJtYW4gTWFpZGVuIFYgNC4xO2RyaXZlX2Rpcjo6Qml0dGVyd2luZyBMZWdhY3k7ZHJpdmVfZGlyOjpBbGdpZCBGYWxjb24gViAzLjE7ZHJpdmVfZGlyOjpDaGxvZSB2b24gRWluemJlcm4gZm9yIEVhcnRoIFNwaXJpdCBieSBQYXRjaG91bGkgS25vd2xlZGdlO2RyaXZlX2Rpcjo6VGhlIFNoZWVwIFNldDtkcml2ZV9kaXI6OkF6dXJlIENvbnN0ZWxsYXRpb24gViAyLjE7ZHJpdmVfZGlyOjpXcmF0aCBvZiBLYSBWIDIuMTtkcml2ZV9kaXI6OlRvbGwgb2YgdGhlIEZlYXJmdWwgQXJpYTtkcml2ZV9kaXI6OkpvbGx5IFJlYXZlcjtkcml2ZV9kaXI6OkNvdW50ZXNzIG9mIFJpc3R1bDtkcml2ZV9kaXI6Ok1hY2Ugb2YgVmluY2VyZSBBdGFjayBFZmZlY3Q7ZHJpdmVfZGlyOjpEb3RhQ2luZW1hIC0gUXVlZW4gb2YgUGFpbiBTcGVsbHM7ZHJpdmVfZGlyOjpIYXpoYWRhbCBNYWdlYnJlYWtlcjtkcml2ZV9kaXI6Okl0c3VrYSBLb3RvcmkgZm9yIFdLIGJ5IFBhdGNob3VsaSBLbm93bGVkZ2U7ZHJpdmVfZGlyOjpSaWdodGVvdXMgVGh1bmRlcmJvbHQgYW5kIEFyY2FuYSBNZWdhUGFjaztkcml2ZV9kaXI6OkF2YWRhIEtlZGF2cmE7ZHJpdmVfZGlyOjpOeWFydWtvIGZvciBMaW9uIGJ5IFBhdGNob3VsaSBLbm93bGVkZ2U7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBCZWx0IFVQO2RyaXZlX2Rpcjo6UGhhbnRvbSBBZHZlbnQgVVA7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBTaG91bGRlcnMgVVA7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBXZWFwb24gVVA7ZHJpdmVfZGlyOjpBcnJheSBvZiBUcmFucXVpbGl0eTtkcml2ZV9kaXI6OlRlbXBlc3QgSGVsbSBvZiB0aGUgVGh1bmRlcmdvZCBQcmVtO2RyaXZlX2Rpcjo6QXJtYXR1cmUgb2YgdGhlIEJlbGxpZ2VyZW50IFJhbSBSZWQ7ZHJpdmVfZGlyOjpIaW5hbmF3aSBUZW5zaGkgZm9yIEVhcnRoc2hha2VyIGJ5IFBhdGNob3VsaSBLbm93bGVkZ2U7ZHJpdmVfZGlyOjpNaXNnaXZpbmdzIG9mIHRoZSBFbWVyYWxkIEFnZTtkcml2ZV9kaXI6OlRhbGVzIG9mIHRoZSBHcmV5IFdhc3Rlcztkcml2ZV9kaXI6OkF1c3BpY2Ugb2YgdGhlIFdoeXJsZWd5Z2UgUHJlbTtkcml2ZV9kaXI6OlZlbmdlYW5jZSBvZiB0aGUgU3Vud2Fycmlvcjtkcml2ZV9kaXI6OlN0ZWVsIEtpbmc7ZHJpdmVfZGlyOjpMaWdodGJyaW5nZXIgU0Y7ZHJpdmVfZGlyOjpZYXlhIGZvciBTbGFyZGFyIGJ5IFBhdGNob3VsaSBLbm93bGVkZ2U7ZHJpdmVfZGlyOjpCbG9zc29taW5nIEhhcm1vbnkgViAyLjA7ZHJpdmVfZGlyOjpUaW55IE1peCBWIDQuMDtkcml2ZV9kaXI6OlNoaXJhaSBLdXJva28gZm9yIFZlbmdlZnVsIFNwaXJpdCBieSBQYXRjaG91bGkgS25vd2xlZGdlO2RyaXZlX2Rpcjo6Q29uY2VhbGVkIFJhdmVuO2RyaXZlX2Rpcjo6VG9tb2UgTWFtaSBmb3IgU25pcGVyIGJ5IFBhdGNob3VsaSBLbm93bGVkZ2U7ZHJpdmVfZGlyOjpEYXJrIFJlZWYgRXNjYXBlIFYgMi4xO2RyaXZlX2Rpcjo6U2F2YWdlIE1ldHRsZTtkcml2ZV9kaXI6Ok1vcmJpZmljIFByb3Zpc2lvbjtkcml2ZV9kaXI6Okhha3VyZWkgUmVpbXUgZm9yIFRyb2xsIFdhcmxvcmQgYnkgUGF0Y2hvdWxpIEtub3dsZWRnZTtkcml2ZV9kaXI6OlByaW56IEV1Z2VuIGZvciBWaXBlciBieSBQYXRjaG91bGkgS25vd2xlZGdlO2RyaXZlX2Rpcjo6TW9uc3Ryb3VzIFJlcHJpc2FsO2RyaXZlX2Rpcjo6QXVzcGljaWQ5519cyBTZWFkd2VsbGVyO2RyaXZlX2Rpcjo6QWxsZmF0aGVyIG9mIE5hdHVyZSBTZXQ7ZHJpdmVfZGlyOjpIYXZvYyBvZiBEcmFnb24gUGFsYWNlIFYgMi4wO2RyaXZlX2Rpcjo6T3Zlcmdyb3duIEVtYmxlbSBBZ2hhbmltIEVmZmVjdDtkcml2ZV9kaXI6OkJhdHRsZSBQYXNzIEVmZmVjdCBCbGluayBEYWdnZXI7ZHJpdmVfZGlyOjpUSS05IEJsaW5rIGx2bCAyIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTggQm90dGxlIEVmZmVjdDtkcml2ZV9kaXI6OlRJLTkgU2Vhc29uYWwgQ3JlZXAgRGVueSBFZmZlY3Q7ZHJpdmVfZGlyOjpHdWFyZGlhbnMgb2YgdGhlIExvc3QgUGF0aCBSYWRpYW50IFRvd2Vycztkcml2ZV9kaXI6OkZhbGwgQmF0dGxlIFBhc3MgMjAxNiBFZmZlY3QgVGVsZXBvcnQ7ZHJpdmVfZGlyOjpSYWRpYW5jZSBUSS02IEVmZmVjdDtkcml2ZV9kaXI6OlBoYXNlIEJvb3RzIFRJLTYgRWZmZWN0O2RyaXZlX2Rpcjo6TWpvbGxuaXIgVEktNiBFZmZlY3Q7ZHJpdmVfZGlyOjpCYXR0bGUgUGFzcyBFZmZlY3QgRm91bnRhaW4gUmVnZW47ZHJpdmVfZGlyOjpCcmlnaHRza3llIFJlZnJlc2hlciBPcmI7ZHJpdmVfZGlyOjpEQUMgMjAxNSBDaGFvcyBLbmlnaHQgQ3Vyc29yIFBhY2s7ZHJpdmVfZGlyOjpDaHJvbXkgdGhlIENlbnRpcGVkZSBXYXJkO2RyaXZlX2Rpcjo6Q2F2ZXJuaXRlIERpcmUgQ3JlZXBzO2RyaXZlX2Rpcjo6RW1lcmFsZCBSb3NoYW47ZHJpdmVfZGlyOjpUZXJyYWluIC0gVGhlIEtpbmdzIE5ldyBKb3VybmV5O2RyaXZlX2Rpcjo6Uml2ZXIgVmlhbCBCbHVlO2RyaXZlX2Rpcjo6VGhlIEludGVybmF0aW9uYWwgMjAxOSBNdXNpYyBQYWNrO2RyaXZlX2Rpcjo6V2VhdGhlciBTaXJvY2NvO2RyaXZlX2Rpcjo6QXp1cmUgQ29uc3RlbGxhdGlvbiBIVUQ7ZHJpdmVfZGlyOjpSaXNlIEt1amlrYXdhIEFubm91bmNlciAoSmFwKTtkcml2ZV9kaXI6OkN1c3RvbSBEYXNoYm9hcmQgMTI2O2RyaXZlX2Rpcjo6WW9iYSBXaXNwO2RyaXZlX2Rpcjo6U3VzYW5vIE9zIERlc2NlbmRhbnQ7IDEyM3x8fA==