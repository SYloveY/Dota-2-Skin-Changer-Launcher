bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkTVRKa05tTm1NMlE1WldZM05UWXlNZVk4YUcvdmJwdzgyYzgyaDU4S1ZCODhQOUIzQ1VzdmUgMjIyfHx8IDEyMzo6IEJhc2hlciBvZiBNYWdlIFNrdWxscztHb2xkZW4gT2ZmaGFuZCBCYXNoZXIgb2YgTWFnZSBTa3VsbHM7VHJhcHBpbmdzIG9mIHRoZSBPbGQtVGltZXJzIC0gQXJtb3I7UGlzdG9uIEltcGFsZXI7QmVhc3Qgb2YgdGhlIENyaW1zb24gUmluZyBBcm1vcjtUd2lsaWdodCBIZXggLSBBcm1vcjtXaW5ncyBvZiB0aGUgRmFlIEZvcmFnZXI7RGFyayBXaWxsb3cgSXJvbiBUaG9ybiBPZmYtSGFuZDtBcm1ndWFyZHMgb2YgdGhlIFNtb2xkZXJpbmcgU2FnZTtDaW5kZXIgU2Vuc2VpIE9mZiBIYW5kIFdlYXBvbjtDaW5kZXIgU2Vuc2VpIFdlYXBvbjtHb2xkZW4gRHJhY2EgTWF3O0ZsYXNocG9pbnQgUHJvc2VseXRlIC0gSGVhZDtHbG9yeSBvZiB0aGUgRWxkZXJmbGFtZSAtIEhlYWQ7SW5mZXJuYWwgV2luZ3M7U2lsdmVyc2hhZGUgUmlkZXIgSGVhZDtMaW5lYWdlIE1vdW50IG9mIHRoZSBSYWlkZm9yZ2VkIFJpZGVyO0xpbmVhZ2UgQXJtb3Igb2YgdGhlIFJhaWRmb3JnZWQgUmlkZXI7Q3Jlc2NlbnQgQm93IEFycm93IG9ubHk7R29sZGVuIE1hc2sgb2YgTWV0aXJhO0F4aWEgb2YgTWV0aXJhO1N0YWZmIG9mIEd1bi1ZdTtBcm1vciBvZiB0aGUgU2xpdGhlcmVlbiBFeGlsZTtUaGUgQmVsbCBvZiBNZXJhbnRoaWE7T2ZmaGFuZCBCbGFkZSBvZiBQcmlzbWF0aWMgR3JhY2U7R29sZGVuIFNjYXZlbmdpbmcgR3V0dGxlc2x1ZztTY29yY2hpbmcgVGFsb247Qm9uZSBXaW5ncyBQdWRnZTtQdWRnZSBEYWdnZXI7RG90YUNpbmVtYSAtIFF1ZWVuIG9mIFBhaW4gU3BlbGxzO0Jsb29kZmVhdGhlciBGZWFzdDtQaGFudG9tIEFkdmVudCBCZWx0IFVQO1BoYW50b20gQWR2ZW50IFVQO1BoYW50b20gQWR2ZW50IFNob3VsZGVycyBVUDtQaGFudG9tIEFkdmVudCBXZWFwb24gVVA7QXJtIG9mIHRoZSBFeGFjdCBNYXJrc21hbjtHb2xkZW4gRnVsbC1Cb3JlIEJvbmFuemE7TXVoIEtlZW4gR3VuO1JlY3RpZmllcjtNYWplc3R5IE9mIFRoZSBDb2xvc3N1cyAtIFBlYmJsZTtNYWplc3R5IE9mIFRoZSBDb2xvc3N1cyAtIENvYmJsZTtNZWRpdW0gSWduZWQ5519cyBTdG9uZTtNYWplc3R5IE9mIFRoZSBDb2xvc3N1cyAtIE1vbm9saXRoO0FybW9yIG9mIHRoZSBJbXBlcmlvdXMgQ29tbWFuZDtIZWxtIG9mIHRoZSBTYXZhZ2UgTW9uZ2VyO1dyYXBzIG9mIFNlYWJsaWdodCBQcm9jZXNzaW9uO0RpbWVuc2lvbiBSaXBwZXIgTGVncztTdXNhbm8gT3MgRGVzY2VuZGFudDtTZWlzbWljIEJlcnNlcmtlcjtJbXBlcmlhbCBFbnZveTtBcm15IE9mIFRoZSBWYXN0IFNlYTtGYWVyaWVzbmFwIFNwcml0ZWxlYWY7IDEyM3x8fA==