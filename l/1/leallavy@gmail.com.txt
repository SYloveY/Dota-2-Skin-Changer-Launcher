limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$MDdjZTQxMWVlMjQ3ZGJkZOrDNnBMDqZH3LB2a8LXvASBdu3YzWyzi 222||| 123:: Terrain - The Kings New Journey;Guardians of the Lost Path Radiant Towers;Guardians of the Lost Path Dire Towers;Reptilian Refuge Radiant Creeps;Reptilian Refuge Dire Creeps;Smeevils Penance;Smeevils Penance Style 3;Monkey King Announcer;Monkey King Mega-Kills;Harmonies of New Bloom Music Pack V 2.1;River Vial Boiling;DAC 2015 Chaos Knight Cursor Pack;Jin and Yin Fox Spirits Default;TI-10 Aghanim Effect;TI-10 Bottle Effect;TI-10 Eul Scepter Effect;TI-10 Level Up Effect;TI-10 Mekasm Effect;TI-10 Mjollnir Effect;TI-10 Phase Boots Effect;TI-10 Radiance Effect;TI-10 Shivas Effect;TI-10 Teleport lvl 3 Effect;25 lvl ping;Mine Radius 702;Sakura Fontain Regen;The Barb of Skadi;Paddapon of Ribbitar V 4.0;Blastforge Exhaler;Piston Impaler;Servants of Endless Stars;Mask of the Bloodforge;Off-Hand Weapon of the Bloodforge;Weapon of the Bloodforge;Harborblossom of the Crimson Witness;Flourishing Lodestar Prem;Flashpoint Proselyte - Head;Hunger of the Howling Wilds Arms;Whip of the Covert Saboteur;Tahlin Hookblade;Tahlin Hookblade Off-Hand;Candy Cat Arms;Candy Cat Back;Candy Cat Belt;Candy Cat Head;Candy Cat Off-Hand;Candy Cat Shoulder;Candy Cat Weapon;Sullen Hollow V 3.2;Yulsaria*s Glacier Prem;Yulsarias Mantle Prem;Ice Blossom;Solar Forge;Focal Resonance V 3.0;Tiny Bad To The Bone;Small Bad To The Bone;Medium Bad To The Bone;Large Bad To The Bone;Molten Claw Prem;Crucible of Rile;Mantle of the Cinder Baron Style 1;Bloodfeather Wings Prem;Hazhadal Magebreaker;The Lightning Orchid V 3.2;Rose of the Corridan Maestro;Nothlic Burden;Twilight Schism;Blade of Tears and Crown of Tears;Coat of the Windward Rogue;Mask of the Confidant;Rapier of the Windward Rogue;Crimson Cyrridae;Lycosidae*s Brood;Whispers of the Damned Wings;Whispers of the Damned Head;Form of the Grey Ghost;Arms of Desolation Prem;Familiars of the Keepers Gaze;Bronzemonster of the Wailing Inferno;Heir of Terror Crown;Heir of Terror Wings;Mulctant Pall;Fin King*s Charm Prem;Alluvion Prophecy V 2.0;Plating of the Netherswarm Vanguard;Malefic Drakes Hood of the Crimson Witness;Dark Meadow Massacre Armor;Dark Meadow Massacre Arms;Dark Meadow Massacre Head;Plunder of the Savage Monger;Susano Os Descendant;The Corruption of Nezzureem;Sight of the Kha Ren Faithful;Memories of the Vow Eternal;Bounty Hunter Maniac Set;Dark Reef Escape V 2.1;Bearer of the Arkturan Talon;Prismatic Grace;Mage Abolisher V 2.0;Exponent of the Endless Stars;Wrath of the Blood Covenant Set;Saccharine Saboteur;The Chained Scribe;Explosive Maniac;Toll of the Fearful Aria;Time Wanderer;Tales of the Grey Wastes;Vengeance of the Sunwarrior;Wrath of Ka V 2.1;Maze Watcher Set;Royal Winterbloom;Nirvana Spiritual;Charmer of Firesnake;Space Spectre V3.0;Hinterland Stalker;Vantage of the Breach Warden;Bewitching Flare V 2.0;The Timekeeper Silver;Lineage Province of the Hunt Eternal;Overgrown;Bastion of the Lionsguard;Obsidian Nightmare;The Jade General;Rambling Fatebender;Steampowered Magic Set;Corridan Maestro V 2.0;Fatal Blossom V 3.0;Radiant Protector Set V2.0;Atrocities of the Abyssal Scourge;Molten Destructor;Bindings of the Battleranger Chaotic Style;Champion of Discord V 3.1;Smoky Dreamer;Lightning Harbinger;Dragon Guardian;Allied Commander Set;Brumal Berserker;The Rowdy Firebrand;Divine Anchor Style 2;Bestowments of the Divine Anchor effects;Lord of Chronoptic Synthesis;Bloody Ripper;Azure Constellation V 2.1;Erupting Wrath V 2.0;Guardian of the Eternal Seasons;Unfettered Malevolence;Reminiscence of Dreams;Golden Nether Lords Regalia Set Prem;Origins of the Shadow Creed;Elemental Imperator V 2.0;Armature of the Belligerent Ram Red;Tinker Scarecrow Set;Bark of the Ageless Witness;Brawler of the Glacier Sea V 3.0;Echoes of the Eyrie V 2.0;Polar Night;Ember Tipped Carapace Set;Adage of the Smoldering Sage;Barren Survivor V 2.0;Wisdom of the Midnight Sun;War-Burrow Ravager;Fury of War God;Pattern of the Silken Queen;Cursed Zealot And Dagon;Arc of the Sovereign;Imperial Relics V 2.1;Bringer of Troubles;Obsidianhoof Guardian;Trail of the Grey Ghost;Foulfell Corruptor;Powdersled Rookery;Eternal Harvest;Mandate of the Nameless;Chill of the Keepers Gaze;Dread Compact;Wyrmbrew Connoisseur;Auspicious Seadweller;Ferocious Toxicant;Darkfall Warden;Mark of the Mistral Fiend V 2.1;Raid of the Northern Exiles; 123|||