limitHWID:: 1 000||| 111:: 12828DFB-EB34-DE11-B27E-00235A9DD9D3 111||| 222:: d6af96449d3b71b53a8780111ad554229783fe9d966fba3e48fad1e4d2757d069df888aff1bd1e5cb3bd79a691194312734a52c21df2a24d5245d5590e1d74a6 222||| 123:: drive_dir::The Baptism of Melting Fire;drive_dir::Staff of Gun-Yu;drive_dir::Bloodroot Guard;drive_dir::Cunning Corsair;drive_dir::Eternal Harvest;drive_dir::Tools of the Final Utterance;drive_dir::Kindred of the Umizar Crawler;drive_dir::Beacon of Cerulean Light 2 Style V 2.1;drive_dir::Shooting Star;drive_dir::Vestments of the Sacred Dancer;drive_dir::Steam Chopper;drive_dir::Majesty Of The Colossus - Pebble;drive_dir::Omens Embrace;drive_dir::Helm of the Dominator for Troll;drive_dir::Grimwolf;drive_dir::Woody Ward;drive_dir::Pudge Arcana ENG Voice;drive_dir::Elemental Fury Music Pack;drive_dir::Kama Pulya for PA Skills;drive_dir::Match Ready - Azzazin O Gospodi;drive_dir::Aegis and Roshan St. Valentine Day;drive_dir::TI-7 DC TP effect;drive_dir::TI-8 Phase Boots Effect;drive_dir::Journey Roshan;drive_dir::TI-8 LVL UP Effect;drive_dir::TI-8 TP lvl 1 Effect;drive_dir::Holiday Radiant Tower;drive_dir::Donbass Cup HUD;drive_dir::Weather Spring;drive_dir::River Vial None;drive_dir::Green Ural HUD;drive_dir::Toilet Shrine; 123|||