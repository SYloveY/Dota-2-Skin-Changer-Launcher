limitHWID:: 1 000||| 111:: 236372E0-FE60-11E3-81AC-2025644F98C8 111||| 222:: $2y$10$NTMyOGViMzYxOTdiNjQzNOiS.tdqZ3NBur4Jho26Z4wWg7cgv0a66 222||| 123:: Formed Alloy Pauldrons;Broken Shackles;Eternal Radiance Blades Prem;Armor of the Forgotten Plane;Golden Offhand Basher of Mage Skulls;Oathbound Defiant Pauldrons;Golden Basher of Mage Skulls;Arms of Dormant Oblivion;Garb of the First Ways;Quiver of the Urushin Huntsman;Skeletal Claw of the Vandal;Wrap of the Urushin Huntsman;Sentinels of the Urushin Huntsman;Bow of the Shadowcat;Shoulders of the Black Wind Raven;Quiver of the Boreal Watch;Legs of the Kha-Ren Faithful;Trophy of the Shadowcat;Ember Spirits Hat V 2.1;Rapier of the Burning God Offhand;Mentor of the High Plains Right Tiger Hook;Battlefury;Kantusa the Script Sword;Argent Decimator Head;Battle Banner of the Masked;Complete Helm of the Dark Moon Stalker;Wavecutter;Shadow in the Deep Bracers;Hood of the Abyssal Arms;Shell of the Umizar Crawler;Golden Hydrakan Latch;Helm of the Foulfell Corruptor;Claws of the Sangstrath Fold;Mantle of the Sangstrath Fold;Belt of the Crystal Drift;Time Wanderer;Shadowforce Gale;Allure of the Deep;Tales of the Windward Rogue;The Gaze of Zebulon;Harsh Sojourn; 123|||