bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtRDhDQjhBOUIwMkQ5IDExMXx8fCAyMjI6OiAkMnkkMTAkWkRVeVlqSTNaV0l6T0dFMlpESXpZZXNTVlplaWtpcVVDUTRxVTBBOUN4YzhxaGxuTDJrZUsgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6SG9vZHdpbmsgR2xlaXBuaXI7ZHJpdmVfZGlyOjpIb29kd2luayBEcmFnb24gQ3Jvc3Nib3c7ZHJpdmVfZGlyOjpXaW5kcmFuZ2VyIEFyY2FuYSBzdHlsZSAxICsgV1IgaW1tb3J0YWw7ZHJpdmVfZGlyOjpDaGFvcyBLbmlnaHQgV0MgMyBTb3VuZDtkcml2ZV9kaXI6Okp1Z2dlcm5hdXQgV0MgMyBTb3VuZDtkcml2ZV9kaXI6Okt1bmtrYSBXQyAzIFNvdW5kO2RyaXZlX2Rpcjo6UnViaWNrIFdDIDMgU291bmQ7ZHJpdmVfZGlyOjpUaW5rZXIgV0MgMyBTb3VuZDtkcml2ZV9kaXI6OlRlY2hpZXMgV0MgMyBTb3VuZDtkcml2ZV9kaXI6Okhvcm5zIG9mIHRoZSBCZXRyYXllcjtkcml2ZV9kaXI6OkdhdW50bGV0IG9mIHRoZSBJbmZlcm5hbCBSYW1ibGVyO2RyaXZlX2Rpcjo6TXVsY3RhbnQgUGFsbCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO2RyaXZlX2Rpcjo6U2NlcHRlciBvZiBDb3JydXB0ZWQgQW1iZXI7ZHJpdmVfZGlyOjpTdWxsZW4gUmFtcGFydDtkcml2ZV9kaXI6OkhpZGRlbiBWZWN0b3IgLSBCZWx0O2RyaXZlX2Rpcjo6SGlkZGVuIFZlY3RvciAtIEFybW9yO2RyaXZlX2Rpcjo6SGlkZGVuIFZlY3RvciAtIEJsYWRlO2RyaXZlX2Rpcjo6R2xhY2lhbCBHYXJkZW5zIEFybXM7ZHJpdmVfZGlyOjpHbGFjaWFsIEdhcmRlbnMgQmFjaztkcml2ZV9kaXI6OkdsYWNpYWwgR2FyZGVucyBTaG91bGRlcjtkcml2ZV9kaXI6OkdsYWNpYWwgR2FyZGVucyBIZWFkO2RyaXZlX2Rpcjo6TmlnaHRzdGFsa2VyIE1lZ2FQYWNrIHNldDtkcml2ZV9kaXI6OlRoZSBTY2FybGV0IEZsYXJlIE5lY2s7ZHJpdmVfZGlyOjpUaGUgU2NhcmxldCBGbGFyZSBCZWx0O2RyaXZlX2Rpcjo6VGhlIFNjYXJsZXQgRmxhcmUgQXJtcztkcml2ZV9kaXI6OkFjaWQgSHlkcmEgQ3Vyc29yIFBhY2s7ZHJpdmVfZGlyOjpCYXJyYWN1ZGE7ZHJpdmVfZGlyOjpBcmVuYSBDaGFtcGlvbiBBcm1vcjtkcml2ZV9kaXI6OkFyZW5hIENoYW1waW9uIEJlbHQ7ZHJpdmVfZGlyOjpHb2QqcyBNZXJjeTtkcml2ZV9kaXI6OkZvcnN3b3JuIExlZ2FjeSAtIFNwZWFyO2RyaXZlX2Rpcjo6MjUgbHZsIHBpbmc7ZHJpdmVfZGlyOjpDdXN0b20gTWVnYVBhY2sgRGVsaWxhaCBSRTtkcml2ZV9kaXI6OkFoUHVjaztkcml2ZV9kaXI6OkNoYXNtIG9mIHRoZSBCcm9rZW4gQ29kZSBBcm1vcjtkcml2ZV9kaXI6OlNwYW4gb2YgU29ycm93O2RyaXZlX2Rpcjo6QmxhZGVzIG9mIHRoZSBCYWxlZnVsIEhvbGxvdztkcml2ZV9kaXI6Olp1bGppbiBmb3IgVHJvbGwgV2FybG9yZDtkcml2ZV9kaXI6Ok1pc2dpdmluZ3Mgb2YgdGhlIEVtZXJhbGQgQWdlO2RyaXZlX2Rpcjo6TGlnaHRmb3JnZWQgRHJhZW5laTtkcml2ZV9kaXI6OlZvbGF0aWxlIEFwb3RoZWNhcnkgU2V0O2RyaXZlX2Rpcjo6VGhlIE9yZGVyIG9mIEN5cHJpbjtkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBEZWVwO2RyaXZlX2Rpcjo6RGFnZ2VyIG9mIHRoZSBPdXRjYXN0O2RyaXZlX2Rpcjo6QmxhZGVzIG9mIFByaXNtYXRpYyBHcmFjZTtkcml2ZV9kaXI6OkFudGltYWdlIFdlaSBGZW1hbGUgKFlvdSBjYW4gYWRkIFdlYXBvbiBhbmQgSGVhZCk7ZHJpdmVfZGlyOjpBTSBBenppbm90cztkcml2ZV9kaXI6OkhhaXIgb2YgdGhlIFN1cnZpdm9yO2RyaXZlX2Rpcjo6Q3VzdG9tIE1lZ2FwYWNrIEh1c2thciBGbGFzaHBvaW50IFByb3NlbHl0ZSArIFB1cnN1aXQgb2YgdGhlIEVtYmVyIERlbW9ucztkcml2ZV9kaXI6Ok1pcmFuYSBUSTEwIENvbGxlY3RvcnMgQ2FjaGUgTWVnYVBhY2s7ZHJpdmVfZGlyOjpFeG9kdXMgb2YgdGhlIFBsYWd1ZSBXaXRjaCBCYWNrO2RyaXZlX2Rpcjo6U3VsbGVuIEhhcnZlc3Q7ZHJpdmVfZGlyOjpFeG9kdXMgb2YgdGhlIFBsYWd1ZSBXaXRjaCBIZWFkO2RyaXZlX2Rpcjo6QmV0dGVyIENhbGwgTW9ycGhsaW5nIFdpdGggSW1tb3J0YWxzO2RyaXZlX2Rpcjo6TWFzdGVyIG9mIHRoZSBTZWFyaW5nIFBhdGggQXJtcztkcml2ZV9kaXI6OkNpbmRlciBTZW5zZWkgQmVsdDtkcml2ZV9kaXI6OkNpbmRlciBTZW5zZWkgU3R5bGU7ZHJpdmVfZGlyOjpDaW5kZXIgU2Vuc2VpIE9mZiBIYW5kIFdlYXBvbjtkcml2ZV9kaXI6OkNpbmRlciBTZW5zZWkgU2hvdWxkZXJzO2RyaXZlX2Rpcjo6V2VhcG9uIG9mIHRoZSBQaG9lbml4IENsYW47ZHJpdmVfZGlyOjpCb25rZXJzIG9mIEF3YWxlYjtkcml2ZV9kaXI6OlZpc2FnZSBvZiBSaWJiaSp0YXI7ZHJpdmVfZGlyOjpGZWF0aGVyZWQgTWFudGxlIG9mIHRoZSBBcmt0dXJhbiBUYWxvbjtkcml2ZV9kaXI6OlBhZGRhcG9uIG9mIFJpYmJpdGFyIFYgNC4wO2RyaXZlX2Rpcjo6QXdhbGVicyBUcnVuZGxld2VlZDtkcml2ZV9kaXI6OlRhaWwgb2YgdGhlIFN0b3JtY3Jvdztkcml2ZV9kaXI6OlNvdWwgb2YgdGhlIFNsYXllciBQcmVtO2RyaXZlX2Rpcjo6RGFyayBGb3Jlc3QgUHVuaXNoZXI7ZHJpdmVfZGlyOjpTa3l3cmF0aCBNYWdlIE1lZ2FQYWNrIFRoYW5hdG9zO2RyaXZlX2Rpcjo6Q2hhcm1lciBvZiBGaXJlc25ha2U7ZHJpdmVfZGlyOjpUaHVuZGVyIEhhd2s7ZHJpdmVfZGlyOjpJcm9uIFRob3JuIEhVRDtkcml2ZV9kaXI6OkFybXMgb2YgRGVzb2xhdGlvbiBQcmVtO2RyaXZlX2Rpcjo6UGF1bGRyb25zIG9mIEV0ZXJuYWwgSGFydmVzdCBEMkMgRWRpdGlvbjtkcml2ZV9kaXI6OkNvbG9yU3RhdHM7ZHJpdmVfZGlyOjpBZWdpcyBhbmQgUm9zaGFuIFN0LiBWYWxlbnRpbmUgRGF5O2RyaXZlX2Rpcjo6Q2F2ZXJuaXRlIFJhZGlhbnQgQ3JlZXBzO2RyaXZlX2Rpcjo6Q2F2ZXJuaXRlIERpcmUgQ3JlZXBzO2RyaXZlX2Rpcjo6Qmx1ZSBEYWdvbjtkcml2ZV9kaXI6OkhleCBZYWt5b2s7ZHJpdmVfZGlyOjpQZWRlc3RhbCBNYW5pZm9sZCBQYXJhZG94O2RyaXZlX2Rpcjo6SEQgaXRlbSBpY29uO2RyaXZlX2Rpcjo6U3BlbGwgaWNvbiBwYWNrIGJ5IFYxdGVrMzhpO2RyaXZlX2Rpcjo6Uml2ZXIgVmlhbCBCbHVlO2RyaXZlX2Rpcjo6Um9zaGFuIEdhcmRlbnM7ZHJpdmVfZGlyOjpHYWJlIE5ld2VsbCBTaG9wa2VlcGVyO2RyaXZlX2Rpcjo6VEktNiBPRyBUUCBFZmZlY3Q7ZHJpdmVfZGlyOjpQbGFuZXRmYWxsIFN0dW4gRWZmZWN0O2RyaXZlX2Rpcjo6R3VhcmRpYW5zIG9mIHRoZSBMb3N0IFBhdGggUmFkaWFudCBUb3dlcnM7ZHJpdmVfZGlyOjpHdWFyZGlhbnMgb2YgdGhlIExvc3QgUGF0aCBEaXJlIFRvd2Vycztkcml2ZV9kaXI6OkVuaWdtYXRpYyBFbWJsZW0gb2YgdGhlIERpcmV0aWRlIC0gQmx1ZTtkcml2ZV9kaXI6OlNoYWRvdyBGaWVuZCBBcmNhbmEgRGVtb24gRWF0ZXI7ZHJpdmVfZGlyOjpDaGFpbnMgb2YgdGhlIEpvbGx5IFJlYXZlcjtkcml2ZV9kaXI6OkdpcmRsZSBvZiB0aGUgQnV0Y2hlcipzIFdha2U7ZHJpdmVfZGlyOjpOYWlscyBpbiB0aGUgTWFkIEhhcnZlc3Rlcjtkcml2ZV9kaXI6OkJsb29kc3RhaW5lZCBCcml0Y2hlcztkcml2ZV9kaXI6Okp1bmdsZSBTZWNyZXRzO2RyaXZlX2Rpcjo6SGFrb2JpIGFuZCBUZW5uZWtvIFByZW07ZHJpdmVfZGlyOjpEaXJlIE92ZXJsb3JkIE1lZ2EtS2lsbHM7ZHJpdmVfZGlyOjpSaWNrIGFuZCBNb3J0eSBBbm5vdW5jZXI7ZHJpdmVfZGlyOjpQaGFudG9tIEFzY2Vuc2lvbiBCZWx0O2RyaXZlX2Rpcjo6UGhhbnRvbSBBc2NlbnNpb247ZHJpdmVfZGlyOjpUcmFuc3ZlcnNhbnQgU291bCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO2RyaXZlX2Rpcjo6UGhhbnRvbSBBc2NlbnNpb24gV2VhcG9uO2RyaXZlX2Rpcjo6U3VibWVyZ2VkIEhhemFyZCBQcm9wZWxsZXI7ZHJpdmVfZGlyOjpCbGFja3NoaWVsZCBQcm90b2Ryb25lIE1pc3NpbGUgTGF1bmNoZXI7ZHJpdmVfZGlyOjpTdWJtZXJnZWQgSGF6YXJkIEh1bGw7ZHJpdmVfZGlyOjpBcmNhbmljIFJlc29uYW5jZSBCZWFtO2RyaXZlX2Rpcjo6U291cCBmb3IgU2x1dHMgQWthbWFuYWggQXJjYW5hO2RyaXZlX2Rpcjo6R3JlYXQgSGVsbSBvZiB0aGUgRGVlcDtkcml2ZV9kaXI6Ok1vbGRlcmluZyBNYXNrIG9mIEthO2RyaXZlX2Rpcjo6Q2FyaXBhY2Ugb2YgdGhlIEFub2ludGVkO2RyaXZlX2Rpcjo6Q3Jvd24gb2YgR2lsZGVkIFNsYXllcjtkcml2ZV9kaXI6OkRhZ2dlcnMgb2YgdGhlIEFub2ludGVkO2RyaXZlX2Rpcjo6RWFydGhzaGFrZXIgTWVnYVBhY2sgTmV3O2RyaXZlX2Rpcjo6Tm90aGFjb2F0bCBBcm1hbWVudHM7ZHJpdmVfZGlyOjpXYXJnb2Qgb2YgdGhlIEJsYWRla2VlcGVyO2RyaXZlX2Rpcjo6UHJvdm9jYXRpb24gb2YgUnVpbiBCcmFjZXJzO2RyaXZlX2Rpcjo6U2luaXN0ZXIgU2hhZG93IEJhY2s7ZHJpdmVfZGlyOjpQcm92b2NhdGlvbiBvZiBSdWluIE1hc2s7ZHJpdmVfZGlyOjpQcm92b2NhdGlvbiBvZiBSdWluIEJlbHQ7ZHJpdmVfZGlyOjpQcm92b2NhdGlvbiBvZiBSdWluIFN3b3JkO2RyaXZlX2Rpcjo6RGl2aW5lIEFudmlsIFNldDtkcml2ZV9kaXI6Ok1hbmRhdGUgb2YgdGhlIE5hbWVsZXNzO2RyaXZlX2Rpcjo6U292ZXJlaWduIG9mIHRoZSBLcmF5IExlZ2lvbnMgMnN0IFN0eWxlO2RyaXZlX2Rpcjo6VG9yc28gb2YgQXhlIFVubGVhc2hlZDtkcml2ZV9kaXI6OkJlbHQgb2YgdGhlIFdyYXRoZnVsIEFubmloaWxhdG9yO2RyaXZlX2Rpcjo6R3VhcmQgb2YgdGhlIFJlZCBNaXN0IFByZW07ZHJpdmVfZGlyOjpBeGUgb2YgUGhyYWN0b3M7ZHJpdmVfZGlyOjpQcm9vZiBvZiBDb3VyYWdlO2RyaXZlX2Rpcjo6Q3VzdG9tIE1lZ2FQYWNrIERyb3cgUmFuZ2VyIFN5bHZhbmFzIExpdmUgKFZpb2xldCk7ZHJpdmVfZGlyOjpbQWJhZGRvbl0gVW5kZWFkIERlYXRoIEtuaWdodCB2MS4xO2RyaXZlX2Rpcjo6U2t1bGwgb2YgVmFzaHVuZG9sO2RyaXZlX2Rpcjo6UmF2ZW4qcyBGbGFtZSBTaG91bGRlcjtkcml2ZV9kaXI6OkRyZWFkIEFzY2VuZGFuY2UgQmVsdDtkcml2ZV9kaXI6OkRyZWFkIEFzY2VuZGFuY2UgV2luZ3M7ZHJpdmVfZGlyOjpaZWFsIG9mIE9tb3ogQXJrb3NoO2RyaXZlX2Rpcjo6TGl0YW55IG9mIHRoZSBEYW1uZWQgLSBUYWlsO2RyaXZlX2Rpcjo6V3JhdGggb2YgdGhlIEZhbGxlbiBXZWFwb247ZHJpdmVfZGlyOjpEaXJlY291cnQgSmVzdGVyIENhcDtkcml2ZV9kaXI6OkZhbWlsaWFycyBvZiBHbG9yaWQ5519cyBJbnNwaXJhdGlvbjtkcml2ZV9kaXI6Ok1hbnRsZSBvZiB0aGUgQmxhY2tndWFyZCBNYWd1cyBEMkMgRWRpdGlvbjtkcml2ZV9kaXI6OlNvdXAgZm9yIFNsdXRzIGhhaXIgZm9yIEludm9rZXI7ZHJpdmVfZGlyOjpCZWx0IG9mIEdsb3Jpb3VzIEluc3BpcmF0aW9uO2RyaXZlX2Rpcjo6S2lkcyBPcmI7ZHJpdmVfZGlyOjpNYWd1cyBBY2NvcmQ7ZHJpdmVfZGlyOjpEYXJrIEFydGlzdHJ5IENhcGUgUHJlbTsgMTIzfHx8