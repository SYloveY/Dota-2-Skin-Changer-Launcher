bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogNEZEMzcxMjAtRDdEQS0xMURELUJCNTEtMkM0RDU0RDg1OEJCIDExMXx8fCAyMjI6OiAkMnkkMTAkWkRVeVlqSTNaV0l6T0dFMlpESXpZZXNTVlplaWtpcVVDUTRxVTBBOUN4YzhxaGxuTDJrZUsgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6VGVycmFpbiAtIEltbW9ydGFsIEdhcmRlbnM7ZHJpdmVfZGlyOjpQdXBwZXQgUHVkZ2UgUGVyc29uYSAoeWQ5519IGNhbiBhZGQgSG9vaykgVVA7ZHJpdmVfZGlyOjpMaXR0bGUgV2l0Y2ggU2V0O2RyaXZlX2Rpcjo6VGluZSBvZiB0aGUgQmVoZW1vdGggQ3Vyc29yIFBhY2s7ZHJpdmVfZGlyOjpUcmFwcGluZyBvZiB0aGUgU2VjcmV0IE1lZGljaW5lO2RyaXZlX2Rpcjo6MjUgbHZsIHBpbmc7ZHJpdmVfZGlyOjpGcm96ZW4gVm9pZDtkcml2ZV9kaXI6OkJlc3Rvd21lbnRzIG9mIHRoZSBDZW50dXJpb24gVmFuZ3VhcmQ7ZHJpdmVfZGlyOjpFbWluZW5jZSBvZiBSaXN0dWwgRGVueSAyO2RyaXZlX2Rpcjo6VEktNyBTZWNyZXQgVFAgRWZmZWN0O2RyaXZlX2Rpcjo6VEktMTAgUmFkaWFuY2UgRWZmZWN0O2RyaXZlX2Rpcjo6Uml2ZXIgVmlhbCBQb3Rpb247ZHJpdmVfZGlyOjpEcmFnb25zIEFzY2Vuc2lvbiBWIDMuMDtkcml2ZV9kaXI6Ok1vcnBobGluZyBJbW1vcnRhbHMgTWVnYVBhY2sgVVA7ZHJpdmVfZGlyOjpDdXN0b20gTWVnYVBhY2sgV3JhaXRoIEtpbmcgVGhlIE9uZSBUcnVlIEtpbmcgQnVuZGxlIChTdHlsZSAxIENoaW5lc2UpO2RyaXZlX2Rpcjo6VXJzYSBJbW1vcnRhbHMgTWVnYVBhY2s7ZHJpdmVfZGlyOjpHaG9zdCBKdWRnZXI7ZHJpdmVfZGlyOjpUaGUgSmFkZSBHZW5lcmFsO2RyaXZlX2Rpcjo6U2VycGVudCBvZiB0aGUgSmFkZSBFbWlzc2FyeTtkcml2ZV9kaXI6OkphZGUgUmVja29uaW5nIFByZW07ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBVUDtkcml2ZV9kaXI6OlBoYW50b20gQWR2ZW50IFNob3VsZGVycyBVUDtkcml2ZV9kaXI6OlBoYW50b20gQWR2ZW50IEJlbHQgVVA7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBXZWFwb24gVVA7ZHJpdmVfZGlyOjpLbmlnaHQgU3RhdHVlO2RyaXZlX2Rpcjo6Q3J5c3RhbCBNYWlkZW4gQW5pbWUgVm9pY2U7ZHJpdmVfZGlyOjpMaW5hIEFuaW1lIFZvaWNlO2RyaXZlX2Rpcjo6TmFnYSBTaXJlbiBBbmltZSBWb2ljZTtkcml2ZV9kaXI6OlRoZSBJbnRlcm5hdGlvbmFsIDIwMjAgTXVzaWMgUGFjaztkcml2ZV9kaXI6Okp1Z2dlcm5hdXQgV0MgMyBTb3VuZDtkcml2ZV9kaXI6OlJ1YmljayBXQyAzIFNvdW5kO2RyaXZlX2Rpcjo6VGlua2VyIFdDIDMgU291bmQ7ZHJpdmVfZGlyOjpPcmFjbGUgV0MgMyBTb3VuZDtkcml2ZV9kaXI6Okt1bmtrYSBXQyAzIFNvdW5kO2RyaXZlX2Rpcjo6Q2hhb3MgS25pZ2h0IFdDIDMgU291bmQ7ZHJpdmVfZGlyOjpUZWNoaWVzIFdDIDMgU291bmQ7ZHJpdmVfZGlyOjpCbGFkZWZvcm0gTGVnYWN5IFByb3ZvY2F0aW9uIG9mIFJ1aW47ZHJpdmVfZGlyOjpSb3lhbCBXaW50ZXJibG9vbTtkcml2ZV9kaXI6OkN1c3RvbSBNZWdhUGFjayBEcm93IFJhbmdlciBTeWx2YW5hcyBVbHRpbWF0ZTtkcml2ZV9kaXI6OkN1c3RvbSBNZWdhUGFjayBWbGFkaW1pciBMaWNoO2RyaXZlX2Rpcjo6QXJtb3Igb2YgdGhlIERlZXA7ZHJpdmVfZGlyOjpMdXJlIG9mIHRoZSBHbGltbWVyZ3VhcmQgSGVhZDtkcml2ZV9kaXI6OlRoZSBPcmRlciBvZiBDeXByaW47ZHJpdmVfZGlyOjpUaGUgTGVlY2ggUXVlZW4gV2VhcG9uO2RyaXZlX2Rpcjo6T2ZmaGFuZCBDdXRsYXNzIG9mIHRoZSBDb25zdW1pbmcgVGlkZXM7ZHJpdmVfZGlyOjpGb3dsIFBsYWd1ZSBTZXQ7ZHJpdmVfZGlyOjpTdWxsZW4gUmFtcGFydDtkcml2ZV9kaXI6Ok9sZCBNb2RlbCBTaGFkb3cgRmllbmQ7ZHJpdmVfZGlyOjpXaW5kcmFuZ2VyIEFyY2FuYSBzdHlsZSAxICsgV1IgaW1tb3J0YWw7ZHJpdmVfZGlyOjpIb29kd2luayBHbGVpcG5pcjtkcml2ZV9kaXI6Okhvb2R3aW5rIERyYWdvbiBDcm9zc2Jvdztkcml2ZV9kaXI6OlRoZSBCcmluZWJyZWQgQ2F2YWxpZXI7ZHJpdmVfZGlyOjpBbnRpLU1hZ2UgUmVib3JuIERvdGEyQ2hhbmdlcjtkcml2ZV9kaXI6OlNrYWRpIE1lZHVzYSBWIDIuMDtkcml2ZV9kaXI6OldpbmRyYW5nZXIgQXJjYW5hIHN0eWxlIDEgKEJsdWUgQmlyZCkgKyBGdWxsIFdSIGltbW9ydGFsO2RyaXZlX2Rpcjo6RXNzZW5jZSBPZiBUaGUgRGFyayBNb29uO2RyaXZlX2Rpcjo6SGVsbSBvZiB0aGUgRGFyayBNb29uIFN0YWxrZXI7ZHJpdmVfZGlyOjpUd2lsaWdodCBTY2hpc207ZHJpdmVfZGlyOjpTb3VsIERpZmZ1c2VyIFByZW07ZHJpdmVfZGlyOjpUZXJyYWluIC0gU2FuY3R1bXMgb2YgdGhlIERpdmluZTtkcml2ZV9kaXI6Ok1pZG5pZ2h0IFRlcnJvciBIVUQ7ZHJpdmVfZGlyOjpJY2VmbGlnaHQgRWRpZmljZTtkcml2ZV9kaXI6OkdvbGRlbiBBZWdpcztkcml2ZV9kaXI6OkhvbmV5IEhlaXN0IEJhYnkgUm9zaGFuO2RyaXZlX2Rpcjo6ZGFzaGJvYXJkIHN0b3JtIHNwaXJpdDtkcml2ZV9kaXI6Ok1pcmFuYSBUSTEwIENvbGxlY3RvcnMgQ2FjaGUgTWVnYVBhY2s7ZHJpdmVfZGlyOjpBY29seXRlIG9mIHRoZSBMb3N0IEFydHMgd2l0aCBUYXVudCBBdHRhY2tzO2RyaXZlX2Rpcjo6RmlzdHMgb2YgQXhlIFVubGVhc2hlZDtkcml2ZV9kaXI6OkF4ZSBKdW5nbGU7ZHJpdmVfZGlyOjpCcmlzdGxlYmFjayBNZWdhUGFjaztkcml2ZV9kaXI6OlNoYXR0ZXJibGFzdCBDb3JlIFNoYXR0ZXJibGFzdCBDcm93biBBcG9jYWx5cHNlIFVuYm91bmQ7ZHJpdmVfZGlyOjpQbGFuZXRmYWxsIFN0dW4gRWZmZWN0O2RyaXZlX2Rpcjo6T3Zlcmdyb3duIEVtYmxlbTtkcml2ZV9kaXI6OkNyZXNjZW50IEJvdyBBcnJvdyBvbmx5O2RyaXZlX2Rpcjo6QXN0cm9sb2dlciBTZXQ7ZHJpdmVfZGlyOjpNYXNrIG9mIE1ldGlyYTtkcml2ZV9kaXI6OlRodW5kZXIgR3JpZmZpbjsgMTIzfHx8