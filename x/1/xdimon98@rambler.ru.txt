limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$MGRhODBhYjI4ZDYxNmFkMe/.hMOtZHQZ7jKA28zvxpWMqdY6yhVcG 222||| 123:: Axe Mega-Kill;Bristleback Mega-Kills;Crystal Maiden Mega-Kills;Darkest Dungeon Mega-kills;Defense Grid Mega-Kill;Deus Ex Mega-Kills;Axe Announcer;Bristleback Announcer;Doom Mega-Kill Dota2Changer;Crystal Maiden Announcer;Dark Willow Announcer;Darkest Dungeon Announcer;Deus Ex Announcer;Fallout 4 Announcer;Dr. Kleiner Announcer;GLaDOS Mega-Kill;GLaDOS Mega-Kills;Fallout 4 Mega-Kills;Doom Mega-Kill Dota2Changer English;Trine Announcer;GLaDOS Announcer;Lina Announcer;Natures Prophet Announcer;Techies Announcer;The Pirate Capn Announcer;Juggernaut Announcer;Monkey King Announcer;Storm Spirit Announcer;Juggernaut Mega-Kill;Lina Mega-Kills;Meepo Mega-Kill;Monkey King Mega-Kills;Mega-Kills Diretide;Natures Prophet Mega-Kill;Techies Mega-Kill;The Pirate Capn Mega-Kills;Lord Blighty Announcer;Breaky Mega-Kill;Trine Mega-Kills;Storm Spirit Mega-Kills;Techies Mega-Kills;Antipode Courier (Angel only);Baby Roshan Prem;Brightskye;Brightskye Gem of Truesight;Chirpy;Crystal Basim;Dolfrat and Roshinante;Enduring War Dog;Golden Greevil;Herbal Boooofus;Krobeling Prem;Mighty Boar;Onibi Standart;Prismatic Drake;The Llama Llama;Redhoof;Smeevil;The Wonderously Encumbered Travelling Automaton;Drodo the Druffin;Filmtail;Grimwolf;Jin and Yin Fox Spirits Default;Lieutenant Squawkins;Murrissey the Smeevil;Speed Demon;Skip the Delivery Frog;Ramnaught of Underwool;Tickled Tegu;Trusty Mountain Yak;Vaal the Animated Construct;Virtus Werebear;Wyvern Hatchling;Garran Drywiz and Garactacus;Acid Hydra Cursor Pack;Aegis and Roshan St. Valentine Day;Emblem of the Crystal Echelon Aghanim Effect;TI-10 Aghanim Effect;Blink Dagger lvl 1 TI-6 Effect;TI-10 Bottle Effect;Reptilian Refuge Dire Creeps;Reptilian Refuge Radiant Creeps;Question mark Deny;TI-8 LVL UP Effect;TI-10 Eul Scepter Effect;TI-10 Force Staff Effect;Pedestal Jade;Pedestal The Fall Major 2016 Dire;Pedestal Ti-5 Radiant;Pedestal Ti-6 Radiant;Pedestal Feast of Abscession Red;Winter Scythe of Vyse Effect 2017;Lasthit Gold - New Bloom 2019;TI-7 Euls Scepter Of Divinity Effect;TI-8 Fountain lvl 1 Effect;Pedestal Radiant Rock;Pedestal The Fall Major 2016 Dire Wood;Pedestal Ti-6 Dire;Pedestal Feast of Abscession Green;Pedestal Bladeform Legacy;Iron Branch GG;TI-7 Level Up Effect;TI-9 Mekasm Effect;TI-10 Mekasm Effect;TI-7 Mekansm Effect;TI-8 Mekansm Effect;TI-10 Mjollnir Effect;TI-10 Phase Boots Effect;TI-8 Phase Boots Effect;TI-7 Phase Boots Effect;Pumpkin Trees UP;Mine Radius 702;River Vial Green;River Vial Boiling;River Vial None;Journey Roshan;Winter Roshan;TI-7 Shivas Guard Effect;TI-7 Empire TP effect;TI-10 Teleport lvl 2 Effect;TI-6 Digital Chaos TP Effect;TI-7 NP TP effect;River Vial Ice;River Vial STANDART;Roshan Halloween Skin;TI-10 Shivas Effect;TI-10 Radiance Effect;TI-7 DC TP effect;TI-6 Complexity Gaming TP Effect;Kappa Silence;TI-8 TP lvl 1 Effect;Holiday Radiant Tower;Winter Versus Screen;Brood Hunter HUD;Antiquity HUD;Curiosity HUD;Tombstone HUD;Elder Bark HUD;Promo trapper loadingscreen;Terrain - Overgrown Empire;Terrain - Spring;Terrain - Winter;Broodmother Anime Voice;Death Prophet Anime Voice;Enchantress Anime Voice;Luna Anime Voice;Naga Siren Anime Voice;Puck Anime Voice;Spectre Anime Voice;Vengeful Spirit Anime Voice;Winter Wyvern Anime Voice;Legion Commander ENG Arcane voice;Phantom Assasin ENG Arcane voice;Shadow Fiend ENG Arcane voice;Zeus ENG Arcane voice;Crystal Maiden Anime Voice;Medusa Anime Voice;Drow Ranger Anime Voice;Lina Anime Voice;Phantom Assassin Anime Voice;Queen of Pain Anime Voice;Templar Assassin Anime Voice;Windrunner Anime Voice;Juggernaunt Eng Arcana Voice;Legion Commander RU Arcane voice;Zeus RU Arcane voice;The International 2014 Music Pack V 2.1;The International 2017 Music Pack;Class Zero Moogle;MLG Tethered Sentinel;Watcher Below;Woody Ward;Watchful Sotdae;Black Pool Watcher;2012 Polycount Ward;A Dire Gaze;Aperture Science Wardcore;Arctic Watchtower;Augury*s Guardian;Bloodseeker Ward;Weather Spring;Weather Ash;Weather Moonbeam;Armor of the Equilibrium;Spires of the Prophet Foretold;Brumal Berserker Shoulder;Frost Djin Shoulder;Brumal Berserker Tail;Frost Djin Tail;Garb of the Prophet Foretold;Tail of the Equilibrium;Golden Basher of Mage Skulls;Lineage Blade of Broken Scale;Oathbound Defiant Off-Hand Blade;Rampant Outrage;Axe of Phractos;Heir of Terror Crown;Hood of Lucid Torment;Burning Iron;Thirst of Eztzhok Bundle Prem;Perceptive Spiderling;Algid Legacy;Seer of Infinity Space Eidolon;Battlefury;Iolo Wisp Style 1;Red Wisp;The Galactic IO;Barding of Chimeric Rapport;Blackened Edge of the Bladekeeper;Gauntlet of the Treacherous Demon;Shroud of the Shattered Sect;Mulctant Pall;Arms of Desolation;Heirlooms of Aeol Drias;Silent Edict;Tools of the Final Utterance;Small Bad To The Bone;Medium Bad To The Bone;Majesty Of The Colossus - Pebble;Form of the Fervid Monarch;Malefic Drakes Hood of the Crimson Witness;Golden Immortal Pantheon;Belt of the King Restored;Arsenal of the Demonic Vessel V 2.1;Enveloping Despair V 2.1;Compendium Rider of Avarice V 2.1;New Chieftain Style 1;Arabian Riders;The Obliterator of Magic;The Witch Hunter V 2.0;Time Wanderer;Black Orc Warboss V 2.0;Undefeated General;Marauder Chieftain of the Chaos Wastes;The Wild Tamer;Marauder of the Chaos Wastes;Harvests Hound;Hunt of the Weeping Beast;Werewolf to Bloodseeker;Kit of the First Hunt V 2.1;Tipsy Brawler;Icebrew Angler;Charge of the Wrathrunner;Warrior of Arena Set;Emerald Frenzy Set;Feast of the Gluttons Larder;Chaos Chosen V 3.0;Contested Fate;War Breakers Set;Champion of Discord V 3.1;Rose And The Beast;Arms of Burning Turmoil Set V 3.1;Savior for Jungles Honor;Cloak of the Fallen;Nomad of the Burning Decree;Artisan of Havoc V 3.0;Furnator Set;Royal Winterbloom;Astrologer Set;Manipulator of Warsituation;Insights of the Sapphire Shroud;Burglar of Wasp;Mischief of the Fae Forager;Whisperbloom Set;Smoky Dreamer;Rite of the Acolyte Priest V 3.0;Ghastly Matriarch V 3.0;Peacock Priest;Bloody Bride;Kirin Rider Set;Precision of the Stormshaper;Daemon Prince of Khorne V 2.1;Fires of Vashundol no effect V 2.1;Onyx Fume V 2.1;Blazing Oblivion V 3.0;Dragons Ascension V 3.0;The Blazing Superiority V 3.0;Algid Falcon;Eldwurms Touch;Goddess of Woods;The Jade General;Crimson Beast V 3.0;Chess Knight Set;Samurai Soul V 3.0;Warden of the Wyrmforge Shard;Blaze Armor V 2.1;Efrit Sultan Set;Order of the Wandering Flame V 2.1;Adage of the Smoldering Sage;Caerula Silva;Amberlight Raiment V 2.0;Rustic Finery V 2.0;The Hollow Set;The Corruption of Nezzureem;The Manipulator Set;Ghost Judger;Mystic of Celestial Art;Airborne Assault Craft;Flamed Falcon Patrol Set;Mechalodon Interdictor;Rakshasa Set;Samareen Sacrifice;The Baptism of Melting Fire;Reckless Vigor V 2.1;Cadenza Magic Master;Relics of Glorious Inspiration;The Path of Odocoeleus;Forgotten Renegade;Skyfire Apostate;Promise of the First Dawn;Seaborne Reprisal;Witch Hunter Templar;Pack-Ice Privateer;Blazing Empire;Desolate Conquest;Desolate Conquest Champion;Dark Forest Punisher;Forbidden Knowledge;Jiang Shis Revenge;Compendium Bloody Ripper;Bloody Ripper;Blazing Cosmos;Divine Flame V 2.0;Dragonfire V 2.0;Rage of the Dark Wood v 2.0;Armaments of the Night Grove V 2.1;Dark Moon Stalker V 2.1;Azure Constellation V 2.1;Hunter of Kings V 2.0;Might of the Galloping Avenger V 2.1;Rising Glory V 2.1;Imperial Envoy;Convalescing Empress;Serpent of the Emerald Sea V 3.0;Crystal Scavenger;Darkfall Warden no effects V 2.1;Dawn of the Moon V 2.1;Heiress of the Coastal Kingdom;Spirit of The Sacred Glove;Riptide Raider V 2.0;Masks of Mischief;Stellar Jade;Light of Eleanor Set;Stagheart Sovereign;The Dread Prophet;Fungal Lord Set;Master Necromancer V 2.1;The Murid Divine;Apostle of Decay V 2.1;Unfettered Malevolence;Cicatrix Regalia Black;Cicatrix Regalia Red;Antipodean Allies;Shoreline Sapper;The Grey Gallant;Heavenly Light;Auspicious Seadweller;Celestialus Floralas;Augury Prophet;Obsidian Guard V 2.1;Mandate of the Nameless;Herald of Measureless Ruin V 2.1;Pitfall Crusader;Tales of the Windward Rogue;Creeping Shadow;Dame de Carreau;Visions of the Lifted Veil;Bloodroot Guard;Warden for Phantom Assassin + WC 3 Sound V 2.0;Army Of The Vast Sea;Harsh Sojourn;Golden Nirvana;Nirvana Spiritual;Faeriesnap Spriteleaf;Alluring Mesmer;Essence of the Trickster;Arms of the Bogatyr;Butchers Wake;Surgical Precision;Scavenger of the Basilisk;Dapper Disguise;Narcissistic Leech;Researcher of Oblivion Magic;Raiments of Twilight Shade;Delightful Affliction;Dark Angel;Magister of the Narrow Fates;Maze Watcher Set;Eye of the Maze Keeper;Cunning Corsair;Monstrous Reprisal Valeera for Riki;Bladebreaker Order Valeera for Riki;Covert Saboteur Valeera for Riki;Standart Valeera for Riki;Ancient Magus Style 1;Diviners Embrace;Arcane Defiance;Majesty of the Forbidden Sands V 2.0;Ruler of the Frostbite Dunes;Sovereign of the Kray Legions 1st Style;Origins of the Shadow Creed;Umbral Descent;Stygian Maw;Eternal Harvest;Mystic Instruments of Tang-Ki V 2.0;Favors of the Shamanic Light V 2.0;Beacon of Cerulean Light 1 Style V 2.1;Blessing of the Crested Dawn V 2.1;Beacon of Cerulean Light 2 Style V 2.1;Bastion of the Lionsguard;Bestowments of the Centurion Vanguard;Shivshell Crawler;Kindred of the Umizar Crawler;Ocean Conqueror;Shooting Star;The Dwarf Engineer;Exact Marksman;Enduring Solitude;Flowering Shade V 2.0;Flowing Entropy V 2.0;Sentinels Shell;Bite of the Surging Wind;Elemental Imperator V 2.0;Elemental Realms V 2.0;Corridan Maestro V 2.0;Raikage Warrior V 2.0;Storm Dragon Potente;Sizzling Charge V 2.0;Blossoming Harmony V 2.0;Arms of Rising Fury;Armature of the Belligerent Ram Blue;Cyclopean Marauder;March of the Powderkeg Patrol;Hidden Flower;Chimes of the Temple;Clandestine Trail;Samurai Set;Lurkablo;Lumberclaw;Molten Destructor;Raucous Gatecrasher;Tree Punisher;USSR TINKER;Eldritch Gnarl;Frost Auburn Hideaway;Bark of the Ageless Witness Distinguished;Helm of the Dominator for Troll;Troll Warlord JahRakal;Barrier Rogue;Conscript of the Frost Brigade;Rift Champion;Dirgesworn Dynasty;Ferocious Heart;Omens Embrace;Dark Reclamation;Dreadhawk Armor;Corruption of the Virulent Krait;Barding of the Soul Keeper;Unblinking Eternity;Puppet Summoner;The Infernal Master;The Dusk Crawler Set;Ember Tipped Carapace Set;Array of Tranquility;Bindings of the Battleranger;Featherswing;Wings of Colorful Icecrystals;Chilling Feather;Bearer of the Arkturan Talon;Bone Collector;Aspect of the Year Beast;Grim Destiny;Old Zeus model; 123|||