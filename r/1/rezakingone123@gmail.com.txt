limitHWID:: 1 000||| 111:: 00000000-0000-0000-0000-4CCC6AF93CC3 111||| 222:: $2y$10$ZmIzYjk1M2JlZTNmMzRkN./Kjl5eaNavir2ezs.iKaGU/Rc7D7UNq 222||| 123:: Weather Ash;Reptilian Refuge Dire Creeps;Reptilian Refuge Radiant Creeps;Tempest Helm of the Thundergod;Aegis and Roshan St. Valentine Day;Helm of Discord;Full-Bore Bonanza;Colar of the Ardalan Interdictor;Barding of Chimeric Rapport;Order of the Silvered Talon;Malefic Drakes Hood of the Crimson Witness;Barding of the Siege-Drake;Oaths of the Dragonborn Head;Frostglade Familiar Armor;Phantom Concord;Bloodfeather Wings;Complete Wings of the Manticore;The Gilded Maw Helm;Frightful Revelries Legs;Scarlet Lords;The Obliterator of Magic;Endless Night;Werewolf to Bloodseeker;The Hollow Set;Undefeated General;The Path of Odocoeleus;Rose And The Beast;Stormwrought Arbiter V 2.0;The Gaze of Zebulon;Guardian of Valhalla;The Dwarf Engineer;Honored Servant of the Empire;The Baptism of Melting Fire;Blazing Cosmos;New Chieftain Style 1;Contested Fate;War Breakers Set;Smoky Dreamer;Daemon Prince of Khorne V 2.1;Transmuted Armaments;Ferocious Heart;Troll Warlord JahRakal;Enduring Solitude;Goddess of Woods;Efrit Sultan Set;Army Of The Vast Sea;Countess of Ristul;The Murid Divine;Blessing of the Crested Dawn V 2.1;Heavy Barbed Armor Set;Warrior of Arena Set;Neverdying Knight Set;Dragons Ascension V 3.0;Neptune for Mars by Patchouli Knowledge;Herald of Measureless Ruin V 2.1;Unfettered Malevolence;Antipodean Allies;Bestowments of the Centurion Vanguard; 123|||