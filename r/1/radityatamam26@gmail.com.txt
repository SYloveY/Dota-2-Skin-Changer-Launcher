bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRDM2RTM2N0QtODYyMi1CRDRCLUI4RjMtRUI0QzY4NkU1ODBBIDExMXx8fCAyMjI6OiAkMnkkMTAkWWpJek5HRmxZalUyT0RBeE5UUmtPT2EyVEJaUVZOZDFCY1AvbEJseXNxWlVTaHFlTXpDY1MgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6TW9ycGhsaW5nIEltbW9ydGFscyBNZWdhUGFjayBVUDtkcml2ZV9kaXI6OlNlYSBSYWtlcyBCcmlkbGU7ZHJpdmVfZGlyOjpTaGFkb3cgaW4gdGhlIERlZXAgQnJhY2Vycztkcml2ZV9kaXI6OlNoYWRvdyBpbiB0aGUgRGVlcCBCYWNrO2RyaXZlX2Rpcjo6V2luZHJhbmdlciBBcmNhbmEgc3R5bGUgMSAoQmx1ZSBCaXJkKSArIEZ1bGwgV1IgaW1tb3J0YWw7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBCZWx0IFVQO2RyaXZlX2Rpcjo6UGhhbnRvbSBBZHZlbnQgU2hvdWxkZXJzIFVQO2RyaXZlX2Rpcjo6UGhhbnRvbSBBZHZlbnQgVVA7ZHJpdmVfZGlyOjpGcmFjdGFsIEhvcm5zIG9mIElubmVyIEFieXNtIFVQO2RyaXZlX2Rpcjo6RXNzZW5jZSBPZiBUaGUgRGFyayBNb29uO2RyaXZlX2Rpcjo6R29sZGVuIFR3aWxpZ2h0IFNjaGlzbTtkcml2ZV9kaXI6OkdvbGRlbiBNb29uZmFsbCBQcmVtO2RyaXZlX2Rpcjo6Q29uY29yZCBSZXZlcnNpb24gVVA7ZHJpdmVfZGlyOjpDb25jb3JkIERvbWluaW9uO2RyaXZlX2Rpcjo6UGhhbnRvbSBDb25jb3JkIFByZW07ZHJpdmVfZGlyOjpTaGFkb3cgaW4gdGhlIERlZXAgQXJtb3I7ZHJpdmVfZGlyOjpLdW5nIGZ1IE1hc3Rlcjtkcml2ZV9kaXI6OkFwb2dlZSBvZiB0aGUgR3VhcmRpYW4gRmxhbWU7ZHJpdmVfZGlyOjpTcGFuIG9mIFNvcnJvdztkcml2ZV9kaXI6OlNjeXRoZXMgb2YgU29ycm93O2RyaXZlX2Rpcjo6U2hpcHMgaW4gdGhlIE5pZ2h0IENvbG9yIGZvciBUQjtkcml2ZV9kaXI6OkRLIFBlcnNvbmEgRGF2aW9uO2RyaXZlX2Rpcjo6RGF2aW9uKnMgRHJhZ29uIEhvbGQgUGF1bGRyb25zO2RyaXZlX2Rpcjo6SHVuZ2VyIG9mIHRoZSBIb3dsaW5nIFdpbGRzIEhlYWQ7ZHJpdmVfZGlyOjpIdW5nZXIgb2YgdGhlIEhvd2xpbmcgV2lsZHMgV2VhcG9uO2RyaXZlX2Rpcjo6U2hhZG93IE1hc3F1ZXJhZGUgUHJlbTtkcml2ZV9kaXI6Okh1bmdlciBvZiB0aGUgSG93bGluZyBXaWxkcyBBcm1zO2RyaXZlX2Rpcjo6SHVuZ2VyIG9mIHRoZSBIb3dsaW5nIFdpbGRzIE9mZi1IYW5kIFdlYXBvbjtkcml2ZV9kaXI6Okh1bmdlciBvZiB0aGUgSG93bGluZyBXaWxkcyBTaG91bGRlcjtkcml2ZV9kaXI6Okh1bmdlciBvZiB0aGUgSG93bGluZyBXaWxkcyBUYWlsO2RyaXZlX2Rpcjo6U2NvcmNoZWQgQW1iZXIgU3dvcmQ7ZHJpdmVfZGlyOjpDcmltc29uIEVkZ2Ugb2YgdGhlIExvc3QgT3JkZXI7ZHJpdmVfZGlyOjpBbnRpTWFnZSBGZW1hbGU7ZHJpdmVfZGlyOjpKYWdnZWQgSG9ub3IgTGVncztkcml2ZV9kaXI6OkphZ2dlZCBIb25vciBCcmFjZXI7ZHJpdmVfZGlyOjpKYWdnZWQgSG9ub3IgQmFubmVyO2RyaXZlX2Rpcjo6TWFuaWZvbGQgUGFyYWRveCBQQSBBcmNhbmEgU3R5bGUgMztkcml2ZV9kaXI6OkNvZGljaWwgb2YgdGhlIFZlaWxlZCBPbmVzO2RyaXZlX2Rpcjo6QXZvd2FuY2Ugb2YgdGhlIFZlaWxlZCBPbmVzO2RyaXZlX2Rpcjo6R290aGljIFdoaXNwZXIgQmVsdDtkcml2ZV9kaXI6OlJlYXBlcnMgV3JlYXRoO2RyaXZlX2Rpcjo6QXJtcyBvZiBaZWJ1bG9uO2RyaXZlX2Rpcjo6VGhlIEdvbGRlbiBCYXJiIG9mIFNrYWRpIFByZW07ZHJpdmVfZGlyOjpHb2xkZW4gRGFyayBNYXcgSW5oaWJpdG8gYW5kIEdvbGRlbiBQcm9mYW5lIFVuaW9uIGFuZCBHb2xkZW4gRHJlYWQgUmVxdWlzaXRpb24gTGlmZXN0ZWFsZXIgSW1tb3J0YWxzIE1lZ2FwYWNrO2RyaXZlX2Rpcjo6TWQ5519bnQgb2YgdGhlIFdpbmdlZCBTZW50aW5lbDtkcml2ZV9kaXI6OkNvbXBlbmRpdW0gVW1icmEgUmlkZXIgSGFpciBCbHVlIFYgMi4xO2RyaXZlX2Rpcjo6TW9ua2V5IEtpbmcgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6U2lsZW50IFdha2Ugb2YgdGhlIENyaW1zb24gV2l0bmVzcztkcml2ZV9kaXI6OkFybXMgb2YgdGhlIFdpbnRlcndvb2QgVmVzdHVyZTtkcml2ZV9kaXI6OkxvbmUgVHJhdmVsZXJzIEJlcmV0O2RyaXZlX2Rpcjo6Q29tcGxldGUgQWxnaWQgRmFsY29uIEdyZWF2ZXM7ZHJpdmVfZGlyOjpTaGFkb3dzIG9mIFJhdmVuc21hbmUgUXVpdmVyO2RyaXZlX2Rpcjo6R3VhcmRzIG9mIHRoZSBXaW5nZWQgQm9sdDtkcml2ZV9kaXI6OkluZG9taXRhYmxlIExlZ2FjeSAtIEFybXM7ZHJpdmVfZGlyOjpWaWdpbCBPZHlzc2V5O2RyaXZlX2Rpcjo6SW5kb21pdGFibGUgTGVnYWN5IC0gU2hvdWxkZXI7ZHJpdmVfZGlyOjpWaWdpbCBUcml1bXBoO2RyaXZlX2Rpcjo6SW5kb21pdGFibGUgTGVnYWN5IC0gQmVsdDtkcml2ZV9kaXI6OkFBTWVnYVBhY2s7ZHJpdmVfZGlyOjpBcG9jYWx5cHNlIFVuYm91bmQgLSBUYWlsO2RyaXZlX2Rpcjo6SWNlZmxpZ2h0IEVkaWZpY2U7ZHJpdmVfZGlyOjpHb2xkZW4gQnJhY2VycyBvZiBGb3Jsb3JuIFByZWNpcGljZTtkcml2ZV9kaXI6OkJvb2sgb2YgdGhlIFZpemllciBFeGlsZSBQcmVtO2RyaXZlX2Rpcjo6SGlkZGVuIFZlY3RvciAtIEJlbHQ7ZHJpdmVfZGlyOjpIaWRkZW4gVmVjdG9yIC0gQmxhZGU7ZHJpdmVfZGlyOjpIaWRkZW4gVmVjdG9yIC0gSGF0O2RyaXZlX2Rpcjo6SG9vZCBvZiB0aGUgVml6aWVyIEV4aWxlO2RyaXZlX2Rpcjo6S2VlcGVyIG9mIE9sb3hpY2FtKnMgR2xhc3MgUGF1bGRyb25zO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgVml6aWVyIEV4aWxlO2RyaXZlX2Rpcjo6Q2luZGVyIFNlbnNlaSBPZmYgSGFuZCBXZWFwb247ZHJpdmVfZGlyOjpDaW5kZXIgU2Vuc2VpIFdlYXBvbjtkcml2ZV9kaXI6OlNvdWwgRGlmZnVzZXIgUHJlbTtkcml2ZV9kaXI6OkhpZGRlbiBWZWN0b3IgLSBBcm1vcjtkcml2ZV9kaXI6Okp1Z2dlcm5hdXQgQXJjYW5hIEJsYWRlZm9ybSBMZWdhY3k7ZHJpdmVfZGlyOjpXcmFpdGhiaW5kZXI7ZHJpdmVfZGlyOjpUcmFpbCBvZiB0aGUgRmVhcmZ1bCBBcmlhOyAxMjN8fHw=