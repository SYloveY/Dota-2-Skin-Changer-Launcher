limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$ZGMwOGNlNTU0MDA5NjJkMemr3/Si0oxg58buv1lFUk26tYlQPNBiq 222||| 123:: Crucible of Rile;Mantle of the Cinder Baron Style 1;Bloodstone Blade Pack;Mask of the Bloodforge;Off-Hand Weapon of the Bloodforge;Weapon of the Bloodforge;Piston Impaler;Blastforge Exhaler;Infernal Chieftain of the Crimson Witness;Chaos Arbiter;First Light Head;First Light Weapon;First Light Arms;First Light Armor;Dark Realm Oracles Mask;Dark Realm Oracles Armor;Whispers of the Damned Head;Whispers of the Damned Wings;Kindred of the Iron Dragon V 3.0;Rapier of the Burning God;Rapiers of the Burning God V 3.1;Flourishing Lodestar Prem;Servants of Endless Stars;Magus Apex;Pyrexaec Floe;Barding of Chimeric Rapport;Edge of the Lost Order;Legacy of the Fallen Legion;Tormented Staff effect;Twilight Schism;Blade of Tears and Crown of Tears;Auspice of the Whyrlegyge Prem;Alluvion Prophecy;Sagas of the Cymurrin Sage;Silence of the Starweaver - Armor;Adornments of the Crystal Path;Golden Shards of Exile;Mask of the Confidant;Blissful Knave Coat;Rapier of the Windward Rogue;Golden Scavenging Guttleslug;Grand Abscession Hook Bundle;Eminence of Ristul Knife Attack;The Barren Vector;Arms of Desolation Prem;Souls Tyrant Head;Hush of Eternal Night;The Barb of Skadi;Iron Surge V 2.2;Savage Mettle;Blades of the Foulfell Corruptor Premium;Rectifier;Majesty Of The Colossus - Monolith;Majesty Of The Colossus - Cobble;Dark Meadow Massacre Armor;Dark Meadow Massacre Head;Dark Meadow Massacre Arms;Malefic Drakes Strike only Effect;Malefic Drakes Hood of the Crimson Witness;Sunken Snapper Wings;Lamp of the Spiteful Djinn;Bronzemonster of the Wailing Inferno;Crimson Cyrridae;Symbol of the King Restored;Mark of the Mistral Fiend V 2.1;Big Un V 3.0;Brumal Berserker;Anti-Mage Ultimate Red Dragon;Wicked Space Knight;Wrathful Annihilator;The Rowdy Firebrand;Marauder of the Chaos Wastes;Hunters Glory;Wyrmbrew Connoisseur;Pattern of the Silken Queen;Iceplain Ravager;Gryphon Rider Set;Barren Survivor V 2.0;Province of the Hunt Eternal;Soul of Steam;Sherman Maiden V 4.1;Psionic Sage;Forgotten Tactician;Saccharine Saboteur;Delights of Petaluna Pathfinder;Fatal Blossom V 3.0;Lightning Harbinger;Bringer of Troubles;Legacy of the Eldwurm Crest;Goddess of Woods;The Jade General;Anvil of the Earthwright;Harness of the Fissured Soul;Cinder Sensei;Headland Huntress;Abyssal Vortex;Misgivings of the Emerald Age;The Chained Scribe;Gunboat Hegemon V 3.0;Explosive Maniac;Steampowered Magic Set;Serpentine Guard;Bestowments of the Divine Anchor effects;Errant Soldier;Dark Forest Punisher;Ascendance of the Rime Lord 1st Style;Spirethorn Regalia V 2.0;Bewitching Flare V 2.0;Nyaruko for Lion by Patchouli Knowledge;War-Burrow Ravager;Riders Eclipse V 2.1;Hunter of Kings V 2.0;Erupting Wrath V 2.0;Fury of War God;Eye of the Beholder;Voodoo Meepo;Pride of the Wintermoon;Havoc of Dragon Palace V 2.0;Prismatic Grace;Allfather of Nature Set;Wrath of Ka V 2.1;Black Nihility;Shimmer of the Anointed;Tales of the Grey Wastes;Armor of the Stalwart Soul;Herald of Measureless Ruin V 2.1;Toll of the Fearful Aria;Vengeance of the Sunwarrior;Ire of Molten Rebirth;Reminiscence of Dreams;Jolly Reaver;Golden Nether Lords Regalia Set Prem;Magister of the Narrow Fates;Cunning Corsair;Rambling Fatebender;Sovereign of the Kray Legions 1st Style;Crown of The Nightworld;Eternal Harvest;Charmer of Firesnake;Gold Skymage;Bastion of the Lionsguard;Vantage of the Breach Warden;Dark Reef Escape V 2.1;Keen Machine;Soul Lilith;Ironbarde Charger;Virtuous Roar V 2.0;Armature of the Belligerent Ram Red;Powdersled Rookery;Concealed Raven;Foulfell Corruptor;Lurkablo;Trek of the Trailblazer;Tinker Scarecrow Set;Bark of the Ageless Witness Distinguished;Plunder of the Savage Monger;Brawler of the Glacier Sea V 3.0;Atrocities of the Abyssal Scourge;Roshan Hunters Set;Blessing of the Crested Umbra;Molokau Stalker;Barding of the Soul Keeper;Dread Compact Style 2;The Dusk Crawler Set;Bindings of the Battleranger Chaotic Style;Outlandish Gourmet;Grim Destiny;Emperor Of The Clergy; 123|||