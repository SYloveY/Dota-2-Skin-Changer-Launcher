bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDI1OUExQTgtRUUzRS0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIDExMXx8fCAyMjI6OiAkMnkkMTAkTjJVMFpUVm1NbUV3WkdSak5EQTBOLkZzZHNPcnY4LjdLMDQyMEJIOXlmTjN0NnJQWFIuL20gMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6Q29sbGVjdG9ycyBCYWJ5IFJvc2hhbiAyMDE4O2RyaXZlX2Rpcjo6RGVjbGFyYXRpb24gb2YgdGhlIERpdmluZSBMaWdodCBSYWRpYW50IFRvd2Vycztkcml2ZV9kaXI6OkRlY2xhcmF0aW9uIG9mIHRoZSBEaXZpbmUgU2hhZG93IERpcmUgVG93ZXJzO2RyaXZlX2Rpcjo6VGVycmFpbiAtIFNwcmluZztkcml2ZV9kaXI6OkhhaXIgb2YgdGhlIFN1cnZpdm9yO2RyaXZlX2Rpcjo6V2VhcG9uIG9mIHRoZSBGb3Jnb3R0ZW4gUGxhbmUgO2RyaXZlX2Rpcjo6QXhlIGZ1bGwgSW1tb3J0YWxzIE1lZ2FwYWNrO2RyaXZlX2Rpcjo6TWFuaXB1bGF0b3Igb2YgV2Fyc2l0dWF0aW9uO2RyaXZlX2Rpcjo6QnJhY2VycyBvZiBGb3Jsb3JuIFByZWNpcGljZTtkcml2ZV9kaXI6OlByaW1vcmRpYWwgQ29uc2VydmF0b3I7ZHJpdmVfZGlyOjpCcmFjZXJzIG9mIEFlb25zO2RyaXZlX2Rpcjo6RmFjZWxlc3MgTWFkbmVzcztkcml2ZV9kaXI6Ok1hY2Ugb2YgQWVvbnM7ZHJpdmVfZGlyOjpPZmYtSGFuZCBXZWFwb24gb2YgdGhlIEZvcmdvdHRlbiBQbGFuZTtkcml2ZV9kaXI6OkNsb3RoIG9mIHRoZSBDbGVyZ3kgQXNjZXRpYztkcml2ZV9kaXI6Ok1hcmsgb2YgdGhlIE1pc3RyYWwgRmllbmQgViAyLjE7ZHJpdmVfZGlyOjpMZWdpb24gQ29tbWFuZGVyIEFyY2FuYSBVUDtkcml2ZV9kaXI6OkhlbGwtU3BhciBBbmF0aGVtYSBPYnNpZGlhbiBCbGlnaHQ7ZHJpdmVfZGlyOjpIb3JucyBvZiB0aGUgQmV0cmF5ZXI7ZHJpdmVfZGlyOjpGaW4gS2luZ3MgQ2hhcm0gb2YgRW1pbmVudCBSZXZpdmFsIEV4Y2VwdGlvbmFsO2RyaXZlX2Rpcjo6TXVsY3RhbnQgUGFsbDtkcml2ZV9kaXI6Ok1hbmlmb2xkIFBhcmFkb3ggUEEgQXJjYW5hIFN0eWxlIDE7ZHJpdmVfZGlyOjpIb29kIG9mIHRoZSBDcmVlcGluZyBTaGFkb3c7ZHJpdmVfZGlyOjpCZWx0IG9mIHRoZSBDcmVlcGluZyBTaGFkb3c7ZHJpdmVfZGlyOjpTaGF3bCBvZiB0aGUgQ3JlZXBpbmcgU2hhZG93O2RyaXZlX2Rpcjo6VmVuZ2VhbmNlIG9mIHRoZSBTdW53YXJyaW9yO2RyaXZlX2Rpcjo6R29sZGVuIEJsb29kZmVhdGhlciBGZWFzdDtkcml2ZV9kaXI6OlNsYXJrIE1lZ2FQYWNrIE5ldztkcml2ZV9kaXI6Okh5ZHJha2FuIExhdGNoO2RyaXZlX2Rpcjo6QnJhY2VyIG9mIFNoYWRvd3Bhc3M7ZHJpdmVfZGlyOjpTcGlyaXQgQnJlYWtlciBNZWdhUGFjaztkcml2ZV9kaXI6Oklyb24gU3VyZ2U7ZHJpdmVfZGlyOjpXcmFpdGggS2luZyBBcmNhbmEgTWVnYVBhY2s7ZHJpdmVfZGlyOjpXaW5kcmFuZ2VyIEFyY2FuYSBzdHlsZSAxIChCbHVlIEJpcmQpICsgRnVsbCBXUiBpbW1vcnRhbDtkcml2ZV9kaXI6OkFieXNzYWwgQ3VpcmFzcztkcml2ZV9kaXI6Ok5pZ2h0IFN0YWxrZXIgSW1tb3J0YWwgYW5kIFJlYXBlciBLaXNpbGV2IE1vZE1ha2VyIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6S3VuZyBmdSBNYXN0ZXI7ZHJpdmVfZGlyOjpBcG9nZWUgb2YgdGhlIEd1YXJkaWFuIEZsYW1lO2RyaXZlX2Rpcjo6SnVnZ2VybmF1dCBBcmNhbmEgQmxhZGVmb3JtIExlZ2FjeTtkcml2ZV9kaXI6OlNlcnBlbnRpbmUgR3VhcmQgV2FyZDtkcml2ZV9kaXI6OkphZ2dlZCBIb25vciBCcmFjZXI7ZHJpdmVfZGlyOjpKYWdnZWQgSG9ub3IgQmFubmVyO2RyaXZlX2Rpcjo6SmFnZ2VkIEhvbm9yIExlZ3M7ZHJpdmVfZGlyOjpDcmltc29uIEVkZ2Ugb2YgdGhlIExvc3QgT3JkZXI7ZHJpdmVfZGlyOjpFc3NlbmNlIE9mIFRoZSBEYXJrIE1vb247ZHJpdmVfZGlyOjpUd2lsaWdodCBTY2hpc207ZHJpdmVfZGlyOjpNb29uZmFsbCBQcmVtO2RyaXZlX2Rpcjo6Q3VyaWQ5519cyBTbmFwdHJhcDtkcml2ZV9kaXI6OldlYXRoZXIgTW9vbmJlYW07ZHJpdmVfZGlyOjpCcmFjZXJzIGFuZCBTaG91bGRlcnMgb2YgdGhlIFN1cnZpdm9yO2RyaXZlX2Rpcjo6T3JpZ2lucyBvZiBGYWl0aCBQcmVtO2RyaXZlX2Rpcjo6U2hhZG93IGluIHRoZSBEZWVwIEFybW9yO2RyaXZlX2Rpcjo6U291bCBEaWZmdXNlciBQcmVtO2RyaXZlX2Rpcjo6R3JlYXQgU2FnZXMgUmVja29uaW5nIFJ1bWJsZSBpbiB0aGUgRGVlcDtkcml2ZV9kaXI6OlN0YWZmIG9mIEd1bi1ZdTtkcml2ZV9kaXI6OkJvdW50eSBIdW50ZXIgTWFuaWFjIFNldDtkcml2ZV9kaXI6OkRvdGEgMiBDaGFuZ2VyIEVkaXRpb24gSHVudGVycyBIb2FyZCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO2RyaXZlX2Rpcjo6R29sZCBDb2xvciBmb3IgVEI7ZHJpdmVfZGlyOjpTY3l0aGVzIG9mIFNvcnJvdztkcml2ZV9kaXI6OkZyYWN0YWwgSG9ybnMgb2YgSW5uZXIgQWJ5c20gVVA7ZHJpdmVfZGlyOjpEZW1vbiBGb3JtIG9mIHRoZSBGb3VsZmVsbCBDb3JydXB0b3IgVVA7ZHJpdmVfZGlyOjpIdW50ZXIgb2YgdGhlIENyeXN0YWwgRHJpZnQ7ZHJpdmVfZGlyOjpNYW5lIG9mIHRoZSBTdW53YXJyaW9yIFVQO2RyaXZlX2Rpcjo6Q29uY29yZCBEb21pbmlvbjtkcml2ZV9kaXI6OlBoYW50b20gQ29uY29yZDtkcml2ZV9kaXI6OlNrYWRpIE1lZHVzYSBWIDIuMDtkcml2ZV9kaXI6OkxlZ2FjeSBvZiB0aGUgRmFsbGVuIExlZ2lvbiBTdHlsZSAyO2RyaXZlX2Rpcjo6SmFraXJvIEltbW9ydGFsIFdpbmdzO2RyaXZlX2Rpcjo6SmFraXJvIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6TGlmZXN0ZWFsZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpEcmVhZCBDb21wYWN0O2RyaXZlX2Rpcjo6QmVob2xkZW4gb2YgdGhlIEJhbmlzaGVkIE9uZXMgLSBHb2xlbTtkcml2ZV9kaXI6OkhvcnJvciBmcm9tIHRoZSBEZWVwIEFybXM7ZHJpdmVfZGlyOjpIb3Jyb3IgZnJvbSB0aGUgRGVlcCBCZWx0O2RyaXZlX2Rpcjo6U3Vua2VuIEZyb3N0c2hhcmQ7ZHJpdmVfZGlyOjpBcXVlbWVyYWxkIEJsYWRlO2RyaXZlX2Rpcjo6VmlwZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpQYXJhZGlzZSBCaXJkIFN0aW5nO2RyaXZlX2Rpcjo6T3V0d29ybGQgRGV2b3V2ZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpBc3RyYWwgRHJpZnQ7ZHJpdmVfZGlyOjpTaGFyZHMgb2YgRXhpbGU7ZHJpdmVfZGlyOjpFcnVwdGluZyBXcmF0aCBWIDIuMDtkcml2ZV9kaXI6OlBoYW50b20gQXNjZW5zaW9uIFNob3VsZGVycztkcml2ZV9kaXI6OlNvdWwgb2YgdGhlIFNsYXllciBQcmVtO2RyaXZlX2Rpcjo6V3lybXdyb3VnaHQgRmxhcmU7ZHJpdmVfZGlyOjpHbG9yeSBvZiB0aGUgRWxkZXJmbGFtZSAtIEJlbHQ7ZHJpdmVfZGlyOjpSb3lhbCBEZWNyZWUgV2hpcCBBdHRhY2s7ZHJpdmVfZGlyOjpDcm93biBvZiB0aGUgUm95YWwgRGVjcmVlO2RyaXZlX2Rpcjo6UmFpbWVudHMgb2YgdGhlIEVtaW5lbmNlIG9mIFJpc3R1bDtkcml2ZV9kaXI6Ok1hbmRhdGUgb2YgdGhlIFN0b3JtYm9ybjtkcml2ZV9kaXI6OlRoZSBMaWdodG5pbmcgT3JjaGlkO2RyaXZlX2Rpcjo6VGVtcGVzdCBIZWxtIG9mIHRoZSBUaHVuZGVyZ29kICsgUmlnaHRlb3VzIFRodW5kZXJib2x0O2RyaXZlX2Rpcjo6QXJtb3Igb2YgU2l6emxpbmcgQ2hhcmdlO2RyaXZlX2Rpcjo6RmxvY2toZWFydHMgR2FtYmxlIFJlc3BsZW5kZW50IEZpcmVsYXJrO2RyaXZlX2Rpcjo6QmFjayBCdW95IG9mIHRoZSBTaG9yZWxpbmUgU2FwcGVyO2RyaXZlX2Rpcjo6R2ltbGVrIERlY2FudGVyO2RyaXZlX2Rpcjo6SmV3ZWwgb2YgQWVvbnMgUHJlbTtkcml2ZV9kaXI6OlRyaWJhbCBUZXJyb3IgViAzLjA7ZHJpdmVfZGlyOjpNYXcgb2YgRXp0emhvaztkcml2ZV9kaXI6OlRoaXJzdCBvZiBFenR6aG9rIC0gT2ZmLUhhbmQ7ZHJpdmVfZGlyOjpUaGlyc3Qgb2YgRXp0emhvayBCbGFkZTtkcml2ZV9kaXI6OlBoYW50b20gQXNjZW5zaW9uIEJlbHQ7ZHJpdmVfZGlyOjpQaGFudG9tIEFzY2Vuc2lvbjtkcml2ZV9kaXI6OlNvdWwgRGlmZnVzZXIgViAyLjE7ZHJpdmVfZGlyOjpEb29tIEltbW9ydGFscyBNZWdhUGFjaztkcml2ZV9kaXI6OlJ1bGVyIG9mIHRoZSBGcm9zdGJpdGUgRHVuZXM7ZHJpdmVfZGlyOjpUaGUgQmFycmVuIENyb3duO2RyaXZlX2Rpcjo6RWxkZXIgQmFyayBIVUQ7ZHJpdmVfZGlyOjpLZWVwZXIgb2YgT2xveGljYW0qcyBHbGFzcyBIZWFkO2RyaXZlX2Rpcjo6RmlzdHMgb2YgQXhlIFVubGVhc2hlZDtkcml2ZV9kaXI6OlRoZSBCYXJyZW4gVmVjdG9yO2RyaXZlX2Rpcjo6UmVwdGlsaWFuIFJlZnVnZSBEaXJlIENyZWVwcztkcml2ZV9kaXI6OlJlcHRpbGlhbiBSZWZ1Z2UgUmFkaWFudCBDcmVlcHM7IDEyM3x8fA==