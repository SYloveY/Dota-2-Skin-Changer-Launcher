bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDMwMDAyMDAtMDQwMC0wNTAwLTAwMDYtMDAwNzAwMDgwMDA5IDExMXx8fCAyMjI6OiBmYTU4NWQ4OWM4NTFkZDMzOGE3MGRjZjUzNWFhMmE5MmZlZTc4MzZkZDZhZmYxMjI2NTgzZTg4ZTA5OTYyOTNmMTZiYzAwOWM2NTI4MjZlMGZjNWM3MDY2OTVhMDNjZGRjZTM3MmYxMzllZmY0ZDEzOTU5ZGE2ZjFmNWQzZWFiZSAyMjJ8fHwgMTIzOjogUnViaWNrIEN1cnNlIC0gRXhvY2lyc207T3Zlcmdyb3duIEVtYmxlbSBBZ2hhbmltIEVmZmVjdDtXZWF0aGVyIFNub3c7U291bCBEaWZmdXNlciBWIDIuMTtCbGFkZXMgb2YgdGhlIEZvdWxmZWxsIENvcnJ1cHRvciBQcmVtaXVtO1dpbmdzIG9mIHRoZSBGb3VsZmVsbCBDb3JydXB0b3IgUHJlbWl1bTtQYXVsZHJvbnMgb2YgdGhlIFdhcnRvcm4gSGVhdmVucztTdGFmZiBvZiBQZXJwbGV4IFByZW07QXhpYSBvZiBNZXRpcmE7Qmxvb2RmZWF0aGVyIFdpbmdzIFByZW07U3VsbGVuIFJhbXBhcnQ7R29sZGVuIFN1bGxlbiBIb2xsb3c7U3VsbGVuIEhhcnZlc3Q7TWFzayBvZiB0aGUgTWFudGEgTWFyYXVkZXI7U291bCBEaWZmdXNlciBQcmVtO1N3aW5lIG9mIHRoZSBTdW5rZW4gR2FsbGV5IFByZW07TG9yZCBvZiBMdW1pbmFyaWVzIEVpZG9sb25zO0h1bnRlcnMgSG9hcmQ7SGVhcnRsZXNzIEh1bnQgLSBIZWFkO01hY2Ugb2YgQWVvbnMgUHJlbTtWaWdpbCBUcml1bXBoO0FuY2llbnQgSW5oZXJpdGFuY2UgLSBTaG91bGRlcjtQbGFuZXRmYWxsO01vdW50IG9mIHRoZSBXaW5nZWQgU2VudGluZWw7TWFzayBvZiBNZXRpcmE7UHVsc2FyIFJlbW5hbnQgUHJlbTtJY2VmbGlnaHQgRWRpZmljZTtFbWJsZW0gb2YgRGl2aW5pdHkgQWdoYW5pbSBFZmZlY3Q7RmxvY2toZWFydHMgR2FtYmxlIFJlc3BsZW5kZW50IEZpcmVsYXJrO0VsaXhpciBvZiBEcmFnb25zIEJyZWF0aCBQcmVtO09yaWdpbiBvZiB0aGUgVW5tYWtpbmc7VG9wIEhhdCBvZiB0aGUgRGFya2JyZXcgRW5mb3JjZXI7U21va2VzdGFja3Mgb2YgdGhlIEJvaWxlcnBsYXRlIEJydWlzZXI7Qmxvc3NvbSBvZiB0aGUgTWVycnkgV2FuZGVyZXI7Q2FwZSBvZiB0aGUgSW1wb3NzaWJsZSBSZWFsbTtQcml6ZSBvZiB0aGUgU2FsdHdvcm4gTWFyaW5lcjtMZXZpYXRoYW4gV2hhbGUgQmxhZGUgb2YgRW1pbmVudCBSZXZpdmFsIEV4Y2VwdGlvbmFsO0RhcmsgQXJ0aXN0cnkgVGhyb3diYWNrO0JlbmV2b2xlbnQgQ29tcGFuaW9uIFYgMi4wO0JsYWRlcyBvZiBQcmlzbWF0aWMgR3JhY2U7SHVuZ2VyIG9mIHRoZSBIb3dsaW5nIFdpbGRzIFdlYXBvbjtEZXNlcnQgQnVybiBTYWRkbGU7UGFjayBvZiB0aGUgQXJkYWxhbiBJbnRlcmRpY3RvcjtTa2l0dGVyaW5nIERlc29sYXRpb24gUHJlbTtIaWRkZW4gVmVjdG9yIC0gQmVsdDtIaWRkZW4gVmVjdG9yIC0gSGF0O0hpZGRlbiBWZWN0b3IgLSBBcm1vcjtBcG9nZWUgb2YgdGhlIEd1YXJkaWFuIEZsYW1lO01hc3RlciBvZiB0aGUgU2VhcmluZyBQYXRoIEhlYWQ7U2hhZG93IGluIHRoZSBEZWVwIEhlbG07U2hhZG93IGluIHRoZSBEZWVwIEFybW9yO1BhbGUgRWRnZSBQcmVtO1JveWFsIERlY3JlZSBXaGlwIEF0dGFjaztNYW50bGUgb2YgdGhlIFdoaXNwZXJlZCBCb25kO0hlYWRkcmVzcyBvZiB0aGUgTG95YWwgRm9sZDtTdGV3YXJkIG9mIHRoZSBGb3JiaWRkZW4gQ2hhbWJlciBBcm1vcjtBcmNhbmEgQ3J5c3RhbCBNYWlkZW4gRnJvc3QgQXZhbGFuY2hlO0FuY2llbnQgSW5oZXJpdGFuY2UgLSBXZWFwb247QW5jaWVudCBJbmhlcml0YW5jZSAtIEJlbHQ7UGhhbnRvbSBBZHZlbnQgQmVsdCBVUDtXZWF0aGVyIFJhaW47Q29kaWNpbCBvZiB0aGUgVmVpbGVkIE9uZXM7Rmxvb2RtYXNrO0NsYWRkaXNoIEN1ZGdlbCBQcmVtO0hvcnJvciBmcm9tIHRoZSBEZWVwIEFybXM7RW5pZ21hdGljIEVtYmxlbSBvZiB0aGUgRGlyZXRpZGUgLSBHcmVlbjtHb2xkZW4gU2lsZW50IFdha2U7SGFpciBvZiB0aGUgU3Vydml2b3I7TGVnaW9uIENvbW1hbmRlciBBcmNhbmEgVVA7TGVnYWN5IG9mIHRoZSBGYWxsZW4gTGVnaW9uIFN0eWxlIDEgTkVXO0dvbGRlbiBTaGFyZHMgb2YgRXhpbGUgUHJlbTtBc3RyYWwgRHJpZnQ7QXZvd2FuY2Ugb2YgdGhlIFZlaWxlZCBPbmVzO01hbmlmb2xkIFBhcmFkb3ggUEEgQXJjYW5hIFN0eWxlIDE7UGF1bGRyb25zIG9mIEV0ZXJuYWwgSGFydmVzdCBQcmVtO0hvcm5zIG9mIEV0ZXJuYWwgSGFydmVzdCBQcmVtO0dvbGRlbiBNYW5kYXRlIG9mIHRoZSBTdG9ybWJvcm47R2FyYiBvZiB0aGUgQ29ycmlkYW4gTWFlc3RybztNb29uZmFsbCBQcmVtO0dvbGRlbiBUd2lsaWdodCBTY2hpc207R29sZGVuIEJyYWNlcnMgb2YgRm9ybG9ybiBQcmVjaXBpY2U7SnVnZ2VybmF1dCBBcmNhbmEgQmxhZGVmb3JtIExlZ2FjeTtLYW50dXNhIHRoZSBTY3JpcHQgU3dvcmQgViAzLjE7V3JhaXRoYmluZGVyO0QyQ0wgU2Vhc29uIDUgSFVEO1JpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrO1N1Ym1lcmdlZCBIYXphcmQ7Rmxvd2VyIEZsYW1lIExpbmEgViAzLjA7QmFieSBUb3kgUHVkZ2UgUGVyc29uYTtCZWFyaW5nIG9mIHRoZSBLaW5nIFJlc3RvcmVkO0VuaWdtYSBNZWdhUGFjaztBeGUgZnVsbCBJbW1vcnRhbHMgTWVnYXBhY2s7SWNlIExpbmEgUHJlbWl1bTtOb2JsZSBGcm9zdGhlYXJ0O0FuY2llbnQgTWFndXMgU3R5bGUgMztXaW5kcmFuZ2VyIEFyY2FuYSBzdHlsZSAyICsgV1IgaW1tb3J0YWw7TWFycyBUSTEwIENvbGxlY3RvcnMgQ2FjaGUgTWVnYVBhY2s7V3JhaXRoIEtpbmcgQXJjYW5hIE1lZ2FQYWNrO1Vyc2EgSW1tb3J0YWxzIE1lZ2FQYWNrO1NpbGVuY2VyIFRJMTAgQ29sbGVjdG9ycyBDYWNoZSBNZWdhUGFjaztDaW5kZXIgU2Vuc2VpO1BsZWRnZSBvZiB0aGUgRHJhZ29ucyBEaXNjaXBsZSBhbmQgR29sZGVuIEJhc2hlciBCbGFkZXMgYW5kIEdvbGRlbiBPcmlnaW5zIG9mIEZhaXRoIE1lZ2FQYWNrO0FudGlNYWdlIFJFRCBNZWdhUGFjaztOZW9uIFNwaXJpdCAtIEphZGUgU3R5bGUgMTsgMTIzfHx8