limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$ZWNkMDRhOGZkMTcxNjhkYuj52/T88DXYi1UWUp2ouFk/.oUAdVL.2 222||| 123:: drive_dir::Miki Sayaka for Abbadon by Patchouli Knowledge;drive_dir::Raid of the Northern Exiles;drive_dir::Shatterblast Crown;drive_dir::Ancient Apparition China Model;drive_dir::Garb of the Prophet Foretold;drive_dir::Armor of the Equilibrium;drive_dir::Spires of the Prophet Foretold;drive_dir::Tail of the Equilibrium;drive_dir::SfS Demon Hunter For Antimage;drive_dir::Harvested Shoulders;drive_dir::Komeiji Koishi 2 for Bane by Patchouli Knowledge;drive_dir::Strygwyr Bloodseeker;drive_dir::Brewmaster from HOTS;drive_dir::Desert Broodmother;drive_dir::The Hounds of Chaos V 3.1;drive_dir::Dark Ruin Set V 3.1;drive_dir::Kaname Madoka for Clinkz by Patchouli Knowledge;drive_dir::Nuclear Clockwerk;drive_dir::Sherman Maiden V 4.1;drive_dir::Yagokoro Eirin for Dazzle by Patchouli Knowledge;drive_dir::Saigyouji Yoyoko for DP by Patchouli Knowledge;drive_dir::Diablo-Doom;drive_dir::Heavenly Sword Doom V 3.0;drive_dir::Emerald Dragon;drive_dir::Lady Sylvanas for Drow Ranger V 3.0;drive_dir::Chloe von Einzbern for Earth Spirit by Patchouli Knowledge;drive_dir::Hinanawi Tenshi for Earthshaker by Patchouli Knowledge;drive_dir::Order of the Wandering Flame V 2.1;drive_dir::Fires of the Volcanic Guard;drive_dir::Cinder Sensei;drive_dir::Ancient Mechanism;drive_dir::Forged in Demons Blood Set;drive_dir::The Rowdy Firebrand;drive_dir::The Wild Tamer;drive_dir::Hunters Glory;drive_dir::Lost Ranger;drive_dir::Iceplain Ravager;drive_dir::Humble Knight;drive_dir::Forgotten Tactician;drive_dir::Saccharine Saboteur;drive_dir::Lightning Harbinger;drive_dir::The Sheep Set;drive_dir::Abyssal Vortex;drive_dir::Exponent of the Endless Stars;drive_dir::Misgivings of the Emerald Age;drive_dir::Tengu Guardian Set;drive_dir::Allied Commander Set;drive_dir::Cthugha for Huskar by Patchouli Knowledge;drive_dir::Soup for Sluts hair for Invoker;drive_dir::Covenant of the Depths;drive_dir::The Galactic IO;drive_dir::Datastar Progenitor (Alter Arcana);drive_dir::Pyrexaec Floe;drive_dir::Barding of Chimeric Rapport;drive_dir::Samurai of Wind V 3.0;drive_dir::Lollipop Juggernaut V 3.0;drive_dir::Susano Os Descendant;drive_dir::Wisdom of the Midnight Sun;drive_dir::Bestowments of the Divine Anchor effects;drive_dir::Divine Anchor Style 2;drive_dir::The Crimson Pirate;drive_dir::Akamanah for Legion Commander V 3.1;drive_dir::Errant Soldier;drive_dir::Lord of Chronoptic Synthesis;drive_dir::Ascendance of the Rime Lord 1st Style;drive_dir::Bonds of Madness Set Style 1;drive_dir::Ice Lina 2nd Style;drive_dir::Goddess of the Underworld;drive_dir::Nyaruko for Lion by Patchouli Knowledge;drive_dir::Lone Druid Winnie Pooh V 2.0;drive_dir::Black Ice Scourge;drive_dir::Albino Lycan;drive_dir::Seismic Berserker;drive_dir::Neptune for Mars by Patchouli Knowledge;drive_dir::Eye of the Beholder;drive_dir::Xcalibur Set for Meepo;drive_dir::Spirit of The Sacred Glove;drive_dir::Havoc of Dragon Palace V 2.0;drive_dir::Blade of Tears and Crown of Tears;drive_dir::Izayoi Miku for Naga Siren by Patchouli Knowledge;drive_dir::Cute Cactus Set;drive_dir::Death Necrolight V 3.2;drive_dir::Remilia Scarlet for NS by Patchouli Knowledge;drive_dir::Cursed Zealot;drive_dir::Higher Ogre Magi;drive_dir::Auspice of the Whyrlegyge Prem;drive_dir::Guardian of Metal;drive_dir::Red Omni;drive_dir::Holy Inquisitor;drive_dir::Nebulas Walker;drive_dir::Herald of Measureless Ruin V 2.1;drive_dir::Tales of the Windward Rogue;drive_dir::Warden for Phantom Assassin + WC 3 Sound V 2.0;drive_dir::Vengeance of the Sunwarrior;drive_dir::Ire of Molten Rebirth;drive_dir::LeBlanc for Puck;drive_dir::GopoPudge;drive_dir::Demonic Pugna V 3.0;drive_dir::Royal Decree Knife Attack;drive_dir::Saint Razor;drive_dir::Golden Edict of Shadows Valeera to Riki;drive_dir::Cunning Corsair Valeera for Riki;drive_dir::Valeera Russian Voice;drive_dir::Ancient Magus Style 2;drive_dir::Steel King;drive_dir::Crown of The Nightworld;drive_dir::Souls Tyrant Head;drive_dir::Toxic SF;drive_dir::Old Model Shadow Fiend;drive_dir::Toxic Death Eater;drive_dir::Charmer of Firesnake;drive_dir::Tools of the Final Utterance;drive_dir::Hush of Eternal Night;drive_dir::Gold Skymage;drive_dir::Bastion of the Lionsguard;drive_dir::Yaya for Slardar by Patchouli Knowledge;drive_dir::Dark Reef Escape V 2.1;drive_dir::Hinterland Stalker;drive_dir::Golden Full-Bore Bonanza;drive_dir::Tomoe Mami for Sniper by Patchouli Knowledge;drive_dir::Dragon Lore AWP;drive_dir::Phantom Advent UP;drive_dir::Aurantiaco militis;drive_dir::Ironbarde Charger;drive_dir::Old Storm Spirit;drive_dir::Powdersled Rookery;drive_dir::Concealed Raven;drive_dir::Sun Assasin V 3.0;drive_dir::Pink Color for TB;drive_dir::Illidan RUS sounds;drive_dir::Illidan Stormrage for Terrorblade V 2.0;drive_dir::Tidehunter Killer;drive_dir::Trek of the Trailblazer;drive_dir::Izayoi Sakuya for Tinker by Patchouli Knowledge;drive_dir::Majesty Of The Colossus - Monolith;drive_dir::Bark of the Ageless Witness Distinguished;drive_dir::Frost Auburn Hideaway;drive_dir::Hakurei Reimu for Troll Warlord by Patchouli Knowledge;drive_dir::Zuljin for Troll Warlord;drive_dir::Arctic fang;drive_dir::Rift Champion;drive_dir::Abyssal Cuirass;drive_dir::Dark Meadow Massacre Armor;drive_dir::Dark Meadow Massacre Head;drive_dir::Roshan Hunters Set;drive_dir::Shirai Kuroko for Vengeful Spirit by Patchouli Knowledge;drive_dir::Ferocious Toxicant;drive_dir::Corruption of the Virulent Krait;drive_dir::Prinz Eugen for Viper by Patchouli Knowledge;drive_dir::Chill of the Keepers Gaze;drive_dir::Unblinking Eternity;drive_dir::Underworld Dog;drive_dir::Bronzemonster of the Wailing Inferno;drive_dir::Dread Compact Style 2;drive_dir::Tokisaki Kurumi for Weaver by Patchouli Knowledge;drive_dir::Pixel Windrunner;drive_dir::Wings of Colorful Icecrystals;drive_dir::Outlandish Gourmet;drive_dir::Itsuka Kotori for WK by Patchouli Knowledge;drive_dir::Sexy Woman Mega-Kill;drive_dir::HEY TEITOKU Annoncer Mega-Kill;drive_dir::Gachi Mega-Kills;drive_dir::Rem Mega-Kills;drive_dir::Chitoge Mega-Kills;drive_dir::Katou Mega-Kills;drive_dir::Kongou Mega-Kills;drive_dir::Rise Kujikawa Announcer (Jap);drive_dir::Darkest Dungeon Mega-kills;drive_dir::Trine Mega-Kills;drive_dir::Fallout 4 Mega-Kills;drive_dir::Trusty Mountain Yak;drive_dir::Wyvern Hatchling;drive_dir::DAC 2015 Chaos Knight Cursor Pack;drive_dir::Custom Dashboard 104;drive_dir::Custom Dashboard 13;drive_dir::Custom Dashboard 126;drive_dir::Custom Dashboard 131;drive_dir::Custom Dashboard 134;drive_dir::Custom Dashboard 136;drive_dir::Custom Dashboard 133;drive_dir::Custom Dashboard 144;drive_dir::Custom Dashboard 24;drive_dir::Custom Dashboard 25;drive_dir::Custom Dashboard 27;drive_dir::Custom Dashboard 35;drive_dir::Custom Dashboard 45;drive_dir::Custom Dashboard 44;drive_dir::Custom Dashboard 46;drive_dir::Custom Dashboard 94;drive_dir::Aegis and Roshan St. Valentine Day;drive_dir::TI-10 Level Up Effect;drive_dir::TI-7 Level Up Effect;drive_dir::Winter Versus Screen;drive_dir::Guardians of the Lost Path Dire Towers;drive_dir::Guardians of the Lost Path Radiant Towers;drive_dir::TI-7 Planet Dog TP effect;drive_dir::Kappa Silence;drive_dir::TI-7 Shivas Guard Effect;drive_dir::Reef Roshan;drive_dir::River Vial Pink;drive_dir::Mine Radius 702;drive_dir::Pumpkin Trees UP;drive_dir::Phase Boots TI-6 Effect;drive_dir::New Year Hats 2018;drive_dir::Mjollnir TI-6 Effect;drive_dir::Mekanism TI-6 Effect;drive_dir::TI-9 Mekasm Effect;drive_dir::LevelUp TI-6 Effect;drive_dir::Lasthit Gold - New Bloom 2019;drive_dir::Iron Branch Christmas Tree;drive_dir::Pedestal The Fall Major 2016 Radiant;drive_dir::Pedestal Feast of Abscession Green;drive_dir::Winter Scythe of Vyse Effect 2017;drive_dir::Battle Pass Effect Fountain Regen;drive_dir::Battle Pass Effect Force Staff;drive_dir::Battle Pass Effect Eul;drive_dir::Fuck Deny;drive_dir::TI-9 Seasonal Creep Deny Effect;drive_dir::TI-4 effect Dagon;drive_dir::Pine Cone Melee Mega Creeps;drive_dir::Reptilian Refuge Radiant Creeps;drive_dir::USSR melee creep;drive_dir::Cavernite Dire Creeps;drive_dir::ColorStats;drive_dir::25 lvl ping;drive_dir::Bottle TI-6 Effect;drive_dir::Planetfall Blink;drive_dir::DotaCinema Bright HUD;drive_dir::Azure Constellation HUD;drive_dir::HUD of the Burning Scale Ice;drive_dir::Year beast battle loadingscreen;drive_dir::Sltv 10 loadingscreen;drive_dir::I league season2 loadingscreen;drive_dir::Terrain - The Kings New Journey;drive_dir::Broodmother Anime Voice;drive_dir::Crystal Maiden Anime Voice;drive_dir::Drow Ranger Anime Voice;drive_dir::Death Prophet Anime Voice;drive_dir::Lina Anime Voice;drive_dir::Enchantress Anime Voice;drive_dir::Medusa Anime Voice;drive_dir::Naga Siren Anime Voice;drive_dir::Luna Anime Voice;drive_dir::Phantom Assassin Anime Voice;drive_dir::Templar Assassin Anime Voice;drive_dir::Puck Anime Voice;drive_dir::Queen of Pain Anime Voice;drive_dir::Spectre Anime Voice;drive_dir::Windrunner Anime Voice;drive_dir::Vengeful Spirit Anime Voice;drive_dir::Winter Wyvern Anime Voice;drive_dir::Bane - Gangamstyle-slow;drive_dir::Beastmaster Fusrodah;drive_dir::Chen sounds from TRASHER;drive_dir::Banshi - Ghostbusters;drive_dir::Bane - Ya Bydy Ryki Tvoi Celovat;drive_dir::Cry Doom Ult;drive_dir::Furion Sila Zemli;drive_dir::Item Sound WC 3 for Reborn;drive_dir::Dust use MGS;drive_dir::Match Ready - SEMARGL - Credo Revolution (Zardonic Remix);drive_dir::Match Ready - Pognali;drive_dir::Match Ready - We Are Number One;drive_dir::Arthas WC 3 Sound for Abbadon;drive_dir::Toilet Shrine; 123|||