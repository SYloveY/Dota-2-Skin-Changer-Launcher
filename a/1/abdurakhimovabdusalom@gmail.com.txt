limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$MjQ2ZmZkZTUwZmIyYjI5N.4/Mu.O/Qo5F9DFCFUj3EgvFonD3VDbi 222||| 123:: Offhand Basher of Mage Skulls;Golden Basher of Mage Skulls;The Basher Blades;Litany of the Damned - Back;Arena Champion Shield;Bracers of the Cavern Luminar;Emblem of the Crystal Echelon Aghanim Effect;TI-7 Euls Scepter Of Divinity Effect;TI-8 Fountain lvl 1 Effect;Pedestal Bladeform Legacy;TI-9 Mekasm Effect;TI-8 LVL UP Effect;Reptilian Refuge Dire Creeps;Reptilian Refuge Radiant Creeps;River Vial STANDART;Clash of the Ancients Dashboard;Spoils from the Shifting Sorcerer V 2.0;SfS Demon Hunter For Antimage;Black Orc Warboss V 2.0;Marauder of the Chaos Wastes;Fires of Vashundol no effect V 2.1;The Corruption of Nezzureem;Adage of the Smoldering Sage;Mentor of the High Plains V 2.1;Aspect of the Year Beast;Relics of the Sundered King;Armour of The Iron Drakken;Cry of the Battlehawk;Bloodroot Guard;Creeping Shadow;Elusive Destroyer V 2.0;Ironclad Mold V 2.0;Sovereign of the Kray Legions 1st Style;Sovereign of the Kray Legions 2st Style;Warrior of the Red Sand V 2.0;Elemental Imperator V 2.0;Bite of the Surging Wind;Ironbarde Charger;Samurai Soul V 3.0;Trail of the Grey Ghost;Armor of the Sanguine Moon Set;Hunter of Kings V 2.0;Chaos Chosen V 3.0;Contested Fate;Desolate Conquest;Honored Servant of the Empire; 123|||