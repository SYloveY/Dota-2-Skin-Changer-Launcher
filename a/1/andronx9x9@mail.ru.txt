limitHWID:: 1 000||| 111::  111||| 222:: bb8e685554a782c7959e465144e5c6eb529b4c3d8d321d1fd04f028cb349814c5215358642eb8bfe70c04a8c8d63f21e211a13ed2b61f009820bb34b831bf878 222||| 123:: Iron Surge V 2.2;Anunkasan;Nothlic Burden Prem;Nova of Golden Nirvana;Soul Diffuser V 2.1;Tempest Helm of the Thundergod Prem;Fluttering Staff V 2.0;Full-Bore Bonanza;Lamb to the Slaughter;Paddapon of Ribbitar V 4.0;Golden Sullen Hollow V 3.2;Helm of the Primeval Predator;Bloodstone Blade Pack;Crescent Bow;Harvested Shoulders;Terrain - Desert;Terrain - The Kings New Journey;Crimson Cyrridae;Mulctant Pall;DotaCinema Dark HUD;The Lightning Orchid of Eminent Revival;Rapiers of the Burning God V 3.1;DotaCinema - Queen of Pain Spells;Gilded Edge V 2.0;Pyrexaec Floe;Molotov Cocktail of the Darkbrew Enforcer;Blistering Shade of the Crimson Witness;Armor of Grim Destiny;Crimson Unbroken Fealty;Sword of the Colossus;Controlled Burn;Golden Rectifier;Rectifier;Aquemerald Blade;Golden Mandate of the Stormborn;Garb of the Corridan Maestro;Transversant Soul of the Crimson Witness Prem;Crest of the Flowering Shade;Golden Mantle of Grim Facade;Dapper Disguise Hat;Cannon of the Jolly Reaver;Great Sages Reckoning Immortal Path;Disciple of the Wyrmwrought Flame;Fire Lotus Belt Prem;Fin Kings Charm of Eminent Revival Exceptional;Gauntlet of the Infernal Rambler;Prize of the Saltworn Mariner Original;Leviathan Whale Blade of Eminent Revival Exceptional;Crimson Bracers of Aeons Prem;Mace of Aeons Prem;Jewel of Aeons Prem;Perceptions of the Eternal Mind;Jade Reckoning Prem;Golden Gravelmaw Prem;Dark Artistry Hair 2nd Style;Magus Accord;Mantle of the Blackguard Magus;Dark Artistry Cape Prem;Dark Artistry Belt Prem;Dark Artistry Bracers Prem;Sea Rakes Bridle;Back of the Defender of Ruin;Juggernaut Arcana Bladeform Legacy;Grand Abscession;Lord of Chronoptic Synthesis;Atrocities of the Abyssal Scourge;The Keen Commander;Marauder of the Chaos Wastes;The Jade General;Broken Scale V 2.0;Fireflight Scion;Elements of the Endless Plane V 2.1;Unfettered Malevolence;Bindings of the Battleranger Chaotic Style;Ancestral Trappings Set V 3.0;Enduring Solitude;Guardian of the Eternal Seasons;Gold Skymage;Stygian Maw;Dancer of the Spiteful Eye V 3.0;Outlandish Gourmet;Mark of the Mistral Fiend V 2.1;Black Nihility;Blessing of the Crested Umbra;Chains of the Black Death Style 1;Armature of the Belligerent Ram Red;Scale of the Razorwyrm Light;Vengeance of the Sunwarrior;Eye of the Beholder;Direstone Bindings Set;Havoc of Dragon Palace V 2.0;Pitfall Crusader;Bitterwing Legacy;Relics of the Sundered King;Warrior of the Red Sand V 2.0;Fate Meridian;Rambling Fatebender;Fires of the Volcanic Guard;Dark Reef Escape V 2.1;Brawler of the Glacier Sea V 3.0;Regalia of the Wraith Lord Set;The Timekeeper Golden;Plunder of the Savage Monger;Ire of Molten Rebirth;Jungle Chief;AAMegaPack;Turquoise Giant Guard;Kin of the Sangstrath Fold;Cinder Sensei;Mirana MegaPack; 123|||