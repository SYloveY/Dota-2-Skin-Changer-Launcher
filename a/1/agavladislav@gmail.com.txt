limitHWID:: 1 000||| 111:: B34A1758-9D16-11E8-B5F5-8C1645E9EA6B;; 111||| 222:: 9f76d50f1899f2493ad53abda0e2c60bd0fbf6d57a31fbd4e5a7d04ab8759ad33661a4242cc67455f7ca882d9c9302d221858e6b12c8b66fb8fb597afc5e9029 222||| 123:: Axe Jungle;The Order of Cyprin;Robes of the Captive Princess;Crown of the Captive Princess;Naginata of the Allure Off-Hand;Naginata of the Allure;Swift Claw;Dipper the Destroyer;Tormented Staff of Eminent Revival Exceptional;Tormented Crown;Beast of the Crimson Ring Armor;Pauldrons of the Wartorn Heavens;Belt of the Wartorn Heavens;Bracers of the Wartorn Heavens;Helm of the Penitent Scholar;Peregrine Flight;Sylvan Cascade;Circlet of the Northern Wind;Quiver of the Rising Gale;Soul of the Slayer Prem;Master of the Searing Path Head;Rapiers of the Burning God V 3.1;Rapier of the Burning God Offhand;WK Shivaguard Shoulders;Helm of Grim Destiny;Cloak of the Dark Reservoir;Blistering Shade for Arcana;Armor of Grim Destiny;Provocation of Ruin Mask;Jagged Honor Legs;Genji Sword Premium Edition Blackened Edge Style;Provocation of Ruin Pauldron;Jagged Honor Bracer;Claszureme Incursion Head;Jewel of Aeons Prem;Mace of Aeons Prem;Bracers of Aeons Prem;Claszureme Incursion Belt;Legion Commander Arcana UP;Indomitable Legacy - Belt;Indomitable Legacy - Head;Indomitable Legacy - Shoulder;Abaddon RED MegaPack;Beastmaster MegaPack;Baby Toy Pudge Persona;Jini the Bright Moon Set V 2.0; 123|||