bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDMwMDAyMDAtMDQwMC0wNTAwLTAwMDYtMDAwNzAwMDgwMDA5IDExMXx8fCAyMjI6OiAkMnkkMTAkTWpSbU5UVTFaVFUwWXpNNU4yRTRNLnBERmVpTEZzNzk0SGx5eEZUOUdaMVh5WWI5dGNsYy4gMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6Qmxvb2RzdGFpbmVkIEJyaXRjaGVzO2RyaXZlX2Rpcjo6RG9vbXNkYXkgUmlwcGVyIFNob3VsZGVyO2RyaXZlX2Rpcjo6VGhlIENyb3cgRWF0ZXI7ZHJpdmVfZGlyOjpTbWFsbCBUYXNzZWxzIG9mIHRoZSBCbGFjayBEZWF0aDtkcml2ZV9kaXI6OlRydWUgRm9ybSAtIFJhZGlhbnQgRGVmZW5kZXI7ZHJpdmVfZGlyOjpBcm1zIG9mIHRoZSBBcmN0aWMgT3dsYmVhciBDbGFuO2RyaXZlX2Rpcjo6QXNwZWN0IG9mIHRoZSBEYXJrIFdvb2Q7ZHJpdmVfZGlyOjpTaG91bGRlciBvZiB0aGUgV2FyLUJ1cnJvdyBSYXZhZ2VyO2RyaXZlX2Rpcjo6Q2F1bGRyb24gb2YgWGFocnl4O2RyaXZlX2Rpcjo6VmFsZW50aW5lIFdhcmQ7ZHJpdmVfZGlyOjpTZXZlbi1TZWFsZWQgdGhlIEZ1ciBCcmFjZXI7ZHJpdmVfZGlyOjpBcnNlbmFsIG9mIHRoZSBCbGFkZWtlZXBlcjtkcml2ZV9kaXI6Okd1aXNlIG9mIHRoZSBVbnlpZWxkaW5nIE1hc2s7ZHJpdmVfZGlyOjpQcm92b2NhdGlvbiBvZiBSdWluIEJlbHQ7ZHJpdmVfZGlyOjpSZWxlbnRsZXNzO2RyaXZlX2Rpcjo6Q3JlZWQgb2YgdGhlIFNrdWxsaG91bmQgLSBBcm1vcjtkcml2ZV9kaXI6OkNyZWVkIG9mIHRoZSBTa3VsbGhvdW5kIC0gQmVsdDtkcml2ZV9kaXI6OkNyZWVkIG9mIHRoZSBTa3VsbGhvdW5kIC0gU2hvdWxkZXI7ZHJpdmVfZGlyOjpUcmFpbCBvZiB0aGUgR3JleSBHaG9zdDtkcml2ZV9kaXI6Okh1bnRlciBvZiBLaW5ncyBWIDIuMDtkcml2ZV9kaXI6OkJlbHQgb2YgdGhlIEJsb29kIE1vb247ZHJpdmVfZGlyOjpCcmFjZXJzIG9mIHRoZSBTdW53YXJyaW9yO2RyaXZlX2Rpcjo6SHVtYmxlIERyaWZ0ZXIgUGFudHM7ZHJpdmVfZGlyOjpQaGFudG9tIENvbmNvcmQ7ZHJpdmVfZGlyOjpBbmNlc3RvcnMqIFBhdWxkcm9uO2RyaXZlX2Rpcjo6R2F1bnRsZXRzIG9mIHRoZSBGaW5hbCBVdHRlcmFuY2U7ZHJpdmVfZGlyOjpSb2JlIG9mIHRoZSBIaWRkZW4gVGFsZW50O2RyaXZlX2Rpcjo6SGVsbSBvZiB0aGUgU2lsdmVyZWQgVGFsb247ZHJpdmVfZGlyOjpTaWxlbnQgU2xheWVyIC0gT2ZmLUhhbmQ7ZHJpdmVfZGlyOjpDYXBlIG9mIHRoZSBIYXpoYWRhbCBNYWdlYnJlYWtlcjtkcml2ZV9kaXI6OkhlYXJ0bGVzcyBIdW50IC0gQXJtb3I7ZHJpdmVfZGlyOjpDYXBlIG9mIHRoZSBIdW50ZXIqcyBHbG9yeTtkcml2ZV9kaXI6Ok1hc2sgb2YgRGFyayBGZXJvY2l0eTtkcml2ZV9kaXI6OkhlYXJ0bGVzcyBIdW50IC0gT2ZmLUhhbmQ7ZHJpdmVfZGlyOjpCZWF1bGlldSBSaW5nO2RyaXZlX2Rpcjo6SGVhcnRsZXNzIEh1bnQgLSBXZWFwb247ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgTWF6ZSBLZWVwZXI7ZHJpdmVfZGlyOjpBcm1zIG9mIHRoZSBGb3Jsb3JuIE1hemU7ZHJpdmVfZGlyOjpCYXJkaW5nIG9mIHRoZSBNYXplIEtlZXBlcjtkcml2ZV9kaXI6OlNldmVyaW5nIENyZXN0O2RyaXZlX2Rpcjo6V2hpcCBvZiB0aGUgT3ZlcnNlZXI7ZHJpdmVfZGlyOjpBcm1vciBvZiBTZWFibGlnaHQgUHJvY2Vzc2lvbjtkcml2ZV9kaXI6OkJyYWNlcnMgb2YgU2VhYmxpZ2h0IFByb2Nlc3Npb247ZHJpdmVfZGlyOjpXcmFwcyBvZiBTZWFibGlnaHQgUHJvY2Vzc2lvbjtkcml2ZV9kaXI6OlNlYWJsaWdodCBQcm9jZXNzaW9uO2RyaXZlX2Rpcjo6QXJtb3Igb2YgQnJva2VuIFNjYWxlO2RyaXZlX2Rpcjo6QnJhY2VyIG9mIHRoZSBGb3Jnb3R0ZW4gUGxhbmU7ZHJpdmVfZGlyOjpCZWx0IG9mIHRoZSBGb3Jnb3R0ZW4gUGxhbmU7ZHJpdmVfZGlyOjpPYXRoYm91bmQgRGVmaWFudCBIZWxtO2RyaXZlX2Rpcjo6T2ZmLUhhbmQgb2YgdGhlIERyYWdvbipzIERpc2NpcGxlO2RyaXZlX2Rpcjo6U2hvdWxkZXJzIG9mIHRoZSBTdXJ2aXZvcjtkcml2ZV9kaXI6OkFNIEF6emlub3RzO2RyaXZlX2Rpcjo6VmFhbCB0aGUgQW5pbWF0ZWQgQ29uc3RydWN0O2RyaXZlX2Rpcjo6R2FycmFuIERyeXdpeiBhbmQgR2FyYWN0YWN1cztkcml2ZV9kaXI6OlRydXN0eSBNb3VudGFpbiBZYWs7ZHJpdmVfZGlyOjpDaGFvcyBMZWdpb24gSGVsbTtkcml2ZV9kaXI6OkNoYW9zIE1hdyBIZWFkO2RyaXZlX2Rpcjo6RW5taXR5O2RyaXZlX2Rpcjo6QXRyYW1lbnRvcyB0aGUgQXBvY2FseXB0aWM7ZHJpdmVfZGlyOjpTdGVlZCBvZiB0aGUgRGFyayBDb25xdWVyb3I7ZHJpdmVfZGlyOjpTaGllbGQgb2YgdGhlIERhcmsgQ29ucXVlcm9yO2RyaXZlX2Rpcjo6U2hhcmRzIG9mIHRoZSBCYWxlZnVsIFJlaWduO2RyaXZlX2Rpcjo6U3BhdWxkZXJzIG9mIHRoZSBEYXJrIENvbnF1ZXJvcjtkcml2ZV9kaXI6OkNsb2FrIG9mIHRoZSBSZXNlbnRmdWwgU3BlY3RyZTtkcml2ZV9kaXI6OkNhcGUgb2YgdGhlIEV2ZXJibGFjaztkcml2ZV9kaXI6OlZlc3BlcnRpbmUgR3VhcmQgQ2xvYWs7ZHJpdmVfZGlyOjpIb29kIG9mIHRoZSBFdmVyYmxhY2s7ZHJpdmVfZGlyOjpFbmRsZXNzIE5pZ2h0IEhlYWQ7ZHJpdmVfZGlyOjpIYWxsZ3VsIHRoZSBXYXIgTWQ5519bnQ7ZHJpdmVfZGlyOjpOaWdodHNiYW5lO2RyaXZlX2Rpcjo6UmltZWhlYXJ0IHRoZSBEb29tIFN0YWxsaW9uO2RyaXZlX2Rpcjo6U291bGhvb2Y7ZHJpdmVfZGlyOjpTcGF1bGRlcnMgb2YgRW52ZWxvcGluZyBEZXNwYWlyO2RyaXZlX2Rpcjo6RW5kbGVzcyBOaWdodCBTaG91bGRlcjtkcml2ZV9kaXI6OkJsYWNrbWlzdCBCbGFkZTtkcml2ZV9kaXI6OkJsYWRlIG9mIHRoZSBEZW1vbmljIFZlc3NlbDsgMTIzfHx8