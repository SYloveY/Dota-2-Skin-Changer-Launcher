bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkTWpWaU1HVXpZbVkxTlRNek9EZzNZdWk4c2lhYW1sLnlWamEwYkp3ZEVVczNxU0FjYVVrQnUgMjIyfHx8IDEyMzo6IEFybXMgb2YgdGhlIEphZGUgRW1pc3Nhcnk7QmVsdCBvZiB0aGUgSmFkZSBHZW5lcmFsO1NlcnBlbnQgb2YgdGhlIEphZGUgRW1pc3Nhcnk7SmFkZSBSZWNrb25pbmc7SW5mZXJudXM7RGFyayBBcnRpc3RyeSBDYXBlO0hlYXZlbi1QaWVyY2luZyBQYXVsZHJvbnM7QmFuZGFuYSBvZiB0aGUgQm9uZSBSdWluIEJhbmRpdHM7S2V5IHRvIHRoZSBCb25lIFJ1aW5zO1RhaWwgb2YgdGhlIEZyYWN0dXJlZCBPcmRlcjtXaW50ZXIgSHVudGluZyBIZWFkO1dpbnRlciBIdW50aW5nIFNob3VsZGVyO0dyZWF0IFNhZ2UqcyBSZWNrb25pbmc7QXJtb3Igb2YgdGhlIFJpcHRpZGUgUmFpZGVyO1Nob3VsZGVycyBvZiB0aGUgUmlwdGlkZSBSYWlkZXI7VHJpZGVudCBvZiB0aGUgUmlwdGlkZSBSYWlkZXI7Q29tcGxldGUgV2luZ3Mgb2YgdGhlIEV0aGVyZWFsIE1vbmFyY2g7THVtaW5vdXMgU2NhcmFiIEhlYWQ7TWlzY2hpZXZvdXMgRHJhZ29uIFRhaWw7RnVyeSBvZiBCb3VuZGxlc3MgRGFya25lc3MgSGVhZDtPZGEgTm9idW5hZ2EgTWQ5519bnQ7Um9zZSBhbmQgdGhlIEJlYXN0IE9mZi1IYW5kO0Z1cnkgb2YgQm91bmRsZXNzIERhcmtuZXNzIFNob3VsZGVyO0Z1cnkgb2YgQm91bmRsZXNzIERhcmtuZXNzIFdlYXBvbjtCbG9vZGZlYXRoZXIgRmVhc3Q7Qmxvb2RmZWF0aGVyIFdpbmdzIFByZW07QXJtcyBvZiBEZXNvbGF0aW9uIFByZW07UGF1bGRyb25zIG9mIEV0ZXJuYWwgSGFydmVzdDtIb29kIG9mIHRoZSBBYnlzc2FsIEFybXM7U2hvdWxkZXIgb2YgdGhlIEFieXNzYWwgQXJtcztCYWNrIG9mIHRoZSBBYnlzc2FsIEFybXM7QnJhY2VycyBvZiB0aGUgQWJ5c3NhbCBBcm1zO01hc2sgb2YgdGhlIENvbmZpZGFudDtGcm96ZW4gRmFsY2hpb25haXJlIFdlYXBvbjtGcm96ZW4gRmFsY2hpb25haXJlIEFybW9yO0ZvY2FsIFJlc29uYW5jZSBWIDMuMDtBcnRpc3Qgb2YgdGhlIEFzdHJhbCBTdW1tZXIgLSBIZWFkO0FydGlzdCBvZiB0aGUgQXN0cmFsIFN1bW1lciAtIFNob3VsZGVyO1dpbmdzIG9mIHRoZSBLZWVwZXIqcyBHYXplO0hlYWQgb2YgdGhlIFdpbmdlZCBIYXJ2ZXN0O1RvbGxpbmcgU2hhZG93cztCb3cgb2YgdGhlIEJhdHRsZXJhbmdlcjtDdXJzZSBvZiB0aGUgQ3JvdyBLaW5nIFN3b3JkO0N1cnNlIG9mIHRoZSBDcm93IEtpbmcgSGVhZDtDdXJzZSBvZiB0aGUgQ3JvdyBLaW5nIFNob3VsZGVycztDdXJzZSBvZiB0aGUgQ3JvdyBLaW5nIEFybXM7Q3Vyc2Ugb2YgdGhlIENyb3cgS2luZyBCYWNrO0N1cnNlIG9mIHRoZSBDcm93IEtpbmcgQXJtb3I7S3JvYmVsaW5nIFByZW07U21lZXZpbHMgUGVuYW5jZSBTdHlsZSAzO0RvdGFDaW5lbWEgQnJpZ2h0IEhVRDtUSS0xMCBUZWxlcG9ydCBsdmwgMyBFZmZlY3Q7UXVlc3Rpb24gbWFyayBEZW55O0Vwb2NoIG9mIHRoZSBBYnlzbSBTcGlkZXJsaW5ncztSYXBpZXJzIG9mIHRoZSBCdXJuaW5nIEdvZCBWIDMuMTtBcm1ndWFyZHMgb2YgdGhlIFNtb2xkZXJpbmcgU2FnZTtIZWFkZHJlc3Mgb2YgdGhlIFJla2luZGxlZCBBc2hlcztFZnJpdCBTdWx0YW4gQmVsdDtQYXVsZHJvbnMgb2YgdGhlIFZvbGNhbmljIEd1YXJkO0dvbGRlbiBNYXNrIG9mIE1ldGlyYTtBeGlhIG9mIE1ldGlyYTtEcmVhbXMgb2YgTWlkc3VtbWVyIEJvdztCcmFjZXJzIG9mIEFlb25zIFByZW07SmV3ZWwgb2YgQWVvbnMgUHJlbTtGcm96ZW4gVm9pZCBCZWx0O1Zpc2FnZSBvZiB0aGUgRW1lcmFsZCBBZ2U7TWFjZSBvZiBBZW9ucztIeWRyYWthbiBMYXRjaDtHb2xkZW4gRnVsbC1Cb3JlIEJvbmFuemE7R2hpbGxpZWQgR3VubWFuIE5lc3QgQ2FwO0doaWxsaWVkIEd1bm1hbiBTaG91bGRlcnM7R2hpbGxpZWQgR3VubWFuIFNuaXBlciBSaWZsZTtHaGlsbGllZCBHdW5tYW4gQXJtcztQcm92b2NhdGlvbiBvZiBSdWluIEJyYWNlcnM7U2hvdWxkZXJzIG9mIHRoZSBCbGFkZXNydW5uZXI7UHJvdm9jYXRpb24gb2YgUnVpbiBCZWx0O0thbnR1c2EgdGhlIFNjcmlwdCBTd29yZDtTaWdpbCBNYXNrIG9mIHRoZSBCbGFkZWtlZXBlcjtDb3ZlbmFudCBvZiB0aGUgRGVwdGhzIEJlbHQ7V2ludGVyIEh1bnRpbmcgT2ZmLUhhbmQ7V2ludGVyIEh1bnRpbmcgV2VhcG9uO1dpbnRlciBIdW50aW5nIEFybXM7UXVpdmVyIG9mIHRoZSBSaXNpbmcgR2FsZTtTb25nIG9mIHRoZSBCbHVlYmlyZCAtIEhlYWQ7TWFuaWFzIE1hc2sgUHJlbTtBcm1zIG9mIFplYnVsb247Q2FwZSBvZiBaZWJ1bG9uO0Jvb3RzIG9mIFplYnVsb247UXVpdmVyIG9mIHRoZSBCb3JlYWwgV2F0Y2g7UGF1bGRyb25zIG9mIFplYnVsb247RGFyayBBcnRpc3RyeSBCcmFjZXJzO0FsZ2lkIExlZ2FjeTtPcmRlciBvZiB0aGUgU2lsdmVyZWQgVGFsb247R3VhcmRpYW5zIG9mIHRoZSBMb3N0IFBhdGggRGlyZSBUb3dlcnM7R3VhcmRpYW5zIG9mIHRoZSBMb3N0IFBhdGggUmFkaWFudCBUb3dlcnM7QWNpZCBIeWRyYSBDdXJzb3IgUGFjaztNYXNrIG9mIHRoZSBEaXZpbmUgU29ycm93O0N1c3RvbSBEYXNoYm9hcmQgMjtEb3NhIEJhY2s7R2xvdmVzIG9mIHRoZSBTcGVsdW5rZXI7RnJhY3RhbCBIb3JucyBvZiBJbm5lciBBYnlzbSBVUDtEYXJrIE1lYWRvdyBNYXNzYWNyZSBBcm1vcjtEYXJrIE1lYWRvdyBNYXNzYWNyZSBBcm1zO0RhcmsgTWVhZG93IE1hc3NhY3JlIEhlYWQ7R29sZGVuIFBhbGUgTWF1c29sZXVtO0Nvc21pYyBXYW5kZXJlcjtCb3VudHkgSHVudGVyIE1hbmlhYyBTZXQ7QmxhemluZyBDb3Ntb3M7TWFnaXN0ZXIgb2YgdGhlIE5hcnJvdyBGYXRlcztOYXJjaXNzaXN0aWMgTGVlY2g7UmFtYmxpbmcgRmF0ZWJlbmRlcjtSZWRyYWdlIENyYXdsZXI7QWxsdXJlIG9mIHRoZSBEZWVwO0Zlcm9jaWQ5519cyBIZWFydDtIYXJ2ZXN0cyBIb3VuZDtFcG9jaCBvZiB0aGUgQWJ5c207TW9sb2thdSBTdGFsa2VyO1BsdW5kZXIgb2YgdGhlIFNhdmFnZSBNb25nZXI7VGhlIEZhaXRoIG9mIEF2ZW5nZXJzO0Rlc2VydCBUcmF2ZWxsZXIgU2V0OyAxMjN8fHw=