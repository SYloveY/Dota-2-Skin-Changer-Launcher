bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkTWpWaU1HVXpZbVkxTlRNek9EZzNZdWk4c2lhYW1sLnlWamEwYkp3ZEVVczNxU0FjYVVrQnUgMjIyfHx8IDEyMzo6IE1hZ3VzIEFjY29yZDtEYXJrIEFydGlzdHJ5IENhcGUgUHJlbTtJbmZlcm51cztDb3ZlbmFudCBvZiB0aGUgRGVwdGhzIEJlbHQ7TWFzayBvZiB0aGUgRGl2aW5lIFNvcnJvdyBWIDMuMTtIZWF2ZW4tUGllcmNpbmcgUGF1bGRyb25zO0JsYWRlIG9mIHRoZSBGcmFjdHVyZWQgT3JkZXI7UGl0bWQ5519c2UgRnJhdGVybml0eSBUYWlsO0plc3RlciBLaW5nIEFybXM7RG9zYSBCYWNrO1NwZWx1bmtlcipzIEZlZG9yYTtTcGF1bGRlcnMgb2YgdGhlIEZyYWN0dXJlZCBPcmRlcjtBcm1zIG9mIERlc29sYXRpb247UGF1bGRyb25zIG9mIEV0ZXJuYWwgSGFydmVzdDtBcmNhbmEgU0YgRGVtb24gRWF0aGVyO1RoZSBJbnRlcm5hdGlvbmFsIDIwMTUgQ3Vyc29yIFBhY2s7SHd5dHR5IGFuZCBTaHl6enlyZDtDcmltc29uIFBpcXVlIFByZW07U2tpdHRlcmluZyBEZXNvbGF0aW9uIFByZW07Q3JpbXNvbiBDeXJyaWRhZTtFbWJlciBUaXBwZWQgU3RyaWRlcnM7QmxhY2tzaGllbGQgUHJvdG9kcm9uZSBIZWxtO0FyY2FuaWMgUmVzb25hbmNlIEJlYW07QmxhY2tzaGllbGQgUHJvdG9kcm9uZSBTdGluZ2VyO0JsYWNrc2hpZWxkIFByb3RvZHJvbmUgTWlzc2lsZSBMYXVuY2hlcjtCbGFja3NoaWVsZCBQcm90b2Ryb25lIEFybW9yO0dpbGRlZCBFZGdlIFByZW07R2hvc3RseSBTaWxlbmNlIEhVRDtEcmVhZCBSZXRyaWJ1dGlvbiAtIEJyYWNlcnM7RHJlYWQgUmV0cmlidXRpb24gLSBDYXBlO0RyZWFkIFJldHJpYnV0aW9uIC0gSGVhZHdlYXI7RHJlYWQgUmV0cmlidXRpb24gLSBMZWcgQXJtb3I7RHJlYWQgUmV0cmlidXRpb24gLSBRdWl2ZXI7RHJlYWQgUmV0cmlidXRpb24gLSBTaG91bGRlciBBcm1vcjtEcmVhZCBSZXRyaWJ1dGlvbjtHb2xkZW4gRWRpY3Qgb2YgU2hhZG93cztHb2xkZW4gU2hhZG93IE1hc3F1ZXJhZGUgUHJlbTtTbW9rZSBCb21iIG9mIE1vbnN0cm91cyBSZXByaXNhbCBQcmVtO1N3aW5lIG9mIHRoZSBTdW5rZW4gR2FsbGV5IFByZW07Q3J1eCBvZiBQZXJwbGV4IEFyY2FuYSBTdHlsZTtIYXQgb2YgRmFudG9jY2luaXMgRGlsZW1tYTtUb3JjaCBvZiBGYW50b2NjaW5pcyBEaWxlbW1hO0NvYXQgb2YgRmFudG9jY2luaXMgRGlsZW1tYTtTY2FsZSBvZiBCaXR0ZXIgU3BvaWwgSW1tb3J0YWwgVVA7Qml0dGVyIExpbmVhZ2UgSW1tb3J0YWwgQXhlcztUZXN0IG9mIHRoZSBCYXNpbGlzayBMb3JkO0FieXNzYWwgQXJtcztCYW5lIG9mIHRoZSBEZWF0aHN0YWxrZXJzO0p1bmt0b3duIEF2ZW5nZXI7TW9ycGhsaW5nIEltbW9ydGFscyBNZWdhUGFjayBVUDtCYWJ5IFRveSBQdWRnZSBQZXJzb25hOyAxMjN8fHw=