limitHWID:: 1 000||| 111:: 3D331200-D7DA-11DD-A875-50465DB71D26 111||| 222:: $2y$10$OGY3ZGVkZDJmYTcyNmY2N.QYKfdA3xYNT81zJJFvFndPxFANCZwlu 222||| 123:: drive_dir::Weather Moonbeam;drive_dir::Terrain - Winter;drive_dir::River Vial Green;drive_dir::Terrain - Spring;drive_dir::TI-7 Phase Boots Effect;drive_dir::Blink Dagger lvl 1 TI-6 Effect;drive_dir::Lasthit Gold - New Bloom 2019;drive_dir::TI-7 Mekansm Effect;drive_dir::TI-10 Bottle Effect;drive_dir::Emblem of the Crystal Echelon Aghanim Effect;drive_dir::TI-7 Shivas Guard Effect;drive_dir::Pumpkin Trees UP;drive_dir::Blueheart Sovereign Dashboard;drive_dir::Lina Announcer;drive_dir::Broodmother Anime Voice;drive_dir::Crystal Maiden Anime Voice;drive_dir::Drow Ranger Anime Voice;drive_dir::Death Prophet Anime Voice;drive_dir::Lina Anime Voice;drive_dir::Medusa Anime Voice;drive_dir::Luna Anime Voice;drive_dir::Queen of Pain Anime Voice;drive_dir::SF RU Arcane voice;drive_dir::Zeus RU Arcane voice;drive_dir::Zeus ENG Arcane voice;drive_dir::Brightskye Gem of Truesight;drive_dir::Healing Fount of the Lost Isles;drive_dir::Provocation of Ruin Bracers;drive_dir::Argent Decimator Back;drive_dir::Arsenal of the Bladekeeper;drive_dir::Pack of the Dashing Swordsman;drive_dir::Elder Tusk of the Brave;drive_dir::Vengeance of the Sunwarrior;drive_dir::Dark Realm Oracles Mask;drive_dir::Dark Realm Oracles Armor;drive_dir::Legacy of the Eldwurm Crest;drive_dir::DotaCinema - Queen of Pain Spells;drive_dir::Eminence of Ristul Knife Attack;drive_dir::Mace of Vincere Atack Effect;drive_dir::LeBlanc for Puck;drive_dir::Blade of Tears and Crown of Tears;drive_dir::Pudge blood after hook;drive_dir::Insatiable Bonesaw;drive_dir::Pudge Blink Dagger;drive_dir::Shatterblast Crown;drive_dir::Relics of the Lost Vigil Pathfinder;drive_dir::Righteous Thunderbolt and Arcana MegaPack;drive_dir::Pauldrons of the Wartorn Heavens;drive_dir::Bracers of the Wartorn Heavens;drive_dir::Belt of the Wartorn Heavens;drive_dir::Jewel of Aeons Prem;drive_dir::Bracers of Aeons Prem;drive_dir::Timebreaker Prem;drive_dir::Sword of the Colossus Prem;drive_dir::Majesty Of The Colossus - Monolith;drive_dir::Cave Tiny;drive_dir::Morbific Provision;drive_dir::Paddapon of Ribbitar V 4.0;drive_dir::Kunkka*s Shadow Blade;drive_dir::Leviathan Whale Blade of Eminent Revival;drive_dir::Kitestar Splendor Wings;drive_dir::Lamp of the Spiteful Djinn;drive_dir::Dread Compact;drive_dir::Golden Moonfall Prem;drive_dir::Twilight Schism;drive_dir::Valkyrie*s Shade Back;drive_dir::Valkyrie*s Shade Head;drive_dir::Red Mist Reaper Set;drive_dir::Crucible of Rile;drive_dir::Molten Claw Prem;drive_dir::Mantle of the Cinder Baron Style 1;drive_dir::The Barb of Skadi;drive_dir::Soul Diffuser V 2.1;drive_dir::Phantom Advent Shoulders UP; 123|||