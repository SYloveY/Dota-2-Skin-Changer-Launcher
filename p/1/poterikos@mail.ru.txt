limitHWID:: 1 000||| 111:: 83B3C7C0-1DDD-11B2-8000-C7C3B7E73C02 111||| 222:: $2y$10$NjQ3MGFkYmYwYjFhOWY0N.OaR/xLR23FcJKQSGcTeAejil4L1Xf0G 222||| 123:: drive_dir::Amberlight Raiment V 2.0;drive_dir::Ember Crane Set V 2.0;drive_dir::Alluring Mesmer;drive_dir::Eternal Harvest;drive_dir::Redmoon Assassins Secret Set;drive_dir::Blossoming Harmony V 2.0;drive_dir::Peacock Priest;drive_dir::Dark Artistry Bracers;drive_dir::Cape of the Dark Magic;drive_dir::Covenant of the Depths Belt;drive_dir::Mask of Quas Precor;drive_dir::Chess Knight Set;drive_dir::Majesty of the Forbidden Sands V 2.0;drive_dir::Warding Guise;drive_dir::Tickled Tegu;drive_dir::Compendium Bloody Ripper;drive_dir::Bonds of Madness Set Style 1;drive_dir::Plague Champion of Nurgle;drive_dir::Pudge Psychopath;drive_dir::Wisp Give Diretide;drive_dir::Desolate Conquest;drive_dir::Bandana of the Bone Ruin Bandits;drive_dir::Riftshadow Roamer*s Grabbin* Wraps;drive_dir::Bone Ruin Excavator Pack;drive_dir::The Spelunker*s Torch;drive_dir::Armband of the Spelunker;drive_dir::Dosa Tail;drive_dir::Key to the Bone Ruins;drive_dir::Black Orc Warboss V 2.0;drive_dir::Fire of the Exiled Ronin;drive_dir::Spoils from the Shifting Sorcerer V 2.0;drive_dir::Regalia of the Parasols Sting;drive_dir::Kindred of the Umizar Crawler;drive_dir::Auspice of Iczoxtotec;drive_dir::Shield of the Primeval Predator;drive_dir::Talon of the Scarlet Raven - Off-Hand;drive_dir::Tribal Terror Dreadlocks;drive_dir::Talon of the Scarlet Raven;drive_dir::Radiant Protector Set V2.0;drive_dir::Apostle of Decay V 2.1;drive_dir::Lumberclaw;drive_dir::Royal Winterbloom;drive_dir::Hunter of Kings V 2.0;drive_dir::Warrior of Arena Set;drive_dir::The Wild Tamer;drive_dir::Komeiji Koishi 2 for Bane by Patchouli Knowledge;drive_dir::The Corruption of Nezzureem;drive_dir::Forbidden Knowledge;drive_dir::Dame de Carreau;drive_dir::Golden Nirvana;drive_dir::Featherswing;drive_dir::Avon of the Crescent Moon;drive_dir::Moon Rift V 2.1;drive_dir::Colors of the Powderkeg Patrol;drive_dir::Coat of the Powderkeg Patrol;drive_dir::Keg of the Powderkeg Patrol;drive_dir::Shooting Star;drive_dir::Ancestral Luck Set;drive_dir::The Dusk Crawler Set;drive_dir::Resentment of the Banished Princess;drive_dir::Garb of the Cruel Magician Set;drive_dir::Guardian of Metal;drive_dir::The Claddish Renegade;drive_dir::The Fiend Cleaver;drive_dir::Neptune for Mars by Patchouli Knowledge; 123|||