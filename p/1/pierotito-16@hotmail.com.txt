limitHWID:: 1 000||| 111:: 032E02B4-0499-058C-0B06-E30700080009 111||| 222:: $2y$10$M2MzMTEzMDk4MzA5YjYxZOe7Pa05jo8NFpzJEAQcJVy1YDiE.jitC 222||| 123:: Golden Gravelmaw Prem;Legion Commander Arcana UP;Golden Staff of Perplex Prem;Gods Mercy of the Crimson Witness;Crimson Progenitors Bane;Waterlogged Kunkka Shoes;Hell-Spar Anathema Obsidian Blight;Fin Kings Charm of Eminent Revival Exceptional;Glory of the Elderflame - Arms;Golden Wyrmwrought Flare Prem;Disciple of the Wyrmwrought Flame;Soul of the Slayer Prem;Spirit of the Sacred Grove - Back;Spirit of the Sacred Grove - Quiver;Spirit of the Sacred Grove - Shoulder;Pulsar Remnant Prem;Armor of the Demon Trickster;Pauldrons of the Demon Trickster;Golden Staff of Gun-Yu Prem;Gothic Whisper Cape;Codicil of the Veiled Ones;Avowance of the Crimson Witness;Manifold Paradox PA Arcana Style 3;Gothic Whisper Belt;Golden Bracers of Forlorn Precipice;Harness of the Forgotten Tactician;Mantle of the Sapphire Shroud;Belt of the Forgotten Tactician;Master of the Searing Path Belt;Master of the Searing Path Arms;Cinder Sensei Style;Cinder Sensei Off-Hand Weapon;Apogee of the Guardian Flame;Signs of the Allfather - Arms;Monarch of the Sapphire Glen;Signs of the Allfather - Head;Signs of the Allfather - Neck;Signs of the Allfather - Shoulder;Hallowed Horde;Tormented Staff of Eminent Revival Exceptional;Tormented Crown;Force of Kylin Back;Force of Kylin Tail;Golden Origins of Faith Prem;The Barren Crown;The Barren Vector;Tail of the Scouring Dunes;Legs of the Red Sand Warrior;Shoulderblades of the Red Sand Warrior;Golden Floodmask;Horror from the Deep Arms;Tidehunter Blink Dagger;Tidosaurus Tail;Bonkers of Awaleb;Masque of Awaleb;Golden Awalebs Trundleweed;Primal Peacemaker of the Crimson Witness;Primal Paean;King of Beasts Hawk;Shrieking Razorback;Belt of the Stoutheart Growler;Tribal Stone Vambrace;Horns of the Betrayer;Hood of the Forgotten Tactician;Golden Rectifier;Thirst of Eztzhok Bundle Prem;Geodesic Eidolon;Tiny Frostmoot;Ancient Inheritance - Belt;Majesty Of The Colossus - Monolith;Frostmoot Frostivus Tree;Mask of the Confidant;Solar Forge Prem;Pyramid of the Temple of the Fallen Sun;Crimson Edict of Shadows;Golden Shadow Masquerade Prem;Hunger of the Howling Wilds Weapon;Hunger of the Howling Wilds Off-Hand Weapon;The Lightning Orchid of Eminent Revival Exceptional;Sniper Immortal Weapon of the Ardalan Interdictor;Golden Full-Bore Bonanza;Bracers of the Ardalan Interdictor;Helm of the Ardalan Interdictor;Colar of the Ardalan Interdictor;Mace of Aeons Prem;Shadow in the Deep Armor;Benevolent Companion Prem;Cinder Sensei Weapon;Hunger of the Howling Wilds Arms;Golden Crucible of Rile;Shambling Trickster Belt;Garb of the Outlandish Gourmet;Mulctant Pall of the Crimson Witness;Secrets of the Celestial Arms;Crimson Flight of Epiphany;Secrets of the Celestial Belt;Secrets of the Celestial Head;Golden Empyrean;Secrets of the Celestial Shoulder;Enigmatic Emblem of the Diretide - Blue;Dark Artistry Cape Prem;Magus Accord;Vestments of the Blackguard Magus;Mantle of the Blackguard Magus;Grievous Ingots;Golden Piscean Pulverizer;Whisky the Stout Artifact Prem;Pauldrons of Eternal Harvest Prem;Clearcut Cavalier Back;Clearcut Cavalier Head;Clearcut Cavalier Shoulders;Golden Pale Mausoleum;Medium Anthozoa Giant;Chieftain Helm of the Chaos Wastes;Scythe of Vyse V 2.0;Dragonclaw Hook;Mallet of the Spiral Bore;Horn of the Spiral Bore;Coat of Fantoccinis Dilemma;Hat of Fantoccinis Dilemma;Dark Artistry Hair 1st Style;Axia of Metira;Belt of the Forgotten Plane;Mask of the Forgotten Plane;Twisted Maelstrom with World Chasm Artifact;Forsworn Legacy - Armor;Forsworn Legacy - Legs;Bracer of the Forgotten Plane;Dark Moon Baby Roshan;Planetfall Burning Descent;Terrain - Immortal Gardens;Bloodstained Britches;Dendi Doll;Legacy of the Fallen Legion;Scarf of the Roving Pathfinder;Golden Basher of Mage Skulls;The Gold Basher Blades for Wei;Manta Marauders Manta Ray;Tank of the Manta Marauder;Mask of the Manta Marauder;Belt of the Manta Marauder;Gravelmaw Prem;Golden Rabid Watchcog;Cape of the Burning Scale;Helm of the Third Awakening;Burning Shield of the Outland Ravager;Cuirass of the Third Awakening;Sword of the Outland Ravager;Dragon of the Outland Ravager;Serpent of the Jade Emissary;Crimson Bracers of Aeons Prem;Claszureme Incursion Belt;Claszureme Incursion Head;Claszureme Incursion Shoulder;Spirit of the Sacred Grove - Head;Fortunes Tout Prem;Provocation of Ruin Pauldron;Provocation of Ruin Mask;Crimson Edge of the Lost Order;Provocation of Ruin Belt;Insatiable Bonesaw Prem;Doomsday Ripper Arms;Large Tassels of the Black Death;Doomsday Ripper Shoulder;Knife of Distinguished Expeditionary;Tusks of Distinguished Expeditionary;Frost Brigadier Vestments;Apparatus of Full Throttle;Bracer of Full Throttle;Horror from the Deep Belt;Claddish Cudgel Prem;Crux of Perplex;Golden Cyrridae Prem;Crimson Pique Prem;Cape of the Rising Gale;Ravenous Abyss - Armor;Ravenous Abyss - Head;Crimson Emerald Conquest;Mask of the Demon Trickster;Arcanic Resonance Beam;Blackshield Protodrone Stinger;Blackshield Protodrone Missile Launcher;Blackshield Protodrone Armor;Blackshield Protodrone Helm;Exhaust of the Molten Destructor;Kunkka Immortals MegaPack;Nyx Assassin MegaPack new;Tales of the Windward Rogue;Slardar MegaPack set;Corridan Maestro and The Lightning Orchid and Golden Mandate of the Stormborn MegaPack NEW;Slark MegaPack New;Axe full Immortals Megapack alt;Planetfall and Judgement of the Fallen and Bracers of the Cavern Luminar ARCANA MegaPack;Clockwerk MegaPack;Windranger Arcana style 1 (Blue Bird) + Full WR immortal; 123|||