bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkTVRjNU1ERTRNMk13TkRSaE5URmpZZUhYM3lRTm43SENSQktYNTFaby5LSmNoYjRRaDZ3ZE8gMjIyfHx8IDEyMzo6IEV0ZXJuYWwgUmFkaWFuY2UgQmxhZGVzIFByZW07U2hhdHRlcmJsYXN0IENyb3duO0FybW9yIG9mIHRoZSBFcXVpbGlicml1bTtUYWlsIG9mIHRoZSBFcXVpbGlicml1bTtUaGUgQmFzaGVyIEJsYWRlcztBcm1zIG9mIHRoZSBGaXJzdCBXYXlzO0dhcmIgb2YgdGhlIEZpcnN0IFdheXM7TWFudGxlIG9mIHRoZSBDaW5kZXIgQmFyb24gU3R5bGUgMTtNb2x0ZW4gQ2xhdyBQcmVtO1JhbXBhbnQgT3V0cmFnZTtUem9rYWxvdGxzIERyZWFkIFNob3VsZGVyO1RoaXJzdCBvZiBFenR6aG9rIEJ1bmRsZSBQcmVtO0xlZ2FjeSBvZiBhIExvc3QgQWdlIC0gSGVsbTtMZWdhY3kgb2YgYSBMb3N0IEFnZSAtIEF4ZTtMZWdhY3kgb2YgYSBMb3N0IEFnZSAtIFN0ZWdhYm9hcjtMZWdhY3kgb2YgYSBMb3N0IEFnZSAtIEFybW9yO0VkZ2Ugb2YgRXh0aW5jdGlvbiBCZWx0O0xlZ2FjeSBvZiBhIExvc3QgQWdlIC0gQnJhY2VycztMZWdhY3kgb2YgYSBMb3N0IEFnZSAtIFB0ZXJvaGF3aztQaXN0b24gSW1wYWxlcjtCbGFzdGZvcmdlIEV4aGFsZXI7QmFyYmFyb3VzIEJsYWRlcyBBcm1zO0JhcmJhcm91cyBCbGFkZXMgV2VhcG9uO0luZmVybmFsIENoaWVmdGFpbiBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO1dhcmNvZyBFbGVjdHJvIFphcHBlcjtUaGUgSXJvbiBQaW9uZWVyIENvZ3M7UGFyYWZsYXJlIENhbm5vbjtZdWxzYXJpYXMgTWFudGxlIFByZW07SWNlIEJsb3Nzb207Qm9vayBvZiB0aGUgVml6aWVyIEV4aWxlO0JyYWNlbGV0IG9mIHRoZSBWaXppZXIgRXhpbGU7R29sZGVuIE5vdGhsaWMgQnVyZGVuIFByZW07U2hhZG93IG9mIHRoZSBCdXJuaW5nIFNjYWxlO0JyYWNlcnMgb2YgdGhlIENhdmVybiBMdW1pbmFyO0dvbGRlbiBHcmF2ZWxtYXc7SmV3ZWwgb2YgQWVvbnMgUHJlbTtCcmFjZXJzIG9mIEFlb25zIFByZW07TWFjZSBvZiBBZW9ucztGdXJ5IG9mIHRoZSBEYW1uZWQgQnJ1c2g7UmFwaWVycyBvZiB0aGUgQnVybmluZyBHb2QgViAzLjE7RGFyayBBcnRpc3RyeSBQYXVsZHJvbnM7RGFyayBBcnRpc3RyeSBCZWx0O0RhcmsgQXJ0aXN0cnkgQ2FwZTtNYWd1cyBBcGV4O0thbnR1c2EgdGhlIFNjcmlwdCBTd29yZCBWIDMuMTtWYWxlbnRpbmUgV2FyZDtMZWdhY3kgb2YgdGhlIEZhbGxlbiBMZWdpb247VG9ybWVudGVkIFN0YWZmIGVmZmVjdDtUZXJyYWluIC0gVGhlIEtpbmdzIE5ldyBKb3VybmV5O1dlYXRoZXIgU3ByaW5nO01vbmtleSBLaW5nIEFubm91bmNlcjtNZWdhLUtpbGxzIERpcmV0aWRlO0JhcnJlbCBvZiB0aGUgVGlwc3kgQnJhd2xlcjtIYW1tZXIgb2YgdGhlIFRpcHN5IEJyYXdsZXI7TWFyayBvZiB0aGUgRmlyc3QgSHVudCBCZXN0b3dlZDtDYWdlIG9mIHRoZSBGYWUgRm9yYWdlcjtEYXJrIFJlYWxtIE9yYWNsZXMgTWFzaztEYXJrIFJlYWxtIE9yYWNsZXMgQXJtb3I7QXJjIG9mIFNrYXJzbmlrO1doaXNwZXJzIG9mIHRoZSBEYW1uZWQgSGVhZDtXaGlzcGVycyBvZiB0aGUgRGFtbmVkIFdpbmdzO0JvdyBvZiB0aGUgRnJvc3RmYW5ncyBWIDIuMDtNYW5pYXMgTWFzayBQcmVtO0Zsb3VyaXNoaW5nIExvZGVzdGFyIFByZW07RWlkZWxvbiBvZiBUd2lzdGVkIE1hZWxzdHJvbTtHb2xkZW4gQXRvbWljIFJheSBUaHJ1c3RlcnMgUHJlbTtCbGFkZSBvZiBSZWNrbGVzcyBWaWdvcjtGbGFzaHBvaW50IFByb3NlbHl0ZSAtIEhlYWQ7UHlyZXhhZWMgRmxvZTtFbGRlciBDb252ZXJnZW5jZSBXaW5ncztLb3RsIElsbHVtaW5hdGUgRGVlcjtMZXZpYXRoYW4gV2hhbGUgQmxhZGUgb2YgRW1pbmVudCBSZXZpdmFsO0Fkb3JubWVudHMgb2YgdGhlIFdpdGNoIFN1cHJlbWU7TXVsY3RhbnQgUGFsbDtGaXJlIExvdHVzIEJlbHQ7Q29tcGxldGUgSGVsbSBvZiB0aGUgRGFyayBNb29uIFN0YWxrZXI7VHdpbGlnaHQgU2NoaXNtO0dvbGRlbiBNb29uZmFsbCBQcmVtO0Zvcm0gb2YgdGhlIEdyZWF0IENhbGFtaXR5IFYgMi4xO1Nob2NrIG9mIHRoZSBBbnZpbDtEYXVnaHRlcnMgb2YgSHlkcm9waGlpbmFlO0plc3RlciBLaW5nIFdlYXBvbjtDb2xvc3NhbCBDcnlzdGFsIENob3J1cyBlZmZlY3Q7QXhpYSBvZiBNZXRpcmE7U3RhZmYgb2YgR3VuLVl1O0JsYWRlIG9mIFRlYXJzIGFuZCBDcm93biBvZiBUZWFycztGbHV0dGVyaW5nIFN0YWZmIFYgMi4wO01vbGRlcmluZyBNYXNrIG9mIEthO0dvbGRlbiBTdWxsZW4gSG9sbG93IFYgMy4yO0NsYXdzIG9mIHRoZSBIaWRkZW4gSGl2ZTtGbGFtaW5nIFNjZXB0ZXIgb2YgQW5jZXN0cmFsIEx1Y2s7QXVzcGljZSBvZiB0aGUgV2h5cmxlZ3lnZSBQcmVtO1NhZ2FzIG9mIHRoZSBDeW11cnJpbiBTYWdlO0FsbHV2aW9uIFByb3BoZWN5O0dvbGRlbiBTaGFyZHMgb2YgRXhpbGU7TWFzayBvZiB0aGUgQ29uZmlkYW50O1BoYW50b20gQ29uY29yZDtTb2xhciBHeXJlO1NvbGFyIEZvcmdlO09yYiBvZiBSZW1pbmlzY2VuY2U7VGFpbCBvZiBSZW1pbmlzY2VuY2U7Q3ljbGVzIG9mIHRoZSBTZXJlbmUgV2luZ3M7VGhlIFRhaWwgQmFzaDtSb3lhbCBEZWNyZWUgS25pZmUgQXR0YWNrO1NldmVyaW5nIENyZXN0IFYgMi4wO0N1aXJhc3Mgb2YgdGhlIE92ZXJzZWVyO0hvcm5zIG9mIE1vbnN0cm91cyBSZXByaXNhbCBQcmVtO1N0YWZmIG9mIFBlcnBsZXggUHJlbTtUaGUgQmFycmVuIFZlY3RvcjtBcm1zIG9mIERlc29sYXRpb24gUHJlbTtHb2xkZW4gTGFtYiB0byB0aGUgU2xhdWdodGVyO0h1c2ggb2YgRXRlcm5hbCBOaWdodDtHb2xkZW4gRW1weXJlYW47R29sZGVuIEdyYXNwaW5nIEJsdWRnZW9uIGVmZmVjdDtQbGF0ZSBvZiB0aGUgQ2VudHVyaW9uIFZhbmd1YXJkO0dvbGRlbiBHcmFzcGluZyBCbHVkZ2VvbjtHb2xkZW4gRnVsbC1Cb3JlIEJvbmFuemE7Q2Fubm9uIG9mIHRoZSBPY2N1bHRpc3RzIFB1cnN1aXQ7U291bCBEaWZmdXNlciBWIDIuMTtTYXZhZ2UgTWV0dGxlO0lyb24gU3VyZ2UgViAyLjI7VGhlIExpZ2h0bmluZyBPcmNoaWQgViAzLjA7Rm9jYWwgUmVzb25hbmNlIFYgMy4wO1BpbmsgQ29sb3IgZm9yIFRCO0ZyYWN0YWwgSG9ybnMgb2YgSW5uZXIgQWJ5c20gVVA7QmxhZGVzIG9mIHRoZSBGb3VsZmVsbCBDb3JydXB0b3IgUHJlbWl1bTtSZWN0aWZpZXI7QmxhY2tzaGllbGQgUHJvdG9kcm9uZSBBcm1vcjtCbGFja3NoaWVsZCBQcm90b2Ryb25lIE1pc3NpbGUgTGF1bmNoZXI7Um9sbGVybWF3c3RlciBhbmQgTWVjaGEgQm9vdHMgb2YgVHJhdmVsIE1rIElJSTtQaXNjZWFuIFB1bHZlcml6ZXI7QmxhZGUgb2YgdGhlIEFieXNzYWwgU2NvdXJnZTtHb2xkZW4gUGFsZSBNYXVzb2xldW07RGFyayBNZWFkb3cgTWFzc2FjcmUgSGVhZDtEYXJrIE1lYWRvdyBNYXNzYWNyZSBBcm1vcjtXYXRjaGVyIG9mIHRoZSBWaXJ1bGVudCBLcmFpdDtQbGF0aW5nIG9mIHRoZSBOZXRoZXJzd2FybSBWYW5ndWFyZDtDcmltc29uIEN5cnJpZGFlO1N5bHZhbiBDYXNjYWRlO1RlbXBlc3QgSGVsbSBvZiB0aGUgVGh1bmRlcmdvZCBQcmVtO1N1bmtlbiBFbWJsZW0gQWdoYW5pbSBFZmZlY3Q7QmxpbmsgRGFnZ2VyIGx2bCAyIFRJLTYgRWZmZWN0O0JvdHRsZSBUSS02IEVmZmVjdDsyNSBsdmwgcGluZztUSS01IGVmZmVjdCBEYWdvbjtGdWNrIERlbnk7RXVscyBTY2VwdGVyIFRJLTYgRWZmZWN0O0ZvcmNlIFN0YWZmIFRJLTYgRWZmZWN0O0xldmVsVXAgVEktNiBFZmZlY3Q7TWVrYW5pc20gVEktNiBFZmZlY3Q7TWpvbGxuaXIgVEktNiBFZmZlY3Q7UGhhc2UgQm9vdHMgVEktNiBFZmZlY3Q7UmFkaWFuY2UgVEktNiBFZmZlY3Q7Uml2ZXIgVmlhbCBCbHVlO1RJLTcgU2hpdmFzIEd1YXJkIEVmZmVjdDtUSS01IGVmZmVjdCBUZWxlcG9ydDtHdWFyZGlhbnMgb2YgdGhlIExvc3QgUGF0aCBEaXJlIFRvd2VycztHcmVlbiBVcmFsIEhVRDtEQUMgMjAxNSBDaGFvcyBLbmlnaHQgQ3Vyc29yIFBhY2s7VEktOCBGb3VudGFpbiBsdmwgMSBFZmZlY3Q7QmlnIFVuIFYgMy4wO01hcmsgb2YgdGhlIE1pc3RyYWwgRmllbmQgViAyLjE7RmVydmVudCBDb25zY3JpcHQgViAzLjA7QW5jaWVudCBNZWNoYW5pc207VGhlIEdhbGxvd3MgVW5kZXJzdHVkeSBTZXQ7UGF0dGVybiBvZiB0aGUgU2lsa2VuIFF1ZWVuO0JhdHRsZSBEcmVzcyBvZiB0aGUgUHJvdmVuO1RoZSBSYXQgS2luZztUaGUgS2VlbiBDb21tYW5kZXI7Rm9yZ290dGVuIFRhY3RpY2lhbjtEZWxpZ2h0cyBvZiBQZXRhbHVuYSBQYXRoZmluZGVyO0xlZ2FjeSBvZiB0aGUgRWxkd3VybSBDcmVzdDtBbnZpbCBvZiB0aGUgRWFydGh3cmlnaHQ7RmlyZXMgb2YgdGhlIFZvbGNhbmljIEd1YXJkO1RyaXVtcGggb2YgdGhlIEZvdXIgQ29ybmVycyBWIDIuMDtDcmVlZCBvZiB0aGUgT3V0bGF3IEh1bnRzbWFuO01pc3RyZXNzIG9mIHRoZSBMb25nIE5pZ2h0O0ZpcmVzIG9mIFZhc2h1bmRvbCBubyBlZmZlY3QgViAyLjE7TGFkeSBTeWx2YW5hcyBmb3IgRHJvdyAtIEZhbmdzIG9mIHRoZSBTaGFkb3djYXQ7QmVkcm9jayBTZXJlbml0eSBWIDMuMTtIYXJuZXNzIG9mIHRoZSBGaXNzdXJlZCBTb3VsO0FieXNzYWwgVm9ydGV4O0d1bmJvYXQgSGVnZW1vbiBWIDMuMDtUaGUgQmFwdGlzbSBvZiBNZWx0aW5nIEZpcmU7UHJvbWlzZSBvZiB0aGUgRmlyc3QgRGF3bjtEaXZpbmUgQW5jaG9yIFN0eWxlIDE7V2FyLUJ1cnJvdyBSYXZhZ2VyO0FybW9yIG9mIHRoZSBNb29ubGl0IFRoaWNrZXQgViAyLjE7SHVudGVyIG9mIEtpbmdzIFYgMi4wO1NlaXNtaWMgQmVyc2Vya2VyO01lbW9yaWVzIG9mIHRoZSBWb3cgRXRlcm5hbDtDcnlzdGFsIFNjYXZlbmdlcjtHYXJtZW50cyBvZiB0aGUgTmlnaHRzaWx2ZXIgU2VudGluZWwgViAyLjE7QWxsdXJlIG9mIHRoZSBEZWVwO1Zhbmd1YXJkIG9mIHRoZSBFbWVyYWxkIEluc3VyZ2VuY2U7Um9iZXMgb2YgdGhlIEhlcmV0aWMgViAyLjE7QmxhY2sgTmloaWxpdHk7Q3Vyc2VkIFplYWxvdDtBcm1vciBvZiB0aGUgU3RhbHdhcnQgU291bDtIZXJhbGQgb2YgTWVhc3VyZWxlc3MgUnVpbiBWIDIuMTtQaXRmYWxsIENydXNhZGVyO1ZlbmdlYW5jZSBvZiB0aGUgU3Vud2FycmlvcjtTY2F2ZW5nZXIgb2YgdGhlIEJhc2lsaXNrO0dvbGRlbiBOZXRoZXIgTG9yZHMgUmVnYWxpYSBTZXQgUHJlbTtNYXplIFdhdGNoZXIgU2V0O0N1bm5pbmcgQ29yc2FpcjtBbmNpZW50IE1hZ3VzIFN0eWxlIDI7V2FycmlvciBvZiB0aGUgUmVkIFNhbmQgViAyLjA7U3R5Z2lhbiBNYXc7RXRlcm5hbCBIYXJ2ZXN0O0RhbmNlciBvZiB0aGUgU3BpdGVmdWwgRXllIFYgMy4wO0dvbGQgU2t5bWFnZTtCYXN0aW9uIG9mIHRoZSBMaW9uc2d1YXJkO0Jlc3Rvd21lbnRzIG9mIHRoZSBDZW50dXJpb24gVmFuZ3VhcmQ7SGludGVybGFuZCBTdGFsa2VyO01lcmFudGggRHJhZ29vbjtGbHV0dGVyaW5nIEFtZXRoeXN0O01vbHRlbiBEZXN0cnVjdG9yO1N0b3JlZ2dhIDMgTFZMIFVsdCArIEljZSBUaW55O1BsdW5kZXIgb2YgdGhlIFNhdmFnZSBNb25nZXI7QnJhd2xlciBvZiB0aGUgR2xhY2llciBTZWEgViAzLjA7QXRyb2NpdGllcyBvZiB0aGUgQWJ5c3NhbCBTY291cmdlO1NjYWxlIG9mIHRoZSBSYXpvcnd5cm0gTGlnaHQ7RWNob2VzIG9mIHRoZSBFeXJpZSBWIDIuMDtGZXJvY2lvdXMgVG94aWNhbnQ7QmluZGluZ3Mgb2YgdGhlIEJhdHRsZXJhbmdlciBDaGFvdGljIFN0eWxlO1NrZWxldG9uIEtpbmcgUmV0dXJuIEZpbmFsIFYgMy4wO1JpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrOyAxMjN8fHw=