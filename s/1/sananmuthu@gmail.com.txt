limitHWID:: 1 000||| 111:: BE0A5CC3-D72D-1885-F18C-D45D647EF9B9 111||| 222:: $2y$10$M2EyZTM1NWY3OTVlYWMxNOhk1LIyhzBrlfe2AfuJ9r0OJt49B6/uu 222||| 123:: Immortal Invoker Kid;Tomo*kan Incarnate Hood;Tomo*kan Incarnate Armor;Tomo*kan Incarnate Arbalest;Tomo*kan Incarnate Tail;Dread Retribution - Bracers Alt;Dread Retribution - Cape Alt;Dread Retribution - Headwear Alt;Dread Retribution - Leg Armor Alt;Dread Retribution - Quiver Alt;Dread Retribution - Shoulder Armor Alt;Arcana Dread Retribution Master of Madness;Fractal Horns of Inner Abysm UP;Gold Color for TB;Scythes of Sorrow;Demon Form of the Foulfell Corruptor UP;Scorching Talon;Mace of Aeons Prem;Jewel of Aeons;Faceless Madness;Bracers of Aeons;Juggernaut Arcana Red Bladeform Origins;Sullen Harvest;Sullen Hollow Prem;Sullen Rampart;Darkbrew Enforcer and Eternal Radiance Blades and Midas Knuckles MegaPack;Bristleback MegaPack;Mars TI10 Collectors Cache MegaPack;Monkey King Arcana MegaPack;Timbersaw MegaPack;Axe full Immortals Megapack alt;Spirit Breaker MegaPack;Windranger Arcana style 1 (Blue Bird) + Full WR immortal;Blightfall;Shatterblast Set;Wrath of the Celestial Sentinel;Manifold Paradox Bloodroot Guard;Outworld Devouver MegaPack;AntiMage Female Persona The Disciples Path Anti-Mage Arcana AMa;Puppet Pudge Persona (you can add Hook) UP;Golden Dark Maw Inhibito and Golden Profane Union and Golden Dread Requisition Lifestealer Immortals Megapack; 123|||