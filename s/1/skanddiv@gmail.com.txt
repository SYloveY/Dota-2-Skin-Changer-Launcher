limitHWID:: 1 000||| 111:: 7F620220-5522-11E2-87FE-30F9EDDACB35 111||| 222:: c6c95d4a15d25f067883bb5fb78db08a62d636cff81f50b157a3dfd8a3c9125e323d017e406ed5b575505b39e684364fdb7c921a1f504b222d2d146a8e12c6e1 222||| 123:: drive_dir::Apogee of the Guardian Flame;drive_dir::Tunic of the Wandering Flame;drive_dir::Cinder Sensei Style;drive_dir::Rapier of the Burning God;drive_dir::Cinder Sensei Off Hand Weapon;drive_dir::Merry Wanderer*s Brush Prem;drive_dir::Blossom of the Merry Wanderer;drive_dir::Queen of Pain Arcana MegaPack;drive_dir::Shadow Fiend Arcana Demon Eater;drive_dir::Foulfell Corruptor;drive_dir::Fractal Horns of Inner Abysm UP;drive_dir::Scythes of Sorrow;drive_dir::Span of Sorrow;drive_dir::Blade of Tears and Crown of Tears;drive_dir::Shadow in the Deep Armor;drive_dir::Sea Rakes Bridle;drive_dir::Hydrakan Latch;drive_dir::Demon Form of the Foulfell Corruptor UP;drive_dir::Reflections Shade Color for TB;drive_dir::Timbersaw MegaPack;drive_dir::Scale of Bitter Spoil Immortal UP;drive_dir::Bitter Lineage Immortal Axes;drive_dir::Cape of the Wild West;drive_dir::Gloves of the Wild West;drive_dir::Hat of the Wild West;drive_dir::Shoulders of the Wild West;drive_dir::Muh Keen Gun;drive_dir::Golden Bracers of Forlorn Precipice;drive_dir::Harness of the Forgotten Tactician;drive_dir::Windranger Arcana style 2;drive_dir::Windranger Yellow Immortal Bird;drive_dir::Sylvan Cascade;drive_dir::Rainmaker V 4.0;drive_dir::Span of the Temple of the Fallen Sun;drive_dir::Solar Forge Prem;drive_dir::Blaze of Oblivion Supernova;drive_dir::Memories of the Vow Eternal;drive_dir::Crown of the Malignant Rule;drive_dir::Armor of Vile Reliquary;drive_dir::Blistering Shade;drive_dir::Mantle of Vile Reliquary;drive_dir::Sword of the Malignant Rule;drive_dir::Tempest Helm of the Thundergod + Righteous Thunderbolt;drive_dir::Tempest Revelation;drive_dir::Jagged Honor Bracer;drive_dir::Jagged Honor Banner;drive_dir::Juggernaut Arcana Bladeform Legacy;drive_dir::Jagged Honor Legs;drive_dir::Jagged Honor Blade;drive_dir::Toll of the Fearful Aria No Effect;drive_dir::Avowance of the Veiled Ones;drive_dir::Codicil of the Veiled Ones;drive_dir::Manifold Paradox PA Arcana Style 3;drive_dir::Jewel of Aeons;drive_dir::Bracers of Aeons;drive_dir::Battlefury;drive_dir::Antimage Wei Female (You can add Weapon and Head);drive_dir::Golden Basher Blades V 2.0;drive_dir::Phantom Ascension Belt;drive_dir::Phantom Ascension;drive_dir::Transversant Soul of the Crimson Witness Prem;drive_dir::Soul Diffuser Prem; 123|||