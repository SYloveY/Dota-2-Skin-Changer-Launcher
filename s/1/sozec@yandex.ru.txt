bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkWkdZeE5tRmtNMlJqTkRSbE56YzRaT0NjU2V5eU9pT2xJcjZ3VC9ZOXVQVk50S0RqQTFZVU8gMjIyfHx8IDEyMzo6IEJsb29kIFNoYXJkO0RyZWFka25pZ2h0IFBhdWxkcm9uO1JlZ2FsaWEgb2YgdGhlIFdyYWl0aCBMb3JkIEhlbG1ldDtDYXBlIG9mIHRoZSBEcmVhZGJvcm4gUmVnZW50O0FybXMgb2YgRXRlcm5hbCBSZWlnbjtDdWlyYXNzIG9mIHRoZSBTdG9uZW1hcmNoIFNvdmVyZWlnbjtUZW1wZXN0IEhlbG0gb2YgdGhlIFRodW5kZXJnb2QgUHJlbTtDb250cm9scyBvZiB0aGUgRm9ydGlmaWVkIEZhYnJpY2F0b3I7SGVsbWV0IG9mIHRoZSBGb3J0aWZpZWQgRmFicmljYXRvcjtCYWxsaXN0YSBvZiB0aGUgRm9ydGlmaWVkIEZhYnJpY2F0b3I7U2hvdWxkZXJzIG9mIHRoZSBGb3J0aWZpZWQgRmFicmljYXRvcjtDYW5ub24gb2YgdGhlIEZvcnRpZmllZCBGYWJyaWNhdG9yO0h5ZHJha2FuIExhdGNoO1NoYXJrIENvd2w7U2VycmFrdXJhO0FybWQ5519ciBvZiB0aGUgRXhpbGVkIFJvbmluO1NpZ2lsIE1hc2sgb2YgdGhlIEJsYWRla2VlcGVyO0Fyc2VuYWwgb2YgdGhlIEJsYWRla2VlcGVyO0FyZ2VudCBEZWNpbWF0b3IgQXJtcztIZWFsaW5nIEZvdW50IG9mIHRoZSBMb3N0IElzbGVzO0hlbGxmaXJlIEluc3VyZ2VudCBBcm1zO0RyZXNzIG9mIHRoZSBCZXdpdGNoaW5nIEZsYXJlO1RoZSBTY2FybGV0IEZsYXJlIEhlYWQ7V2luZ3Mgb2YgdGhlIEZpcmVmbGlnaHQgU2Npb247RHJhZ29uY2xhdyBIb29rO0Rvb21zZGF5IFJpcHBlciBTaG91bGRlcjtDaG9wcGVyIG9mIHRoZSBNYWQgSGFydmVzdGVyO1NtYWxsIFRhc3NlbHMgb2YgdGhlIEJsYWNrIERlYXRoO0RpcmVjb3VydCBKZXN0ZXIgQmVsdDtCbG9vZHN0YWluZWQgQnJpdGNoZXM7V3Jpc3QgU2hhY2tsZXMgb2YgdGhlIEJsYWNrIERlYXRoO0Jsb29kZmVhdGhlciBXaW5ncztUZWFyIG9mIEFnb255O1RoZSBMaWdodG5pbmcgT3JjaGlkO0NvbXBsZXRlIFJvc2Ugb2YgdGhlIENvcnJpZGFuIE1hZXN0cm87Q29tcGxldGUgR2FyYiBvZiB0aGUgQ29ycmlkYW4gTWFlc3RybztMaW5hIE1lZ2EtS2lsbHM7TGluYSBBbm5vdW5jZXI7QmFieSBSb3NoYW4gUHJlbTtBY2lkIEh5ZHJhIEN1cnNvciBQYWNrO0lyb24gQnJhbmNoIEdHO1F1ZXN0aW9uIG1hcmsgRGVueTtFbGRlciBCYXJrIEhVRDtUZXJyYWluIC0gU3ByaW5nO0EgRGlyZSBHYXplO0V4YWN0IE1hcmtzbWFuO1N0YWdoZWFydCBTb3ZlcmVpZ247VGhlIEJhcHRpc20gb2YgTWVsdGluZyBGaXJlO1RoZSBXaXRjaCBIdW50ZXIgViAyLjA7VGltZSBXYW5kZXJlcjtFbGR3dXJtcyBUb3VjaDtUcmlhbHMgb2YgdGhlIEJsYWNrZ3VhcmQgTWFndXMgTm8gZWZmZWN0cztIb25vcmVkIFNlcnZhbnQgb2YgdGhlIEVtcGlyZTtTZW50aW5lbCBvZiB0aGUgTHVjZW50IEdhdGUgViAyLjE7Q3JlZXBpbmcgU2hhZG93O0V0ZXJuYWwgSGFydmVzdDsgMTIzfHx8