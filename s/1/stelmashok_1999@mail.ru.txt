bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkTVdJME56YzVOV0kwTlRReFpqWmlOT2pZWFh2RWxWZTJMUjAyNWlyVmVSUHZrZ05uLk1DQ3kgMjIyfHx8IDEyMzo6IFJhemlsKnMgUmV2aXRhbGl6ZXIgR2FyYjtSYXppbCpzIFJldml0YWxpemVyIEFybXM7VEk5IENhY2hlIEJhbmUgRW5kbGVzcyBOaWdodG1hcmUgSGVhZDtWaXNhZ2Ugb2YgdGhlIFNsZWVwbGVzcyBTZWN0O0NvdmVyIG9mIHRoZSBTbGVlcGxlc3MgU2VjdDtCZXN0b3dlZCBTaG91bGRlcnM7SGVpciBvZiBUZXJyb3IgV2luZ3M7TGVnYWN5IG9mIGEgTG9zdCBBZ2UgLSBQdGVyb2hhd2s7QXJtcyBvZiB0aGUgQml0dGVyd2luZyBMZWdhY3k7U2VlciBvZiBJbmZpbml0eSBTcGFjZSBFaWRvbG9uO1lvYmEgV2lzcDtCYXJkaW5nIG9mIENoaW1lcmljIFJhcHBvcnQ7R3JlYXQgU2FnZSpzIFJlY2tvbmluZztEcmFnb25jbGF3IEhvb2s7SG9ybnMgb2YgRXRlcm5hbCBIYXJ2ZXN0O0FybXMgb2YgRGVzb2xhdGlvbjtQYXVsZHJvbnMgb2YgRXRlcm5hbCBIYXJ2ZXN0O1JlY2x1c2UgUmVlZiBEZW5pemVuO01hZWxyYXduKnMgYWJ5c3NhbCBHdWFyZCBBcm1zO0JlbHQgb2YgdGhlIERyb3duaW5nIFRyZW5jaDtCZWx0IG9mIHRoZSBGcm9zdHNoYXJkIEFzY2VuZGFudDtQbGF0aW5nIG9mIHRoZSBOZXRoZXJzd2FybSBWYW5ndWFyZDtNYWxlZmljIERyYWtlcyBIb29kIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7VGVtcGVzdCBIZWxtIG9mIHRoZSBUaHVuZGVyZ29kIFByZW07TWlnaHR5IEJvYXI7WWVhciBiZWFzdCBiYXR0bGUgbG9hZGluZ3NjcmVlbjtEZXVzIEV4IEFubm91bmNlcjtUZXJyYWluIC0gU3ByaW5nO0pvdXJuZXkgUm9zaGFuO1dhcmQgb2YgdGhlIFBob2VuaXg7QWNpZCBIeWRyYSBDdXJzb3IgUGFjaztNZXJjaWxlc3MgTWlzdHM7QXJhYmlhbiBSaWRlcnM7VGhlIFdpdGNoIEh1bnRlciBWIDIuMDtUaGUgT2JsaXRlcmF0b3Igb2YgTWFnaWM7U3BvaWxzIGZyb20gdGhlIFNoaWZ0aW5nIFNvcmNlcmVyIFYgMi4wO1RpbWUgV2FuZGVyZXI7QmxhY2sgT3JjIFdhcmJvc3MgViAyLjA7TWFyYXVkZXIgb2YgdGhlIENoYW9zIFdhc3RlcztIYXJ2ZXN0cyBIb3VuZDtUaGUgR2FsbG93cyBVbmRlcnN0dWR5IFNldDtLaXQgb2YgdGhlIEZpcnN0IEh1bnQgViAyLjE7RW1lcmFsZCBGcmVuenkgU2V0O1dhcnJpb3Igb2YgQXJlbmEgU2V0O0ZlYXN0IG9mIHRoZSBHbHV0dG9ucyBMYXJkZXI7V2FyIEJyZWFrZXJzIFNldDtSb3NlIEFuZCBUaGUgQmVhc3Q7Q2xvYWsgb2YgdGhlIEZhbGxlbjtBcnRpc2FuIG9mIEhhdm9jIFYgMy4wO1JveWFsIFdpbnRlcmJsb29tO0xpdHRsZSBXaXRjaCBTZXQ7U21va3kgRHJlYW1lcjtLaXJpbiBSaWRlciBTZXQ7RXRlcm5hbCBEYWVtb24gUHJpbmNlIG9mIEtob3JuZTtEcmFnb25zIEFzY2Vuc2lvbiBWIDMuMDtFbGR3dXJtcyBUb3VjaDtUaGUgSmFkZSBHZW5lcmFsO0NyaW1zb24gQmVhc3QgViAzLjA7RWZyaXQgU3VsdGFuIFNldDtBbWJlcmxpZ2h0IFJhaW1lbnQgViAyLjA7QW5jaWVudCBDdWx0aXN0IFYgMi4xO0R3YXJmIEd5cm9jb3B0ZXI7VGhlIEJhcHRpc20gb2YgTWVsdGluZyBGaXJlO1JlbGljcyBvZiBHbG9yaWQ5519cyBJbnNwaXJhdGlvbjtUaGUgUGF0aCBvZiBPZG9jb2VsZXVzO0FuY2hvcnMgb2YgdGhlIEFnZWxlc3MgRGVlcDtCbGF6aW5nIEVtcGlyZTtKaWFuZyBTaGlzIFJldmVuZ2U7Qmxvb2R5IFJpcHBlcjtCbGF6aW5nIENvc21vcztEZW1vbnMgQmFjY2hhbmFsO1JlZGVtcHRpb24gb2YgdGhlIFJhaWRmb3JnZWQgUmlkZXI7SW1wZXJpYWwgRW52b3k7QXp1cml0ZSBXYXJkZW4gViAyLjE7U3BlbHVua2VycyBIYXVsO1NwaXJpdCBvZiBUaGUgU2FjcmVkIEdsb3ZlO1N0ZWxsYXIgSmFkZTtGdW5nYWwgTG9yZCBTZXQ7TGljaCBNYXN0ZXIgTmVjcm9tYW5jZXIgViAyLjE7VW5mZXR0ZXJlZCBNYWxldm9sZW5jZTtBbnRpcG9kZWFuIEFsbGllcztFbWVyYWxkIE1lY2hhbmlzbTtHb2RoYW1tZXI7TWFuZGF0ZSBvZiB0aGUgTmFtZWxlc3M7Q3J1ZWwgUmVwcmlzYWw7QXJteSBPZiBUaGUgVmFzdCBTZWE7TmlydmFuYSBTcGlyaXR1YWw7RmFlcmllc25hcCBTcHJpdGVsZWFmO1NjYXZlbmdlciBvZiB0aGUgQmFzaWxpc2s7UmVzZWFyY2hlciBvZiBPYmxpdmlvbiBNYWdpYztNYWdpc3RlciBvZiB0aGUgTmFycm93IEZhdGVzO0FuY2llbnQgTWFndXMgU3R5bGUgMTtTb3ZlcmVpZ24gb2YgdGhlIEtyYXkgTGVnaW9ucyAyc3QgU3R5bGU7RXRlcm5hbCBIYXJ2ZXN0O1RveGljIERlYXRoIEVhdGVyO015c3RpYyBJbnN0cnVtZW50cyBvZiBUYW5nLUtpIFYgMi4wO1NoaXZzaGVsbCBDcmF3bGVyO0Jlc3Rvd21lbnRzIG9mIHRoZSBDZW50dXJpb24gVmFuZ3VhcmQ7Rmxvd2luZyBFbnRyb3B5IFYgMi4wO0lyb25iYXJkZSBDaGFyZ2VyO0FybWF0dXJlIG9mIHRoZSBCZWxsaWdlcmVudCBSYW0gQmx1ZTtDb3JyaWRhbiBNYWVzdHJvIFYgMi4wO01hcmNoIG9mIHRoZSBQb3dkZXJrZWcgUGF0cm9sO1NhbXVyYWkgU2V0O1VTU1IgVElOS0VSO1JhdWNvdXMgR2F0ZWNyYXNoZXI7U3RvcmVnZ2EgMyBMVkwgVWx0ICsgSWNlIFRpbnk7QmFyayBvZiB0aGUgQWdlbGVzcyBXaXRuZXNzIERpc3Rpbmd1aXNoZWQ7QmFycmllciBSb2d1ZTtEaXJnZXN3b3JuIER5bmFzdHk7UmlmdCBDaGFtcGlvbjtGZXJvY2lvdXMgSGVhcnQ7Q29ycnVwdGlvbiBvZiB0aGUgVmlydWxlbnQgS3JhaXQ7RW1iZXIgVGlwcGVkIENhcmFwYWNlIFNldDtGZWF0aGVyc3dpbmc7RmF0aGVyIE9mIFNwaXJpdHM7SGF1bnRlZCBMb3JkIFYgMy4wOyAxMjN8fHw=