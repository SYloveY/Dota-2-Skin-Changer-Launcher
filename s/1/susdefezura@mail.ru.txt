bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMUUwMEFGMjAtMDA4Qy00NjAwLTdGNDItRjQ2RDA0OUMwMDlFIDExMXx8fCAyMjI6OiAkMnkkMTAkWmpFeU1UVTJZemszTlRneU5EazVOZVZDUElSTDNNS3JwdThkVG02dnJJVjU2Z0k4V2gwc3EgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6QnJvb2Rtb3RoZXIgQW5pbWUgVm9pY2U7ZHJpdmVfZGlyOjpDaGl0b2dlIE1lZ2EtS2lsbHM7ZHJpdmVfZGlyOjpCcm9vZCBIdW50ZXIgSFVEO2RyaXZlX2Rpcjo6U0YgUlUgQXJjYW5lIHZvaWNlO2RyaXZlX2Rpcjo6TGVnaW9uIENvbW1hbmRlciBFTkcgQXJjYW5lIHZvaWNlO2RyaXZlX2Rpcjo6QW5jZXN0cmFsIEx1Y2sgU2V0O2RyaXZlX2Rpcjo6Q3J5IERvb20gVWx0O2RyaXZlX2Rpcjo6VEktOCBMVkwgVVAgRWZmZWN0O2RyaXZlX2Rpcjo6QmxpbmsgRGFnZ2VyIGx2bCAxIFRJLTYgRWZmZWN0O2RyaXZlX2Rpcjo6VEktMTAgRXVsIFNjZXB0ZXIgRWZmZWN0O2RyaXZlX2Rpcjo6QWVnaXMgYW5kIFJvc2hhbiBTdC4gVmFsZW50aW5lIERheTtkcml2ZV9kaXI6OlRJLTEwIEJvdHRsZSBFZmZlY3Q7ZHJpdmVfZGlyOjpRdWVzdGlvbiBtYXJrIERlbnk7ZHJpdmVfZGlyOjpUSS0xMCBNam9sbG5pciBFZmZlY3Q7ZHJpdmVfZGlyOjpMZXRzUmFjZSBMb2FkaW5nc2NyZWVuO2RyaXZlX2Rpcjo6TGFzdGhpdCBHb2xkIC0gTmV3IEJsb29tIDIwMTk7ZHJpdmVfZGlyOjpXZWF0aGVyIFNwcmluZztkcml2ZV9kaXI6OlRlcnJhaW4gLSBTcHJpbmc7ZHJpdmVfZGlyOjpSaXZlciBWaWFsIE5vbmU7ZHJpdmVfZGlyOjpIb25vcmVkIFNlcnZhbnQgb2YgdGhlIEVtcGlyZTtkcml2ZV9kaXI6OlNjYXZlbmdlciBvZiB0aGUgQmFzaWxpc2s7ZHJpdmVfZGlyOjpUb3hpYyBEZWF0aCBFYXRlcjtkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBEaWFib2xpY2FsIEZpZW5kO2RyaXZlX2Rpcjo6QXJtcyBvZiBEZXNvbGF0aW9uO2RyaXZlX2Rpcjo6RXhhY3QgTWFya3NtYW47ZHJpdmVfZGlyOjpBbGx1cmluZyBNZXNtZXI7ZHJpdmVfZGlyOjpTb3VscyBUeXJhbnQgSGVhZDtkcml2ZV9kaXI6OlJlbWluaXNjZW5jZSBvZiBEcmVhbXM7ZHJpdmVfZGlyOjpFaWRlbG9uIG9mIFR3aXN0ZWQgTWFlbHN0cm9tO2RyaXZlX2Rpcjo6R2VvZGVzaWMgRWlkb2xvbjtkcml2ZV9kaXI6OkV4cG9uZW50IG9mIHRoZSBFbmRsZXNzIFN0YXJzO2RyaXZlX2Rpcjo6SGF2b2Mgb2YgRHJhZ29uIFBhbGFjZSBWIDIuMDtkcml2ZV9kaXI6OkNvdmVuYW50IG9mIHRoZSBEZXB0aHMgU3Bpcml0O2RyaXZlX2Rpcjo6QWNvbHl0ZSBvZiB0aGUgTG9zdCBBcnRzO2RyaXZlX2Rpcjo6S2lkcyBPcmI7ZHJpdmVfZGlyOjpHcmFuZCBBYnNjZXNzaW9uIEhvb2sgQnVuZGxlO2RyaXZlX2Rpcjo6VGktOSBSb3NoYW47ZHJpdmVfZGlyOjpVU1NSIG1lbGVlIGNyZWVwO2RyaXZlX2Rpcjo6R3VhcmRpYW5zIG9mIHRoZSBMb3N0IFBhdGggUmFkaWFudCBUb3dlcnM7ZHJpdmVfZGlyOjpHdWFyZGlhbnMgb2YgdGhlIExvc3QgUGF0aCBEaXJlIFRvd2Vycztkcml2ZV9kaXI6OkNhZGVuemEgTWFnaWMgTWFzdGVyIExvYWRpbmcgU2NyZWVuO2RyaXZlX2Rpcjo6Q3VzdG9tIERhc2hib2FyZCAzNTtkcml2ZV9kaXI6Ok55YXJ1a28gZm9yIExpb24gYnkgUGF0Y2hvdWxpIEtub3dsZWRnZTtkcml2ZV9kaXI6OkJsYWRlIG9mIFRlYXJzIGFuZCBDcm93biBvZiBUZWFycztkcml2ZV9kaXI6OkVydXB0aW5nIFdyYXRoIFYgMi4wO2RyaXZlX2Rpcjo6TG9zdCBSYW5nZXI7ZHJpdmVfZGlyOjpGaXJlZmxpZ2h0IFNjaW9uO2RyaXZlX2Rpcjo6SHVudGVycyBHbG9yeTtkcml2ZV9kaXI6OkZpcmVzIG9mIHRoZSBWb2xjYW5pYyBHdWFyZDtkcml2ZV9kaXI6OlNvdWwgTGlsaXRoO2RyaXZlX2Rpcjo6U291bCBEaWZmdXNlciBWIDIuMTtkcml2ZV9kaXI6OkJpbmRpbmdzIG9mIERlZXAgTWFnbWE7ZHJpdmVfZGlyOjpQeXJleGFlYyBGbG9lO2RyaXZlX2Rpcjo6Qmx1ZWhlYXJ0IFNvdmVyZWlnbiBWIDIuMDtkcml2ZV9kaXI6OlNhY2NoYXJpbmUgU2Fib3RldXI7ZHJpdmVfZGlyOjpBdXNwaWNlIG9mIHRoZSBXaHlybGVneWdlIFByZW07ZHJpdmVfZGlyOjpNYXJrIG9mIHRoZSBNaXN0cmFsIEZpZW5kIFYgMi4xO2RyaXZlX2Rpcjo6QmlnIFVuIFYgMy4wO2RyaXZlX2Rpcjo6UG9sYXIgVXJzYTtkcml2ZV9kaXI6OlB1cnBsZSBGaXJlIENsaW5reiBGdW4gTW9kIFYgMy4wO2RyaXZlX2Rpcjo6R3J5cGhvbiBSaWRlciBTZXQ7ZHJpdmVfZGlyOjpNb25zdHJvdXMgUmVwcmlzYWw7ZHJpdmVfZGlyOjpWYW5xdWlzaGluZyBEZW1vbnMgR2VuZXJhbCBWIDMuMTtkcml2ZV9kaXI6OldhcnJpb3JzIG9mIHRoZSBEZW1vbiBTdG9uZSBWIDMuMTtkcml2ZV9kaXI6OkJlc3Rvd21lbnRzIG9mIHRoZSBEaXZpbmUgQW5jaG9yIGVmZmVjdHM7ZHJpdmVfZGlyOjpTaHJvb20gVGhpbmc7ZHJpdmVfZGlyOjpBbGxmYXRoZXIgb2YgTmF0dXJlIFNldDtkcml2ZV9kaXI6OkZvcmdvdHRlbiBUYWN0aWNpYW47ZHJpdmVfZGlyOjpEZWF0aCBCbG9zc29tIFNldDtkcml2ZV9kaXI6OkZ1cnkgb2YgV2FyIEdvZDtkcml2ZV9kaXI6OlRlbmd1IEd1YXJkaWFuIFNldDtkcml2ZV9kaXI6OkFzY2VuZGFuY2Ugb2YgdGhlIFJpbWUgTG9yZCAxc3QgU3R5bGU7ZHJpdmVfZGlyOjpNaXNnaXZpbmdzIG9mIHRoZSBFbWVyYWxkIEFnZTtkcml2ZV9kaXI6OkJpbmRpbmdzIG9mIHRoZSBCYXR0bGVyYW5nZXIgQ2hhb3RpYyBTdHlsZTtkcml2ZV9kaXI6OkRyYWdvbiBHdWFyZGlhbjtkcml2ZV9kaXI6OkRhdGFzdGFyIFByb2dlbml0b3IgKEFsdGVyIEFyY2FuYSk7ZHJpdmVfZGlyOjpFcG9jaCBvZiB0aGUgQWJ5c207ZHJpdmVfZGlyOjpFcG9jaCBvZiB0aGUgQWJ5c20gU3BpZGVybGluZ3M7ZHJpdmVfZGlyOjpXYXItQnVycm93IFJhdmFnZXI7ZHJpdmVfZGlyOjpHdW5ib2F0IEhlZ2Vtb24gViAzLjA7ZHJpdmVfZGlyOjpHb2xkZW4gRmxvb2RtYXNrIGVmZmVjdDtkcml2ZV9kaXI6OkV4cGxvc2l2ZSBNYW5pYWM7ZHJpdmVfZGlyOjpGbGFzaHBvaW50IFByb3NlbHl0ZSAtIEhlYWQ7ZHJpdmVfZGlyOjpDaGFybWVyIG9mIEZpcmVzbmFrZTtkcml2ZV9kaXI6Ok1hZ2lzdGVyIG9mIHRoZSBOYXJyb3cgRmF0ZXM7ZHJpdmVfZGlyOjpGb3JtIG9mIHRoZSBHcmVhdCBDYWxhbWl0eSBWIDIuMTtkcml2ZV9kaXI6OlRyYWlsIG9mIHRoZSBHcmV5IEdob3N0O2RyaXZlX2Rpcjo6SXRzdWthIEtvdG9yaSBmb3IgV0sgYnkgUGF0Y2hvdWxpIEtub3dsZWRnZTtkcml2ZV9kaXI6OkRhcmtmYWxsIFdhcmRlbjtkcml2ZV9kaXI6OkdvbGRlbiBNYXNrIG9mIE1ldGlyYTtkcml2ZV9kaXI6OkJsb29kc3RvbmUgQmxhZGUgUGFjaztkcml2ZV9kaXI6Ok1hc2sgb2YgdGhlIEJsb29kZm9yZ2U7ZHJpdmVfZGlyOjpBbnRpLU1hZ2UgVWx0aW1hdGUgUmVkIERyYWdvbjtkcml2ZV9kaXI6Ok1hbnRsZSBvZiB0aGUgQ2luZGVyIEJhcm9uIFN0eWxlIDE7ZHJpdmVfZGlyOjpDcnVjaWJsZSBvZiBSaWxlO2RyaXZlX2Rpcjo6TW9sdGVuIENsYXcgUHJlbTtkcml2ZV9kaXI6OkFuY2llbnQgTWVjaGFuaXNtO2RyaXZlX2Rpcjo6TWFyYXVkZXIgb2YgdGhlIENoYW9zIFdhc3Rlcztkcml2ZV9kaXI6OkdvbGRlbiBNb29uZmFsbCBQcmVtO2RyaXZlX2Rpcjo6RHVza2xpZ2h0IE1hcmF1ZGVyIFYgMi4xO2RyaXZlX2Rpcjo6U291bCBvZiBTdGVhbTtkcml2ZV9kaXI6Okhvb2Qgb2YgTHVjaWQgVG9ybWVudDtkcml2ZV9kaXI6OkhhcnZlc3RlZCBTaG91bGRlcnM7ZHJpdmVfZGlyOjpUaGUgUm93ZHkgRmlyZWJyYW5kO2RyaXZlX2Rpcjo6RmF0YWwgQmxvc3NvbSBWIDMuMDtkcml2ZV9kaXI6OkRlbGlnaHRzIG9mIFBldGFsdW5hIFBhdGhmaW5kZXI7ZHJpdmVfZGlyOjpCYXJyZW4gU3Vydml2b3IgViAyLjA7ZHJpdmVfZGlyOjpJbmZlcm5hbCBDaGllZnRhaW4gb2YgdGhlIENyaW1zb24gV2l0bmVzcztkcml2ZV9kaXI6OlJlbGVudGxlc3MgV2FyYnJpbmdlciBWIDMuMDtkcml2ZV9kaXI6OkxpZ2h0bmluZyBIYXJiaW5nZXI7ZHJpdmVfZGlyOjpXaGlzcGVycyBvZiB0aGUgRGFtbmVkIFdpbmdzO2RyaXZlX2Rpcjo6QnJpbmdlciBvZiBUcm91Ymxlcztkcml2ZV9kaXI6OkZvcmdvdHRlbiBSZW5lZ2FkZTtkcml2ZV9kaXI6OlNpbGVudCBFZGljdDtkcml2ZV9kaXI6OkhlcmFsZCBvZiBNZWFzdXJlbGVzcyBSdWluIFYgMi4xO2RyaXZlX2Rpcjo6VG9sbCBvZiB0aGUgRmVhcmZ1bCBBcmlhO2RyaXZlX2Rpcjo6R2VuaWUgU3Bpcml0O2RyaXZlX2Rpcjo6Rmlyc3QgTmlnaHQgb2YgdGhlIFN1bW1lciBDaGlsZDtkcml2ZV9kaXI6OlZlbmdlYW5jZSBvZiB0aGUgU3Vud2Fycmlvcjtkcml2ZV9kaXI6OkJyZXdtYXN0ZXIgZnJvbSBIT1RTO2RyaXZlX2Rpcjo6UHJpc21hdGljIEdyYWNlO2RyaXZlX2Rpcjo6WnVsamluIGZvciBUcm9sbCBXYXJsb3JkIFN0eWxlIDM7ZHJpdmVfZGlyOjpJcmUgb2YgTW9sdGVuIFJlYmlydGg7ZHJpdmVfZGlyOjpOb3ZhIG9mIEdvbGRlbiBOaXJ2YW5hO2RyaXZlX2Rpcjo6VmFudGFnZSBvZiB0aGUgQnJlYWNoIFdhcmRlbjtkcml2ZV9kaXI6OldyYXRoIG9mIEthIFYgMi4xO2RyaXZlX2Rpcjo6SGVhdmVubHkgTGlnaHQ7ZHJpdmVfZGlyOjpQYWRkYXBvbiBvZiBSaWJiaXRhciBWIDQuMDtkcml2ZV9kaXI6Ok1vcmJpZmljIFByb3Zpc2lvbjtkcml2ZV9kaXI6OkJvbmRzIG9mIE1hZG5lc3MgU2V0IFN0eWxlIDE7ZHJpdmVfZGlyOjpVbmZldHRlcmVkIE1hbGV2b2xlbmNlO2RyaXZlX2Rpcjo6R29sZCBTa3ltYWdlO2RyaXZlX2Rpcjo6Q3Vyc2VkIFplYWxvdDtkcml2ZV9kaXI6OkJhcmsgb2YgdGhlIEFnZWxlc3MgV2l0bmVzcyBEaXN0aW5ndWlzaGVkO2RyaXZlX2Rpcjo6U3RlZWwgS2luZztkcml2ZV9kaXI6Ok1hc2sgb2YgdGhlIENvbmZpZGFudDtkcml2ZV9kaXI6OkJsaXNzZnVsIEtuYXZlIENvYXQ7ZHJpdmVfZGlyOjpCbGlzc2Z1bCBLbmF2ZSBSYXBpZXI7ZHJpdmVfZGlyOjpBcm1hdHVyZSBvZiB0aGUgQmVsbGlnZXJlbnQgUmFtIFJlZDtkcml2ZV9kaXI6OlNoYXR0ZXJlZCBHcmVhdHN3b3JkIFYgMi4wO2RyaXZlX2Rpcjo6Q3JpbXNvbiBDeXJyaWRhZTtkcml2ZV9kaXI6OldpbmdzIG9mIHRoZSBBcmN0aWMgUmVjbHVzZTtkcml2ZV9kaXI6OlB1cHBldCBTdW1tb25lcjtkcml2ZV9kaXI6OlRpbmtlciBTY2FyZWNyb3cgU2V0O2RyaXZlX2Rpcjo6Qmxvb2RmZWF0aGVyIFdpbmdzIFByZW07ZHJpdmVfZGlyOjpCbG9vZGZlYXRoZXIgRmVhc3Q7ZHJpdmVfZGlyOjpBdHJvY2l0aWVzIG9mIHRoZSBBYnlzc2FsIFNjb3VyZ2U7ZHJpdmVfZGlyOjpNb2xva2F1IFN0YWxrZXI7ZHJpdmVfZGlyOjpXYXRjaGVyIG9mIHRoZSBWaXJ1bGVudCBLcmFpdDtkcml2ZV9kaXI6OlNhdmFnZSBNZXR0bGU7ZHJpdmVfZGlyOjpUaHVuZGVyaW5nIEZsYWlsO2RyaXZlX2Rpcjo6V2FyZ29kIG9mIHRoZSBCbGFkZWtlZXBlcjtkcml2ZV9kaXI6OkxvbGxpcG9wIEp1Z2dlcm5hdXQgViAzLjA7ZHJpdmVfZGlyOjpGbHV0dGVyaW5nIEFtZXRoeXN0O2RyaXZlX2Rpcjo6Rmx1dHRlcmluZyBBbWV0aHlzdCBUcmFwICsgSWNvbjtkcml2ZV9kaXI6OktvdGwgSWxsdW1pbmF0ZSBSYW07ZHJpdmVfZGlyOjpEZW1vbmljIFB1Z25hIFYgMy4wO2RyaXZlX2Rpcjo6QXVzcGljaWQ5519cyBTZWFkd2VsbGVyO2RyaXZlX2Rpcjo6QWxsdXZpb24gUHJvcGhlY3k7ZHJpdmVfZGlyOjpDcm93biBvZiBUaGUgTmlnaHR3b3JsZDtkcml2ZV9kaXI6OlRlbXBlc3QgSGVsbSBvZiB0aGUgVGh1bmRlcmdvZDtkcml2ZV9kaXI6OlJpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6VGlkZWh1bnRlciBLaWxsZXI7ZHJpdmVfZGlyOjpKZXN0ZXIgS2luZyBBcm1zO2RyaXZlX2Rpcjo6Q3JhdGUgb2YgdGhlIFNwZWx1bmtlcjtkcml2ZV9kaXI6Okplc3RlciBLaW5nIEJhY2s7ZHJpdmVfZGlyOjpKZXN0ZXIgS2luZyBIZWFkO2RyaXZlX2Rpcjo6SmVzdGVyIEtpbmcgU2hvdWxkZXI7ZHJpdmVfZGlyOjpKZXN0ZXIgS2luZyBUYWlsO2RyaXZlX2Rpcjo6SmVzdGVyIEtpbmcgV2VhcG9uOyAxMjN8fHw=