bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDMwMDAyMDAtMDQwMC0wNTAwLTAwMDYtMDAwNzAwMDgwMDA5IDExMXx8fCAyMjI6OiAkMnkkMTAkTm1JeE5UUmpOalppWkRWbE5qbGxNLjRTOHFqTnpDZlQ1c0R3SUFGd0VqSTRJUXBzRzRKc2kgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6QXJtIG9mIHRoZSBEcmFnb24qcyBEaXNjaXBsZTtkcml2ZV9kaXI6OlRoZSBPYmxpdGVyYXRvciBvZiBNYWdpYztkcml2ZV9kaXI6OlRoZSBXaXRjaCBIdW50ZXIgViAyLjA7ZHJpdmVfZGlyOjpTcG9pbHMgZnJvbSB0aGUgU2hpZnRpbmcgU29yY2VyZXIgViAyLjA7ZHJpdmVfZGlyOjpUaGUgQXJtb3Igb2YgVHVzdGFrdXJpIFYgMi4wO2RyaXZlX2Rpcjo6VGVtcGVzdCBIZWxtIG9mIHRoZSBUaHVuZGVyZ29kO2RyaXZlX2Rpcjo6VGVtcGVzdCBIZWxtIG9mIHRoZSBUaHVuZGVyZ29kIFByZW07ZHJpdmVfZGlyOjpFdGVybmFsIEhhcnZlc3Q7ZHJpdmVfZGlyOjpCbGluayBEYWdnZXIgbHZsIDEgVEktNiBFZmZlY3Q7ZHJpdmVfZGlyOjpUSS0xMCBCb3R0bGUgRWZmZWN0O2RyaXZlX2Rpcjo6WXVsc2FyaWEqcyBHbGFjaWVyIFByZW07ZHJpdmVfZGlyOjpJY2UgQmxvc3NvbTtkcml2ZV9kaXI6Ok5vdGhsaWMgQnVyZGVuIFByZW07ZHJpdmVfZGlyOjpEZWxpZ2h0cyBvZiBQZXRhbHVuYSBQYXRoZmluZGVyO2RyaXZlX2Rpcjo6VGhlIEphZGUgR2VuZXJhbDtkcml2ZV9kaXI6OkJyYWNlcnMgb2YgdGhlIENhdmVybiBMdW1pbmFyO2RyaXZlX2Rpcjo6QWNvbHl0ZSBvZiB0aGUgTG9zdCBBcnRzO2RyaXZlX2Rpcjo6SW5mZXJudXM7ZHJpdmVfZGlyOjpHZW9kZXNpYyBFaWRvbG9uO2RyaXZlX2Rpcjo6QWJ5c3NhbCBWb3J0ZXg7ZHJpdmVfZGlyOjpKZXdlbCBvZiBBZW9ucyBQcmVtO2RyaXZlX2Rpcjo6VGltZWJyZWFrZXIgUHJlbTtkcml2ZV9kaXI6OkJyYWNlcnMgb2YgQWVvbnMgUHJlbTtkcml2ZV9kaXI6OkVkZ2Ugb2YgdGhlIExvc3QgT3JkZXI7ZHJpdmVfZGlyOjpTYW11cmFpIG9mIFdpbmQgViAzLjA7ZHJpdmVfZGlyOjpTdXNhbm8gT3MgRGVzY2VuZGFudDtkcml2ZV9kaXI6OkxlZ2FjeSBvZiB0aGUgRmFsbGVuIExlZ2lvbjtkcml2ZV9kaXI6Okhvbm9yZWQgU2VydmFudCBvZiB0aGUgRW1waXJlO2RyaXZlX2Rpcjo6RmlyZSBMb3R1cyBCZWx0O2RyaXZlX2Rpcjo6QmxhemluZyBDb3Ntb3M7ZHJpdmVfZGlyOjpNdWxjdGFudCBQYWxsO2RyaXZlX2Rpcjo6RmluIEtpbmcqcyBDaGFybSBQcmVtO2RyaXZlX2Rpcjo6RnVyeSBvZiBXYXIgR29kO2RyaXZlX2Rpcjo6QXJlbmEgQ2hhbXBpb24gU2hpZWxkO2RyaXZlX2Rpcjo6R29kKnMgTWVyY3k7ZHJpdmVfZGlyOjpFeWUgb2YgdGhlIEJlaG9sZGVyO2RyaXZlX2Rpcjo6QmxhZGUgb2YgVGVhcnMgYW5kIENyb3duIG9mIFRlYXJzO2RyaXZlX2Rpcjo6R29sZGVuIFN1bGxlbiBIb2xsb3cgViAzLjI7ZHJpdmVfZGlyOjpQbGFndWUgQmFyb24gSGF0O2RyaXZlX2Rpcjo6V3JhdGggb2YgS2EgViAyLjEgU3R5bGUgMjtkcml2ZV9kaXI6OldyYXRoIG9mIEthIFYgMi4xO2RyaXZlX2Rpcjo6TWFudGxlIG9mIHRoZSBDaW5kZXIgQmFyb24gU3R5bGUgMTtkcml2ZV9kaXI6OkF1c3BpY2Ugb2YgdGhlIFdoeXJsZWd5Z2UgUHJlbTtkcml2ZV9kaXI6OlRhbGVzIG9mIHRoZSBHcmV5IFdhc3Rlcztkcml2ZV9kaXI6OkNsdWIgb2YgUGFndXM7ZHJpdmVfZGlyOjpHb2xkZW4gU2NhdmVuZ2luZyBHdXR0bGVzbHVnO2RyaXZlX2Rpcjo6R3JhbmQgQWJzY2Vzc2lvbiBIb29rIEJ1bmRsZTtkcml2ZV9kaXI6OlJpcHBlcnMgUmVlbDtkcml2ZV9kaXI6OkFuY2llbnQgTWFndXMgU3R5bGUgMjtkcml2ZV9kaXI6OlRoZSBCYXJyZW4gVmVjdG9yO2RyaXZlX2Rpcjo6VGFpbCBvZiB0aGUgRnJvc3RiaXRlIER1bmVzO2RyaXZlX2Rpcjo6U291bHMgVHlyYW50IEhlYWQ7ZHJpdmVfZGlyOjpTb3VsIERpZmZ1c2VyIFYgMi4xO2RyaXZlX2Rpcjo6UGhhbnRvbSBBZHZlbnQgVVA7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBXZWFwb24gVVA7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBTaG91bGRlcnMgVVA7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBCZWx0IFVQO2RyaXZlX2Rpcjo6VGhlIExpZ2h0bmluZyBPcmNoaWQgViAzLjI7ZHJpdmVfZGlyOjpSb3NlIG9mIHRoZSBDb3JyaWRhbiBNYWVzdHJvO2RyaXZlX2Rpcjo6UGFjaHlkZXJtIFBvd2RlcndhZ29uIEVsZXBoYW50O2RyaXZlX2Rpcjo6UGFjaHlkZXJtIFBvd2RlcndhZ29uIFNxdWVlO2RyaXZlX2Rpcjo6UGFjaHlkZXJtIFBvd2RlcndhZ29uIFNwbGVlbjtkcml2ZV9kaXI6OlBhY2h5ZGVybSBQb3dkZXJ3YWdvbiBXZWFwb247ZHJpdmVfZGlyOjpTd2luZSBQb3dkZXIgQmFycmVsO2RyaXZlX2Rpcjo6Um9sbGVybWF3c3RlciBhbmQgTWVjaGEgQm9vdHMgb2YgVHJhdmVsIE1rIElJSTtkcml2ZV9kaXI6OkZvY2FsIFJlc29uYW5jZSBWIDMuMDtkcml2ZV9kaXI6OlNwYXVsZGVycyBvZiB0aGUgUHNpb24gSW5xdWlzaXRvcjtkcml2ZV9kaXI6OkVwaXRhcGhpYyBCb25kcztkcml2ZV9kaXI6OlRpbnkgQW50aG96b2EgR2lhbnQ7ZHJpdmVfZGlyOjpTbWFsbCBBbnRob3pvYSBHaWFudDtkcml2ZV9kaXI6Ok1lZGl1bSBBbnRob3pvYSBHaWFudDtkcml2ZV9kaXI6OkxhcmdlIEJhZCBUbyBUaGUgQm9uZTtkcml2ZV9kaXI6OlJpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6QmlnIFVuIFYgMy4wO2RyaXZlX2Rpcjo6QW5jaWVudCBNZWNoYW5pc207ZHJpdmVfZGlyOjpUaW1lIFdhbmRlcmVyO2RyaXZlX2Rpcjo6UGlzdG9uIEltcGFsZXI7ZHJpdmVfZGlyOjpCbGFzdGZvcmdlIEV4aGFsZXI7ZHJpdmVfZGlyOjpMb3N0IFJhbmdlcjtkcml2ZV9kaXI6OlJlcHRpbGlhbiBSZWZ1Z2UgUmFkaWFudCBDcmVlcHM7ZHJpdmVfZGlyOjpDYXZlcm5pdGUgRGlyZSBDcmVlcHM7ZHJpdmVfZGlyOjpXZWF0aGVyIEFzaDtkcml2ZV9kaXI6OlRJLTEwIEFnaGFuaW0gRWZmZWN0OyAxMjN8fHw=