bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogNEU1OUExQTgtQjc5My0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIDExMXx8fCAyMjI6OiAkMnkkMTAkT0RrMk9UVTFaVFV5WkRNeU1HUTJOdW9FQUtoczNVMkUwRlFLLm5ZVnphbmhYTnp6TXZ2NWUgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6TGl0dGxlIEJsaW5rIERhZ2dlcjtkcml2ZV9kaXI6OkV2ZXJibGFjaztkcml2ZV9kaXI6OlBsZWRnZSBvZiB0aGUgRHJhZ29ucyBEaXNjaXBsZSBhbmQgR29sZGVuIEJhc2hlciBCbGFkZXMgYW5kIEdvbGRlbiBPcmlnaW5zIG9mIEZhaXRoIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6SGFpciBvZiB0aGUgU3Vydml2b3I7ZHJpdmVfZGlyOjpCcmFjZXJzIGFuZCBTaG91bGRlcnMgb2YgdGhlIFN1cnZpdm9yO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgU3Vydml2b3I7ZHJpdmVfZGlyOjpHb2xkZW4gQ3J1Y2libGUgb2YgUmlsZTtkcml2ZV9kaXI6Okd1YXJkIG9mIHRoZSBSZWQgTWlzdCBQcmVtO2RyaXZlX2Rpcjo6QXhlIG9mIFBocmFjdG9zO2RyaXZlX2Rpcjo6QmVhc3Qgb2YgdGhlIENyaW1zb24gUmluZyBCYWNrO2RyaXZlX2Rpcjo6QmVhc3Qgb2YgdGhlIENyaW1zb24gUmluZyBCcmFjZXJzO2RyaXZlX2Rpcjo6QmVhc3Qgb2YgdGhlIENyaW1zb24gUmluZyBIZWxtO2RyaXZlX2Rpcjo6QmVhc3Qgb2YgdGhlIENyaW1zb24gUmluZyBXZWFwb247ZHJpdmVfZGlyOjpUaW5lcyBvZiBUeWJhcmE7ZHJpdmVfZGlyOjpNYXJrIG9mIHRoZSBGaXJzdCBIdW50IEhhcnZlc3RlZDtkcml2ZV9kaXI6Okh1bnRlcnMgSG9hcmQ7ZHJpdmVfZGlyOjpIYXQgb2YgdGhlIEh1bnRlcjtkcml2ZV9kaXI6OldpbmdzIG9mIFZhc2h1bmRvbDtkcml2ZV9kaXI6OldyYXRoIG9mIHRoZSBGYWxsZW4gSGVhZDtkcml2ZV9kaXI6OldyYXRoIG9mIHRoZSBGYWxsZW4gU2hvdWxkZXI7ZHJpdmVfZGlyOjpEcmVhZCBBc2NlbmRhbmNlIEJlbHQ7ZHJpdmVfZGlyOjpEcmVhZCBBc2NlbmRhbmNlIFRhaWw7ZHJpdmVfZGlyOjpEcmVhZCBBc2NlbmRhbmNlIFN3b3JkO2RyaXZlX2Rpcjo6UGxhbmV0ZmFsbCBCdXJuaW5nIERlc2NlbnQ7ZHJpdmVfZGlyOjpBcG9nZWUgb2YgdGhlIEd1YXJkaWFuIEZsYW1lO2RyaXZlX2Rpcjo6TWFzdGVyIG9mIHRoZSBTZWFyaW5nIFBhdGggQmVsdDtkcml2ZV9kaXI6Ok1hc3RlciBvZiB0aGUgU2VhcmluZyBQYXRoIEhlYWQ7ZHJpdmVfZGlyOjpSYXBpZXIgb2YgdGhlIEJ1cm5pbmcgR29kIE9mZmhhbmQ7ZHJpdmVfZGlyOjpSYXBpZXIgb2YgdGhlIEJ1cm5pbmcgR29kO2RyaXZlX2Rpcjo6Q2xhc3p1cmVtZSBJbmN1cnNpb24gQXJtcztkcml2ZV9kaXI6OkNsYXN6dXJlbWUgSW5jdXJzaW9uIEJlbHQ7ZHJpdmVfZGlyOjpDbGFzenVyZW1lIEluY3Vyc2lvbiBIZWFkO2RyaXZlX2Rpcjo6Q2xhc3p1cmVtZSBJbmN1cnNpb24gU2hvdWxkZXI7ZHJpdmVfZGlyOjpDbGFzenVyZW1lIEluY3Vyc2lvbiBXZWFwb247ZHJpdmVfZGlyOjpNYWd1cyBBY2NvcmQ7ZHJpdmVfZGlyOjpEYXJrIEFydGlzdHJ5IENhcGUgUHJlbTtkcml2ZV9kaXI6Ok1hZ3VzIEFwZXggUHJlbTtkcml2ZV9kaXI6OkdvbGRlbiBTaWxlbnQgV2FrZTtkcml2ZV9kaXI6Ok1hc2sgb2YgWmVidWxvbjtkcml2ZV9kaXI6OkJvdyBvZiB0aGUgS2hhLVJlbiBGYWl0aGZ1bDtkcml2ZV9kaXI6OkZvcnR1bmVzIFRvdXQgUHJlbTtkcml2ZV9kaXI6OkphZ2dlZCBIb25vciBCcmFjZXI7ZHJpdmVfZGlyOjpKYWdnZWQgSG9ub3IgQmFubmVyO2RyaXZlX2Rpcjo6SmFnZ2VkIEhvbm9yIE1hc2s7ZHJpdmVfZGlyOjpKYWdnZWQgSG9ub3IgTGVncztkcml2ZV9kaXI6OkxpbmVhZ2Ugb2YgdGhlIFN0b3JtbG9yZHMgLSBXZWFwb247ZHJpdmVfZGlyOjpMZXZpYXRoYW4gV2hhbGUgQmxhZGUgb2YgRW1pbmVudCBSZXZpdmFsIEV4Y2VwdGlvbmFsO2RyaXZlX2Rpcjo6V2F0ZXJsb2dnZWQgS3Vua2thIFNob2VzO2RyaXZlX2Rpcjo6SGF0IG9mIHRoZSBLcmFrZW47ZHJpdmVfZGlyOjpMZWdpb24gQ29tbWFuZGVyIE1vZE1ha2VyIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6U291bCBvZiB0aGUgU2xheWVyIFByZW07ZHJpdmVfZGlyOjpXeXJtd3JvdWdodCBGbGFyZTtkcml2ZV9kaXI6OkNyb3duIG9mIHRoZSBXaXRjaCBTdXByZW1lO2RyaXZlX2Rpcjo6TXVsY3RhbnQgUGFsbCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO2RyaXZlX2Rpcjo6RmluIEtpbmdzIENoYXJtIG9mIEVtaW5lbnQgUmV2aXZhbCBFeGNlcHRpb25hbDtkcml2ZV9kaXI6OkhlbGwtU3BhciBBbmF0aGVtYSBPYnNpZGlhbiBCbGlnaHQ7ZHJpdmVfZGlyOjpQcm9nZW5pdG9ycyBCYW5lO2RyaXZlX2Rpcjo6R29kKnMgTWVyY3k7ZHJpdmVfZGlyOjpHcmVhdCBTYWdlcyBSZWNrb25pbmcgUnVtYmxlIGluIHRoZSBEZWVwO2RyaXZlX2Rpcjo6TWlyYW5hIFRJMTAgQ29sbGVjdG9ycyBDYWNoZSBNZWdhUGFjaztkcml2ZV9kaXI6Ok1hbmlmb2xkIFBhcmFkb3ggUEEgQXJjYW5hIFN0eWxlIDI7ZHJpdmVfZGlyOjpDb2RpY2lsIG9mIHRoZSBWZWlsZWQgT25lcztkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBGZWFyZnVsIEFyaWEgUHJlbTtkcml2ZV9kaXI6OkZlYXN0IG9mIEFic2Nlc3Npb247ZHJpdmVfZGlyOjpJbnNhdGlhYmxlIEJvbmVzYXcgUHJlbTtkcml2ZV9kaXI6OkRyYWdvbmNsYXcgSG9vaztkcml2ZV9kaXI6OlNGIEFyY2FuYSBNZWdhcGFjaztkcml2ZV9kaXI6OkFwcGFyYXR1cyBvZiBTaGFkb3dwYXNzO2RyaXZlX2Rpcjo6U2hhZG93IGluIHRoZSBEZWVwIEhlbG07ZHJpdmVfZGlyOjpTaGFkb3cgaW4gdGhlIERlZXAgQXJtb3I7ZHJpdmVfZGlyOjpQYWxlIEVkZ2UgUHJlbTtkcml2ZV9kaXI6OkNvcnJpZGFuIE1hZXN0cm8gYW5kIFRoZSBMaWdodG5pbmcgT3JjaGlkIGFuZCBHb2xkZW4gTWFuZGF0ZSBvZiB0aGUgU3Rvcm1ib3JuIE1lZ2FQYWNrIE5FVztkcml2ZV9kaXI6OlN2ZW4gSW1tb3J0YWxzIE1lZ2FQYWNrIFVQO2RyaXZlX2Rpcjo6QXJtb3Igb2YgVmlsZSBSZWxpcXVhcnk7ZHJpdmVfZGlyOjpCbGlzdGVyaW5nIFNoYWRlIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7ZHJpdmVfZGlyOjpNYW50bGUgb2YgVmlsZSBSZWxpcXVhcnk7ZHJpdmVfZGlyOjpDcm93biBvZiBWaWxlIFJlbGlxdWFyeTtkcml2ZV9kaXI6OlBhdWxkcm9ucyBvZiBWaWxlIFJlbGlxdWFyeTtkcml2ZV9kaXI6OkF4ZSBvZiBWaWxlIFJlbGlxdWFyeTtkcml2ZV9kaXI6OldpbmRyYW5nZXIgQXJjYW5hIHN0eWxlIDEgKEJsdWUgQmlyZCkgKyBGdWxsIFdSIGltbW9ydGFsO2RyaXZlX2Rpcjo6U291bCBEaWZmdXNlciBQcmVtO2RyaXZlX2Rpcjo6UHVycGxlIENvbG9yIGZvciBUQjtkcml2ZV9kaXI6OkNoYXNtIG9mIHRoZSBCcm9rZW4gQ29kZSBIZWxtO2RyaXZlX2Rpcjo6U2N5dGhlcyBvZiBTb3Jyb3c7ZHJpdmVfZGlyOjpTcGFuIG9mIFNvcnJvdztkcml2ZV9kaXI6OkNoYXNtIG9mIHRoZSBCcm9rZW4gQ29kZSBBcm1vcjtkcml2ZV9kaXI6OlByb3ZpbmNlIG9mIHRoZSBQc2lvbiBJbnF1aXNpdG9yO2RyaXZlX2Rpcjo6U3Rld2FyZCBvZiB0aGUgRm9yYmlkZGVuIENoYW1iZXIgU2hvdWxkZXI7ZHJpdmVfZGlyOjpRdWVlbiBvZiBQYWluIEFyY2FuYSBNZWdhUGFjaztkcml2ZV9kaXI6Okh1bmdlciBvZiB0aGUgSG93bGluZyBXaWxkcyBXZWFwb247ZHJpdmVfZGlyOjpDcmltc29uIEVkaWN0IG9mIFNoYWRvd3M7ZHJpdmVfZGlyOjpHb2xkZW4gU2hhZG93IE1hc3F1ZXJhZGU7ZHJpdmVfZGlyOjpUZW1wZXN0IEhlbG0gb2YgdGhlIFRodW5kZXJnb2QgUHJlbTtkcml2ZV9kaXI6OlJpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6QmVhc3RtYXN0ZXIgRnVzcm9kYWg7ZHJpdmVfZGlyOjpVbnJlYWwgVG91cm5hbWVudCAzIE1lZ2EtS2lsbDtkcml2ZV9kaXI6OlBoYW50b20gQWR2ZW50IFdlYXBvbiBVUDtkcml2ZV9kaXI6OlBoYW50b20gQWR2ZW50IFNob3VsZGVycyBVUDtkcml2ZV9kaXI6OlBoYW50b20gQWR2ZW50IFVQO2RyaXZlX2Rpcjo6UGhhbnRvbSBBZHZlbnQgQmVsdCBVUDtkcml2ZV9kaXI6OkFzcGVjdCBvZiBPc2NpbGxhO2RyaXZlX2Rpcjo6R2xhaXZlIG9mIE9zY2lsbGE7ZHJpdmVfZGlyOjpEYW1hcmFrYW4gTXV6emxlO2RyaXZlX2Rpcjo6QmVsdCBvZiBFdGVybmFsIE5pZ2h0O2RyaXZlX2Rpcjo6Q3JpbXNvbiBNb3VybmZ1bCBSZXZlcmllO2RyaXZlX2Rpcjo6V3JhdGggb2YgRWNob2VzO2RyaXZlX2Rpcjo6SGVsbSBvZiBFY2hvZXM7ZHJpdmVfZGlyOjpESyBQZXJzb25hIERhdmlvbjtkcml2ZV9kaXI6OlNjb3JjaGVkIEFtYmVyIFN3b3JkO2RyaXZlX2Rpcjo6VGhlIEludGVybmF0aW9uYWwgMjAxOCBDdXJzb3IgUGFjaztkcml2ZV9kaXI6Ok5pZ2h0c3RhbGtlciBNZWdhUGFjayBzZXQ7ZHJpdmVfZGlyOjpIdW5nZXIgb2YgdGhlIEhvd2xpbmcgV2lsZHMgT2ZmLUhhbmQgV2VhcG9uO2RyaXZlX2Rpcjo6V2VhcG9uIG9mIHRoZSBGb3Jnb3R0ZW4gUGxhbmUgO2RyaXZlX2Rpcjo6T2ZmLUhhbmQgV2VhcG9uIG9mIHRoZSBGb3Jnb3R0ZW4gUGxhbmU7IDEyM3x8fA==