limitHWID:: 1 000||| 111:: 49DA4D0E-ABCF-E911-80D2-0897987801CE 111||| 222:: $2y$10$NWZlYjYyYjhlOGJmYTY1Z.dknQneP3Sc7qDguU7SMv37ufJefdu/e 222||| 123:: Shadow in the Deep Bracers;Shadow in the Deep Back;Gilded Edge;The Lightning Orchid;Governors Salakot V 2.1;Soul Diffuser;Dark Artistry Cape;Dark Artistry Belt;Dark Artistry Hair;Dark Artistry Pauldrons;Dark Artistry Bracers;Mace of Aeons;Golden Offhand Basher of Mage Skulls;Belt of the Forgotten Plane;Oathbound Defiant Blades;Shoulders of the Survivor;Bracers of the Survivor;Acolyte of Vengeance Hooded Mask;Armor of the Forgotten Plane;Mantle of the Smoldering Sage;Off-Hand Sword of the Smoldering Sage;Belt of the Forsaken Flame;Sword of the Smoldering Sage;Cape of the Everblack;Blade of the Demonic Vessel;Pauldrons of the Mistral Fiend;Hood of the Everblack;Wings of Eternal Purgatory;Curse of Eternal Purgatory;Key of the Lucent Gate;Mandate of the Nameless - Armor;Blackgate Sentinel Back;Mandate of the Nameless - Crown;Origin of the Dark Oath - Legs;Span of Black Nihility;Arena Champion Armor;Plagueroad Apothacary Mask;Plagueroad Apothacary Cape;Plagueroad Apothacary Back;Serrakura;Flashpoint Proselyte - Arms;Obsidian Blade Dagger;Shoulders of the Dragon Palace;Staff of the Dragon Palace;Arms of the First Ways;Shoulder of the First Ways;Arms of Desolation;Flowering Shade V 2.0;The Corruption of Nezzureem;Endless Night;Unfettered Malevolence;Stormwrought Arbiter V 2.0;Reckless Vigor V 2.1;Eternal Harvest;Toxic Death Eater; 123|||