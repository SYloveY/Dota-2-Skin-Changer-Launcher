bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMTA4QkRCRTAtNEU2OC1FNDQyLTlCNTktQTgxRTg0MTYxMDIyIDExMXx8fCAyMjI6OiAkMnkkMTAkTVRaaFpqYzFOakptWmpVNVpEZzVPTzdVTW12dlQ3MTR6LkVKcmZyWW5lbmsuSktVWFUvdksgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6Q3Jlc3Qgb2YgdGhlIEZlcm9jaWQ5519cyBUb3hpY2FudDtkcml2ZV9kaXI6OkFwcGVuZGFnZXMgb2YgdGhlIE1vbG9rYXUgU3RhbGtlcjtkcml2ZV9kaXI6OkJhYnkgUm9zaGFuIFByZW07ZHJpdmVfZGlyOjpBY2lkIEh5ZHJhIEN1cnNvciBQYWNrO2RyaXZlX2Rpcjo6QXBlcnR1cmUgU2NpZW5jZSBXYXJkY29yZTtkcml2ZV9kaXI6OkpvdXJuZXkgUm9zaGFuO2RyaXZlX2Rpcjo6V2VhdGhlciBTcHJpbmc7ZHJpdmVfZGlyOjpUZXJyYWluIC0gU3ByaW5nO2RyaXZlX2Rpcjo6Uml2ZXIgVmlhbCBJY2U7ZHJpdmVfZGlyOjpSZW0gTWVnYS1LaWxscztkcml2ZV9kaXI6OlF1ZWVuIG9mIFBhaW4gQW5pbWUgVm9pY2U7ZHJpdmVfZGlyOjpUZXJyb3JibGFkZSBFTkcgQXJjYW5lIHZvaWNlO2RyaXZlX2Rpcjo6Q3VzdG9tIERhc2hib2FyZCA0NDtkcml2ZV9kaXI6OldlYnMgb2YgcGVyY2VwdGlvbiBsb2FkaW5nc2NyZWVuO2RyaXZlX2Rpcjo6QnJvb2QgSHVudGVyIEhVRDtkcml2ZV9kaXI6OkN1c3RvbSBEYXNoYm9hcmQgNDY7ZHJpdmVfZGlyOjpUYWlsIG9mIHRoZSBNb2xva2F1IFN0YWxrZXI7ZHJpdmVfZGlyOjpWZW5vbWQ5519cyBEZWF0aGJyaW5nZXIgSG9vZDtkcml2ZV9kaXI6OlZlbm9tb3VzIERlYXRoYnJpbmdlciBXYXJkO2RyaXZlX2Rpcjo6Uml0ZXMgb2YgVmlsZSBDb252b2NhdGlvbjtkcml2ZV9kaXI6Ok5hcmNpc3Npc3RpYyBMZWVjaDtkcml2ZV9kaXI6OlRyYXBwaW5ncyBvZiBHb2xkZW4gTmlydmFuYTtkcml2ZV9kaXI6OkJlYWsgb2YgTW9sdGVuIFJlYmlydGg7ZHJpdmVfZGlyOjpQbGFndWUgQ2hhbXBpb24gb2YgTnVyZ2xlO2RyaXZlX2Rpcjo6R3VhcmRpYW4gb2YgdGhlIFNhcHBoaXJlIEZsYW1lO2RyaXZlX2Rpcjo6U3RlbGxhciBKYWRlO2RyaXZlX2Rpcjo6SGF0IG9mIEVtcGlyaWMgSW5jZW5kaWFyeTtkcml2ZV9kaXI6OkJlbHQgb2YgRW1waXJpYyBJbmNlbmRpYXJ5O2RyaXZlX2Rpcjo6RnJleWE7ZHJpdmVfZGlyOjpOaWdodCBUZXJyb3JzIENhcGU7ZHJpdmVfZGlyOjpWaXJ1bGVudCBNYXRyaWFyY2hzIFNwaWRlcmxpbmc7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgU2lsa2VuIFF1ZWVuO2RyaXZlX2Rpcjo6Q3Jvd24gb2YgdGhlIEdsdXR0b24qcyBMYXJkZXI7ZHJpdmVfZGlyOjpUaGUgR2F6ZSBvZiBaZWJ1bG9uO2RyaXZlX2Rpcjo6QW5jaWVudCBDdWx0aXN0IFYgMi4xO2RyaXZlX2Rpcjo6VW5kZWZlYXRlZCBHZW5lcmFsO2RyaXZlX2Rpcjo6SW5zaWdodHMgb2YgdGhlIFNhcHBoaXJlIFNocm91ZDtkcml2ZV9kaXI6OkluY2FuZGVzY2VudCBMaXR1cmd5IFYgMi4xO2RyaXZlX2Rpcjo6Q2hhbXBpb24gb2YgRGlzY29yZCBWIDMuMTtkcml2ZV9kaXI6OkJvbmRzIG9mIE1hZG5lc3MgU2V0IFN0eWxlIDE7ZHJpdmVfZGlyOjpBYnlzc2FsIEhlbGxjbGF3O2RyaXZlX2Rpcjo6SW5mZXJuYWwgV2luZ3M7ZHJpdmVfZGlyOjpNYW50bGUgb2YgdGhlIEluZmVybmFsIFJhbWJsZXI7ZHJpdmVfZGlyOjpTY2VwdGVyIG9mIHRoZSBHcnVlc29tZSBFbWJyYWNlO2RyaXZlX2Rpcjo6Q3Jvd24gb2YgdGhlIEFyY3RpYyBSZWNsdXNlO2RyaXZlX2Rpcjo6V2luZ3Mgb2YgdGhlIEFyY3RpYyBSZWNsdXNlO2RyaXZlX2Rpcjo6Q3VubmluZyBDdWx0aXZhdGlvbnMgTWFzaztkcml2ZV9kaXI6OlNoYW1ibGluZyBUcmlja3N0ZXIgQmVsdDtkcml2ZV9kaXI6OlVuZmV0dGVyZWQgTWFsZXZvbGVuY2U7ZHJpdmVfZGlyOjpFbnZlbG9waW5nIERlc3BhaXIgViAyLjE7ZHJpdmVfZGlyOjpTZWVyIG9mIEluZmluaXR5IFNwYWNlIEVpZG9sb247ZHJpdmVfZGlyOjpUaGUgUGF0aCBvZiBPZG9jb2VsZXVzO2RyaXZlX2Rpcjo6UGl0ZmFsbCBDcnVzYWRlcjtkcml2ZV9kaXI6OkV0ZXJuYWwgSGFydmVzdDtkcml2ZV9kaXI6OktpdCBvZiB0aGUgRmlyc3QgSHVudCBWIDIuMTtkcml2ZV9kaXI6OlNwZWN0cmFsIENvbnNlcnZhdG9yIFYgMi4wO2RyaXZlX2Rpcjo6U2FtdXJhaSBTZXQ7ZHJpdmVfZGlyOjpWaXJ0dWQ5519cyBSb2FyIFYgMi4wO2RyaXZlX2Rpcjo6U3BpbmVzIG9mIHRoZSBTdW5rZW4gR2FvbGVyO2RyaXZlX2Rpcjo6R3Jhc3Agb2YgdGhlIFJpdmVuIEV4aWxlO2RyaXZlX2Rpcjo6QmVzdG93ZWQgU2hvdWxkZXJzO2RyaXZlX2Rpcjo6RXNzZW5jZSBvZiB0aGUgVHJpY2tzdGVyIENyb3duO2RyaXZlX2Rpcjo6Q29tcGxldGUgVGFpbCBvZiB0aGUgRXRoZXJlYWwgTW9uYXJjaDtkcml2ZV9kaXI6OkNvbXBsZXRlIFdpbmdzIG9mIHRoZSBFdGhlcmVhbCBNb25hcmNoO2RyaXZlX2Rpcjo6UGxhdGluZyBvZiB0aGUgTmV0aGVyc3dhcm0gVmFuZ3VhcmQ7ZHJpdmVfZGlyOjpNYWxlZmljIERyYWtlcyBIb29kIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7ZHJpdmVfZGlyOjpRdWVzdGlvbiBtYXJrIERlbnk7ZHJpdmVfZGlyOjpQZWRlc3RhbCBUaGUgRmFsbCBNYWpvciAyMDE2IERpcmUgV29vZDtkcml2ZV9kaXI6OlRJLTYgQ29tcGxleGl0eSBHYW1pbmcgVFAgRWZmZWN0O2RyaXZlX2Rpcjo6QnJvb2Rtb3RoZXIgQW5pbWUgVm9pY2U7ZHJpdmVfZGlyOjpEZWF0aCBQcm9waGV0IEFuaW1lIFZvaWNlO2RyaXZlX2Rpcjo6TGluYSBBbmltZSBWb2ljZTtkcml2ZV9kaXI6OlB1cHBldCBTdW1tb25lcjtkcml2ZV9kaXI6OlRoZSBHYWxsb3dzIFVuZGVyc3R1ZHkgU2V0O2RyaXZlX2Rpcjo6Q2hhb3MgQ2hvc2VuIFYgMy4wO2RyaXZlX2Rpcjo6VGhlIFdpdGNoIEh1bnRlciBWIDIuMDtkcml2ZV9kaXI6OkJsb29keSBCcmlkZTtkcml2ZV9kaXI6OldhcmRlbiBvZiB0aGUgV3lybWZvcmdlIFNoYXJkO2RyaXZlX2Rpcjo6VGhlIEJhcHRpc20gb2YgTWVsdGluZyBGaXJlO2RyaXZlX2Rpcjo6TWFuZGF0ZSBvZiB0aGUgTmFtZWxlc3M7ZHJpdmVfZGlyOjpOZXB0dW5lIGZvciBNYXJzIGJ5IFBhdGNob3VsaSBLbm93bGVkZ2U7ZHJpdmVfZGlyOjpBa2FtYW5haCBmb3IgTGVnaW9uIENvbW1hbmRlciBWIDMuMTtkcml2ZV9kaXI6OkNvdW50ZXNzIG9mIFJpc3R1bDtkcml2ZV9kaXI6OllvYmEgV2lzcDtkcml2ZV9kaXI6OkRldmlhbnQgTWV0YW1vcnBob3Npcztkcml2ZV9kaXI6Ok1hc2tzIG9mIE1pc2NoaWVmO2RyaXZlX2Rpcjo6U3RvcmVnZ2EgMyBMVkwgVWx0ICsgSWNlIFRpbnk7ZHJpdmVfZGlyOjpUaW55IEJhbmFuYTtkcml2ZV9kaXI6Okx1bWJlcmNsYXc7ZHJpdmVfZGlyOjpIZWxtIG9mIHRoZSBEb21pbmF0b3IgZm9yIFRyb2xsO2RyaXZlX2Rpcjo6RmVyb2Npb3VzIEhlYXJ0O2RyaXZlX2Rpcjo6THVya2FibG87ZHJpdmVfZGlyOjpTYWNrIG9mIHRoZSBTYXBwZXIqcyBHdWlsZTtkcml2ZV9kaXI6OlN3aW5lIFZpc29yO2RyaXZlX2Rpcjo6UG93ZGVyc2xlZCBSb29rZXJ5IFNxdWVlO2RyaXZlX2Rpcjo6Q2FydCBvZiB0aGUgUG93ZGVya2VnIFBhdHJvbDtkcml2ZV9kaXI6Ok11bml0aW9ucyBvZiB0aGUgUG93ZGVya2VnIFBhdHJvbDtkcml2ZV9kaXI6OkFsbHVyZSBvZiB0aGUgRGVlcDtkcml2ZV9kaXI6OkJpbmRpbmdzIG9mIHRoZSBCYXR0bGVyYW5nZXI7ZHJpdmVfZGlyOjpUaGUgSmFkZSBHZW5lcmFsO2RyaXZlX2Rpcjo6QmxhemluZyBPYmxpdmlvbiBWIDMuMDtkcml2ZV9kaXI6OlZpc2lvbnMgb2YgdGhlIEZvcnNha2VuIEZsYW1lO2RyaXZlX2Rpcjo6R29kZGVzcyBvZiB0aGUgVW5kZXJ3b3JsZDtkcml2ZV9kaXI6OlNlYWJvcm5lIFJlcHJpc2FsO2RyaXZlX2Rpcjo6U21va3kgRHJlYW1lcjtkcml2ZV9kaXI6OlhjYWxpYnVyIFNldCBmb3IgTWVlcG87ZHJpdmVfZGlyOjpCYXJhdGhydW1zIEZ1cnkgU2V0IFYgMi4wO2RyaXZlX2Rpcjo6U2hhZG93Zm9yY2UgR2FsZTtkcml2ZV9kaXI6OlN0eWdpYW4gTWF3O2RyaXZlX2Rpcjo6VGFsZXMgb2YgdGhlIFdpbmR3YXJkIFJvZ3VlO2RyaXZlX2Rpcjo6VHN1a3VtbyBNb29uIENsb3VkO2RyaXZlX2Rpcjo6QXJjYW5lIERlZmlhbmNlO2RyaXZlX2Rpcjo6QnVyZ2xhciBvZiBXYXNwO2RyaXZlX2Rpcjo6RWx1c2l2ZSBEZXN0cm95ZXIgViAyLjA7ZHJpdmVfZGlyOjpIZWF2ZW5seSBMaWdodDtkcml2ZV9kaXI6OlNhdmlvciBmb3IgSnVuZ2xlcyBIb25vcjtkcml2ZV9kaXI6Ok1pZ2h0IG9mIHRoZSBHYWxsb3BpbmcgQXZlbmdlciBWIDIuMTtkcml2ZV9kaXI6OkVsZHJpdGNoIEduYXJsO2RyaXZlX2Rpcjo6SHVudGVyIG9mIEtpbmdzIFYgMi4wO2RyaXZlX2Rpcjo6SGF6aGFkYWwgTWFnZWJyZWFrZXI7ZHJpdmVfZGlyOjpCb2J1c2FuZ3MgVHJhdmVsaW5nIE5lY2Vzc2l0aWVzIFNldDtkcml2ZV9kaXI6OkhpZGRlbiBGbG93ZXI7ZHJpdmVfZGlyOjpXaXNkb20gb2YgdGhlIE1pZG5pZ2h0IFN1bjsgMTIzfHx8