bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkTXpWbU5UWmlOMlExWlRFNVltUTJZT0g0SmhUUFRFdUpoa1FFRXhrUnRNTy5kL2haWFlkVWkgMjIyfHx8IDEyMzo6IFRlbXBlc3QgUmV2ZWxhdGlvbjtTdWJtZXJnZWQgSGF6YXJkIFByb3BlbGxlcjtSb2xsZXJtYXdzdGVyO1N1Ym1lcmdlZCBIYXphcmQgTGF1bmNoZXI7U3VibWVyZ2VkIEhhemFyZCBIdWxsO0FyY2FuaWMgUmVzb25hbmNlIEJlYW07SGVsbSBvZiB0aGUgRGFyayBNb29uIFN0YWxrZXI7TWQ5519bnQgb2YgdGhlIFdpbmdlZCBTZW50aW5lbDtNb29uZmFsbCBQcmVtO1JpZGVyKnMgRWNsaXBzZSBQYXVsZHJvbnM7R29sZGVuIFR3aWxpZ2h0IFNjaGlzbTtBbnRob3pvYW4gQXNzYXVsdCAtIFRpbnk7RnJvc3Rtb290IEZyb3N0aXZ1cyBUcmVlO0FybXMgb2YgdGhlIEx1Y2VudCBDYW5vcHk7SGF1bCBvZiB0aGUgTHVjZW50IENhbm9weTtMYXNoIG9mIHRoZSBMaXphcmQgS2luO1dhcmQgb2YgdGhlIEx1Y2VudCBDYW5vcHk7Q2hhcm0gb2YgdGhlIEx1Y2VudCBDYW5vcHk7Q3JpbXNvbiBDZW5zZXIgb2YgR2xpc3MgVVA7Q3JpbXNvbiBIZWFydHMgb2YgTWlzcnVsZTtUaGUgU3VuYnJlZXplIEJpcnRocmlnaHQ7SGVsbC1TcGFyIEFuYXRoZW1hO01hbnRsZSBvZiB0aGUgSW5mZXJuYWwgUmFtYmxlcjtIb3JucyBvZiB0aGUgQmV0cmF5ZXI7TXVsY3RhbnQgUGFsbCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO0ZpbiBLaW5ncyBDaGFybSBvZiBFbWluZW50IFJldml2YWwgRXhjZXB0aW9uYWw7Qm9ua2VycyBvZiBBd2FsZWI7QXByb24gb2YgdGhlIE91dGxhbmRpc2ggR291cm1ldDtNYXNxdWUgb2YgQXdhbGViO0Zvb3RmYWxscyBvZiB0aGUgU3BvcmVmYXRoZXJzIC0gU2hvdWxkZXI7Rm9vdGZhbGxzIG9mIHRoZSBTcG9yZWZhdGhlcnMgLSBEZWF0aCBXYXJkO0F3YWxlYnMgVHJ1bmRsZXdlZWQ7SWNlcGxhaW4gUmF2YWdlciBIb3JuO0JyYWNlciBvZiBDb250ZXN0ZWQgRmF0ZTtCZWx0IG9mIENvbnRlc3RlZCBGYXRlO0dvbGRlbiBJbmZlcm5hbCBDaGllZnRhaW47SGFybmVzcyBvZiBDb250ZXN0ZWQgRmF0ZTtUYWlsIG9mIHRoZSBQcm92ZW47QXhlIG9mIHRoZSBQcm92ZW47QmVhc3Qgb2YgdGhlIENyaW1zb24gUmluZyBCcmFjZXJzO0JlYXN0IG9mIHRoZSBDcmltc29uIFJpbmcgV2VhcG9uO0hlbG0gb2YgdGhlIFNpZWdlIEVuZ2luZTtBcm1vciBvZiB0aGUgU2llZ2UgRW5naW5lO0h1bGwgb2YgdGhlIFNpZWdlIEVuZ2luZTtHb2xkZW4gUmVjdGlmaWVyO0ZpbnMgb2YgdGhlIE1vbHRlbiBEZXN0cnVjdG9yO0NvbnRyb2xsZWQgQnVybjtKYWdnZWQgSG9ub3IgQnJhY2VyO0phZ2dlZCBIb25vciBCYW5uZXI7SnVnZ2VybmF1dCBBcmNhbmEgQmxhZGVmb3JtIExlZ2FjeTtKYWdnZWQgSG9ub3IgTGVncztKYWdnZWQgSG9ub3IgQmxhZGU7U2VycGVudGluZSBHdWFyZCBXYXJkO0NvZGljaWwgb2YgdGhlIFZlaWxlZCBPbmVzO0dvdGhpYyBXaGlzcGVyIEJlbHQ7QXJtb3Igb2YgdGhlIEZlYXJmdWwgQXJpYSBQcmVtO01hbmlmb2xkIFBhcmFkb3ggUEEgQXJjYW5hIFN0eWxlIDM7Um9zaGFuIGZyb20gRGlhYmxvO0JyYWNlciBvZiBTaGFkb3dwYXNzO1NoYWRvdyBpbiB0aGUgRGVlcCBCYWNrO1NoYWRvdyBpbiB0aGUgRGVlcCBIZWxtO1NoYWRvdyBpbiB0aGUgRGVlcCBBcm1vcjtUaGUgR29sZGVuIEJhcmIgb2YgU2thZGkgUHJlbTtEZWNsYXJhdGlvbiBvZiB0aGUgRGl2aW5lIExpZ2h0IFJhZGlhbnQgVG93ZXJzO0RlY2xhcmF0aW9uIG9mIHRoZSBEaXZpbmUgU2hhZG93IERpcmUgVG93ZXJzO0NoaWNrZW4gSHV0IFdhcmQ7R29sZGVuIEFlZ2lzO0FnaGFuaW0gRHVuZ2VvbiBTY2VwdGVyIEVmZmVjdDtMaWdodG5pbmcgQmxpbmsgViAyLjA7VEktOSBCb3R0bGUgRWZmZWN0O0NvbG9yU3RhdHM7QXVkaW8gQ291bnRkb3ducyBTcGVsbHM7R3JlZW4gRGFnb247U291bCBEZW55O1RJLTkgRXVsIFNjZXB0ZXIgRWZmZWN0O1RJLTggRm91bnRhaW4gUmVnZW4gbHZsIDMgRWZmZWN0O0hleCBZYWt5b2s7SXJvbiBCcmFuY2ggR0c7TGFzdGhpdCBHb2xkIC0gTmV3IEJsb29tIDIwMTk7VEktOSBMZXZlbCBVcCBFZmZlY3Q7VEktOSBQaGFzZSBCb290cyBFZmZlY3Q7VEktOCBSYWRpYW5jZSBFZmZlY3Q7V2ludGVyIEJhdHRsZSBQYXNzIDIwMTYgVGVsZXBvcnQ7QXJtb3Igb2YgdGhlIEh1bnRlcipzIEdsb3J5O0RvdGEgMiBDaGFuZ2VyIEVkaXRpb24gSHVudGVycyBIb2FyZCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO0hlYXJ0bGVzcyBIdW50IC0gSGVhZDtNYXJrIG9mIHRoZSBGaXJzdCBIdW50IEhhcnZlc3RlZDtGbG91cmlzaGluZyBMb2Rlc3RhcjtIYXJib3JibG9zc29tO0lyZSBvZiB0aGUgQW5jaWVudCBHYW9sZXIgQXJtcztJcmUgb2YgdGhlIEFuY2llbnQgR2FvbGVyIEJhY2s7V3JhaXRoYmluZGVyO05ldGhlciBHcmFuZG1hc3RlcipzIENhcGU7R29sZGVuIEV5ZSBvZiBJeCp5eGE7R29sZGVuIE5ldGhlciBMb3JkKnMgRGV2b3VyZXI7SGVhcnRsZXNzIEh1bnQgLSBPZmYtSGFuZDtUaW5lcyBvZiBUeWJhcmE7RnJvc3QgQXZhbGFuY2hlIFByZW07RGVzZXJ0IEJ1cm4gU2FkZGxlO0Rlc2VydCBCdXJuIE91dGZpdDtEZXNlcnQgQnVybiBDYXA7RGVzZXJ0IEJ1cm4gTW9ydHkgSW1tb3J0YWw7RGVzZXJ0IEJ1cm4gQ3Jvc3Nib3c7SG9vZHdpbmsgR2xlaXBuaXI7SG9vZHdpbmsgRHJhZ29uIENyb3NzYm93O0Jsb29keSBCYWJ5IEludm9rZXI7T2wgSm9lO0FyY2FuYSBEcmVhZCBSZXRyaWJ1dGlvbjtEcmVhZCBSZXRyaWJ1dGlvbiAtIEJyYWNlcnM7RHJlYWQgUmV0cmlidXRpb24gLSBDYXBlO0RyZWFkIFJldHJpYnV0aW9uIC0gSGVhZHdlYXI7RHJlYWQgUmV0cmlidXRpb24gLSBMZWcgQXJtb3I7RHJlYWQgUmV0cmlidXRpb24gLSBRdWl2ZXI7RHJlYWQgUmV0cmlidXRpb24gLSBTaG91bGRlciBBcm1vcjtEYXZpb24qcyBEcmFnb24gSG9sZCBIZWxtO0RhdmlvbipzIERyYWdvbiBIb2xkIFBhdWxkcm9ucztEYXZpb24qcyBCcm9rZW4gRHJhZ29uIEhvbGQgU3dvcmQ7Uml2ZXIgVmlhbCBPaWw7V2VhdGhlciBCbHVlIFNreSBmcm9tIFNvdXAgZm9yIFNsdXRzO1R3aXN0ZWQgTWFlbHN0cm9tIHdpdGggV29ybGQgQ2hhc20gQXJ0aWZhY3Q7TG9yZCBvZiBMdW1pbmFyaWVzIEVpZG9sb25zO0Fwb2NhbHlwc2UgVW5ib3VuZCAtIFNob3VsZGVyO0Fwb2NhbHlwc2UgVW5ib3VuZCAtIFRhaWw7V29vZGxhbmQgV2FyYmFuZHMgLSBEaXJlIENyZWVwcztXb29kbGFuZCBXYXJiYW5kcyAtIERpcmUgU2llZ2UgQ3JlZXBzO1dvb2RsYW5kIFdhcmJhbmRzIC0gUmFkaWFudCBDcmVlcHM7V29vZGxhbmQgV2FyYmFuZHMgLSBSYWRpYW50IFNpZWdlIENyZWVwcztUZXJyYWluIC0gRGVzZXJ0O1dpbmRyYW5nZXIgQXJjYW5hIHN0eWxlIDIgKE9yYW5nZSBCaXJkKSBhbmQgRnVsbCBXUiBpbW1vcnRhbDtTa3l3cmF0aCBNYWdlIE1lZ2FQYWNrIFRoYW5hdG9zO1JpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrO0xpZmVzdGVhbGVyIE1lZ2FQYWNrO0JsYWNrIFNhaWxzIENvbm5vbmVlcjtBcmN0aWMgU2hvY2sgVEEgViAzLjA7RGVhdGggTmVjcm9saWdodCBQcmVtaXVtIFN0eWxlIDE7TWVkdXNhIE1lZ2FQYWNrIE5FVztWaXBlciBNZWdhUGFjaztQdWduYSBJbW1vcnRhbHMgTWVnYVBhY2s7QXJjYW5hIE1lZ2FQYWNrIFNoYWRvdyBGaWVuZDtEZWZlbmRlciBvZiB0aGUgQnJ1bWFsIENyZXN0O0FsbHVyZSBvZiBNaXJhY2xlIEZydWl0O1NsYXJkYXIgTWVnYVBhY2sgc2V0O0F4ZSBmdWxsIEltbW9ydGFscyBNZWdhcGFjayBhbHQ7TGVnaW9uIENvbW1hbmRlciBNb2RNYWtlciBNZWdhUGFjaztESyBQZXJzb25hIERhdmlvbjtCcmlzdGxlYmFjayBNZWdhUGFjaztQdWRnZSBUSTEwIENvbGxlY3RvcnMgQ2FjaGUgTWVnYVBhY2s7QXV0aG9yaXR5IG9mIHRoZSBJbXBlcmlzaGFibGUgR3JhbmQgSGllcm9waGFudDtXcmFpdGggS2luZyBBcmNhbmEgTWVnYVBhY2s7QW50aU1hZ2UgUkVEIE1lZ2FQYWNrO1Vyc2EgSW1tb3J0YWxzIE1lZ2FQYWNrO0dlbGlkIFRvdWNoIFZhbGVlcmEgZm9yIFJpa2k7U3ZlbiBJbW1vcnRhbHMgTWVnYVBhY2sgVVA7RW1pbmVuY2Ugb2YgdGhlIFNvdXRoIFN0YXI7QXJjIFdhcmRlbiBNZWdhUGFjaztCcm9vZG1vdGhlciBNZWdhUGFjaztBYmFkZG9uIFJFRCBNZWdhUGFjaztCZXR0ZXIgQ2FsbCBNb3JwaGxpbmcgV2l0aCBJbW1vcnRhbHM7UXVlZW4gb2YgUGFpbiBBcmNhbmEgTWVnYVBhY2s7TW9ua2V5IEtpbmcgQXJjYW5hIE1lZ2FQYWNrO091dHdvcmxkIERldm91dmVyIE1lZ2FQYWNrO0FBTWVnYVBhY2s7RGFya2JyZXcgRW5mb3JjZXIgYW5kIEV0ZXJuYWwgUmFkaWFuY2UgQmxhZGVzIGFuZCBNaWRhcyBLbnVja2xlcyBNZWdhUGFjazsgMTIzfHx8