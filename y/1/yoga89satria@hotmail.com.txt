bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMUM5NzcyNUUtOUY1OS1CMDQ2LUEwQUMtM0VERTA2OUZFRUQ2IDExMXx8fCAyMjI6OiAkMnkkMTAkWVdFell6aGpOVGN5TmpVd09HSTRZT1JsWkFOZDRLdGRYaXFnUENlMmpvcUI4YXI4Nm9XUHEgMjIyfHx8IDEyMzo6IEJsYWRlIG9mIHRoZSBEZW1vbmljIFZlc3NlbCBQcmVtO0hvb2Qgb2YgdGhlIERlbW9uaWMgVmVzc2VsO0Nsb2FrIG9mIHRoZSBEZW1vbmljIFZlc3NlbDtQcmV5IG9mIHRoZSBEZW1vbmljIFZlc3NlbDtXYXJob3JzZSBvZiB0aGUgRGVtb25pYyBWZXNzZWw7QXhlIEp1bmdsZTtTbHVtYmVyaW5nIFRlcnJvcjtQcmltYWwgUGVhY2VtYWtlcjtQcmltYWwgUGFlYW47V2VhcG9uIG9mIHRoZSBCbG9vZGZvcmdlO01hc2sgb2YgdGhlIEJsb29kZm9yZ2U7T2ZmLUhhbmQgV2VhcG9uIG9mIHRoZSBCbG9vZGZvcmdlO0NhcGUgb2YgdGhlIEJsb29kZm9yZ2U7U2hvdWxkZXIgb2YgdGhlIEJsb29kZm9yZ2U7QnJhY2VyIG9mIHRoZSBCbG9vZGZvcmdlO0JlbHQgb2YgdGhlIEJsb29kZm9yZ2U7SGVhcnRsZXNzIEh1bnQgLSBIZWFkO0hlYXJ0bGVzcyBIdW50IC0gRm93bDtIZWFydGxlc3MgSHVudCAtIE9mZi1IYW5kO0h1bnRlcnMgSG9hcmQgb2YgdGhlIENyaW1zb24gV2l0bmVzcztIZWFydGxlc3MgSHVudCAtIEFybW9yO01hY2Ugb2YgdGhlIFdyYXRocnVubmVyO0JsYXN0Zm9yZ2UgRXhoYWxlciBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO1Bpc3RvbiBJbXBhbGVyO1NoaWVsZCBvZiB0aGUgV3JhdGhydW5uZXI7QXJtbGV0IG9mIHRoZSBXcmF0aHJ1bm5lcjtJbmZlcm5hbCBDaGllZnRhaW47SGVsbSBvZiB0aGUgQnVybmluZyBOaWdodG1hcmU7UGF1bGRyb25zIG9mIHRoZSBCdXJuaW5nIE5pZ2h0bWFyZTtNb3VudCBvZiB0aGUgQnVybmluZyBOaWdodG1hcmU7SWNlIEJsb3Nzb207QXJjYW5hIENyeXN0YWwgTWFpZGVuIEZyb3N0IEF2YWxhbmNoZTtUaGUgU3VuYnJlZXplIEJpcnRocmlnaHQ7U3RhZmYgb2YgRm9yYmlkZGVuIE1lZGljaW5lO0JyYWNlciBvZiBGb3JiaWRkZW4gTWVkaWNpbmU7RHJlc3Mgb2YgRm9yYmlkZGVuIE1lZGljaW5lO05vdGhsaWMgQnVyZGVuIFByZW07RnVyeSBvZiB0aGUgUmlnaHRlb3VzIFN0b3JtIC0gSGVhZDtGdXJ5IG9mIHRoZSBSaWdodGVvdXMgU3Rvcm0gLSBTaG91bGRlcjtGdXJ5IG9mIHRoZSBSaWdodGVvdXMgU3Rvcm0gLSBCYWNrO0Z1cnkgb2YgdGhlIFJpZ2h0ZWQ5519cyBTdG9ybSAtIEFybXM7RnVyeSBvZiB0aGUgUmlnaHRlb3VzIFN0b3JtIC0gS2lyaW47V2hpc3BlcnMgb2YgdGhlIERhbW5lZCBIZWFkO1doaXNwZXJzIG9mIHRoZSBEYW1uZWQgUGF1bGRyb25zO1doaXNwZXJzIG9mIHRoZSBEYW1uZWQgV2luZ3M7V2hpc3BlcnMgb2YgdGhlIERhbW5lZCBCZWx0O1doaXNwZXJzIG9mIHRoZSBEYW1uZWQgVGFpbDtBQU1lZ2FQYWNrO0FudGlNYWdlIEZlbWFsZTsgMTIzfHx8