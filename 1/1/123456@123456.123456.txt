limitHWID:: 1 000||| 111:: 18C1EB80-0BF8-11E1-8CB8-5404A63CE72E;; 111||| 222:: ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413 222||| 123:: free_dir:TI-5 effect Bottle;free_dir:25 lvl ping;free_dir:Blink Dagger lvl 2 TI-6 Effect;s_dir:The International 2017 Cursor Pack;free_dir:Rick and Morty Announcer;d2c_vip_dir:Voice of Flockhearts Gamble;new_dir:The International 2020 Music Pack;d2c_vip_dir:Beyond the Summit HUD;drive_dir:Abaddon RED MegaPack;drive_dir:Darkbrew Enforcer and Eternal Radiance Blades and Midas Knuckles MegaPack;drive_dir:AntiMage RED MegaPack;s_dir:Arc Warden MegaPack;drive_dir:Axe full Immortals Megapack alt;s_dir:Beastmaster MegaPack;d2c_vip_dir:Dota 2 Changer Edition Hunters Hoard of the Crimson Witness;d2c_vip_dir:Tines of Tybara;d2c_vip_dir:Mark of the First Hunt Harvested;d2c_vip_dir:Heartless Hunt - Head;s_dir:Broodmother MegaPack;drive_dir:Doom Immortals MegaPack;drive_dir:Custom MegaPack Drow Ranger Sylvanas Live (Alt);d2c_vip_dir:New Year Jaina;s_dir:Gold Pyromancer;s_dir:Enigma MegaPack;drive_dir:Custom MegaPack Faceless Void Black Time;drive_dir:Custom Megapack Huskar Flashpoint Proselyte + Pursuit of the Ember Demons;s_dir:The Wizard of the Imperial Court;drive_dir:Bladeform Legacy Provocation of Ruin;drive_dir:Custom MegaPack Juggernaut Jade Dynasty RE;free_dir:Armor of the Unyielding Mask;free_dir:Serpentine Guard Ward;drive_dir:Juggernaut Arcana Red Bladeform Origins;s_dir:Kunkka Immortals MegaPack;drive_dir:Lycan Kisilev ModMaker MegaPack;drive_dir:Custom MegaPack Legion Commander Meredith RE;d2c_vip_dir:Ice Lina Premium;drive_dir:Golden Dark Maw Inhibito and Golden Profane Union and Golden Dread Requisition Lifestealer Immortals Megapack;free_dir:Dead God Heir Set;drive_dir:Lich Immortal Head Perversions of the Bloodwhorl;drive_dir:Collar of the Mad Mutineer;d2c_vip_dir:Glare of the Tyrant;d2c_vip_dir:Tome of Forbidden Knowledge;drive_dir:Mirana TI10 Collectors Cache MegaPack;new_dir:Essence Of The Dark Moon;drive_dir:Mars TI10 Collectors Cache MegaPack;d2c_vip_dir:Rubick Curse - Gods Rebuke;d2c_vip_dir:Better Call Morphling With Immortals;drive_dir:Monkey King Arcana MegaPack;drive_dir:Night Stalker Immortal and Reaper Kisilev ModMaker MegaPack;drive_dir:Custom Night Stalker Megapack Frost Walker;drive_dir:Custom MegaPack Delilah RE;drive_dir:Concord Reversion UP;d2c_vip_dir:Concord Dominion;d2c_vip_dir:Phantom Concord Prem;d2c_vip_dir:Blossom of the Merry Wanderer;d2c_vip_dir:Crown of the Ageless Fae;drive_dir:Merry Wanderer*s Brush;drive_dir:Demon Form of the Foulfell Corruptor UP;d2c_vip_dir:Gold Color for TB;free_dir:Airborne Machete;drive_dir:Pudge TI10 Collectors Cache MegaPack;drive_dir:Custom MegaPack Wraith King The One True King Bundle (Style 1 Chinese);s_dir:Witch Doctor MegaPack;drive_dir:Windranger Arcana style 2 (Orange Bird) and Full WR immortal;drive_dir:Constellation Armor;new_dir:Anthozoa Giant Weapon;d2c_vip_dir:Ancient Inheritance - Shoulder;drive_dir:Corridan Maestro and The Lightning Orchid and Golden Mandate of the Stormborn MegaPack NEW;free_dir:The Lightning Orchid of Eminent Revival Dota 2 Changer Edition;free_dir:Tahlin Occult Valeera for Riki;s_dir:Outworld Devouver MegaPack;drive_dir:SF Arcana Megapack;d2c_vip_dir:Golden Arms of Desolation Prem;d2c_vip_dir:Rubick Curse - Black Hole;d2c_vip_dir:Rubick Curse - Chain Frost;d2c_vip_dir:Rubick Curse - Ghostship;free_dir:Ancient Magus Style 3;drive_dir:Skywrath Mage MegaPack Thanatos;drive_dir:Custom MegaPack Templar Assassin Jungle Secrets RE;free_dir:Jungle Explorer Set;s_dir:Nyx Assassin MegaPack;d2c_vip_dir:Crimson First of the Flood;d2c_vip_dir:Golden Grasping Bludgeon Prem;drive_dir:Slardar Immortal Head Fin of the First Spear;new_dir:Millipede Set;new_dir:Thunder Griffin;d2c_vip_dir:Tormented Staff of Eminent Revival;s_dir:Tidehunter MegaPack;s_dir:Golden Floodmask; 123|||