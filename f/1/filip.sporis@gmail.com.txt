bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogODFBNjREQTAtQjgzRi0xMURDLUFEODktMzA1QTNBNDc2RTdCIDExMXx8fCAyMjI6OiAkMnkkMTAkWldNNVlURTFNakF3Wm1JeFkyUmtNZVBldjV0LmRwbTZPUTJZaGRtcTdnempuRG5WMWlEQ0sgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6VGVtcGVzdCBIZWxtIG9mIHRoZSBUaHVuZGVyZ29kIFByZW07ZHJpdmVfZGlyOjpFYXJ0aHNoYWtlciBNZWdhUGFjayBOZXc7ZHJpdmVfZGlyOjpGcm9zdCBBdmFsYW5jaGUgUHJlbTtkcml2ZV9kaXI6Okpha2lybyBJbW1vcnRhbHMgSGVhZHM7ZHJpdmVfZGlyOjpCZWV0bGViYXJrIGFuZCBQbG9kIC0gUmVmcmVzaGVyIE9yYiBTdHlsZTtkcml2ZV9kaXI6OkljZSBCbG9zc29tO2RyaXZlX2Rpcjo6QmxhZGVmb3JtIExlZ2FjeSBQcm92b2NhdGlvbiBvZiBSdWluO2RyaXZlX2Rpcjo6TXVsY3RhbnQgUGFsbCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO2RyaXZlX2Rpcjo6TW9ua2V5IEtpbmcgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6RmlzdHMgb2YgQXhlIFVubGVhc2hlZDtkcml2ZV9kaXI6OkJlbHQgb2YgdGhlIFNoYXR0ZXJlZCBWYW5ndWFyZDtkcml2ZV9kaXI6OlJhbXBhbnQgT3V0cmFnZSBQcmVtO2RyaXZlX2Rpcjo6VG9yc28gb2YgQXhlIFVubGVhc2hlZDtkcml2ZV9kaXI6OlVuYnJva2VuIFN0YWxsaW9uO2RyaXZlX2Rpcjo6VHJhcHBpbmcgb2YgdGhlIFNlY3JldCBNZWRpY2luZTtkcml2ZV9kaXI6OlRoZSBHYXRlcyBvZiBOb3RobDtkcml2ZV9kaXI6OlByaW1vcmRpYWwgQ29uc2VydmF0b3I7ZHJpdmVfZGlyOjpEb29tIEltbW9ydGFscyBNZWdhUGFjaztkcml2ZV9kaXI6OlN0cmVuZ3RoIG9mIHRoZSBEZW1vbiBTdG9uZSBTZXQgViAzLjE7ZHJpdmVfZGlyOjpBZGFnZSBvZiB0aGUgU21vbGRlcmluZyBTYWdlO2RyaXZlX2Rpcjo6THljYW4gS2lzaWxldiBNb2RNYWtlciBNZWdhUGFjaztkcml2ZV9kaXI6Ok1hZ3VzIEFwZXggUHJlbTtkcml2ZV9kaXI6Ok1hZ3VzIEFjY29yZDtkcml2ZV9kaXI6OkdhdW50bGV0IG9mIHRoZSBUcmVhY2hlcm91cyBEZW1vbjtkcml2ZV9kaXI6OlNob3VsZGVycyBvZiB0aGUgSW5mZXJuYWwgUmFtYmxlcjtkcml2ZV9kaXI6OlNjZXB0ZXIgb2YgdGhlIEluZmVybmFsIFJhbWJsZXI7ZHJpdmVfZGlyOjpQcmlkZSBvZiB0aGUgV2ludGVybW9vbjtkcml2ZV9kaXI6OkF4aWEgb2YgTWV0aXJhO2RyaXZlX2Rpcjo6VHJ1ZWJhcmsgQWRoZXJlbnQ7ZHJpdmVfZGlyOjpGbG9ja2hlYXJ0cyBHYW1ibGUgTW9sdGVuIEZpcmVsYXJrO2RyaXZlX2Rpcjo6SmFraXJvIEltbW9ydGFsIFdpbmdzO2RyaXZlX2Rpcjo6QXBvc3RsZSBvZiBEZWNheSBWIDIuMTtkcml2ZV9kaXI6OkJ1cm5pbmcgTmlnaHRtYXJlO2RyaXZlX2Rpcjo6UXVlZW4gb2YgUGFpbiBBcmNhbmEgTWVnYVBhY2s7ZHJpdmVfZGlyOjpNYW5pZm9sZCBQYXJhZG94IFBBIEFyY2FuYSBTdHlsZSAxO2RyaXZlX2Rpcjo6R2FyYiBvZiB0aGUgQ3J1ZWwgTWFnaWNpYW4gU2V0O2RyaXZlX2Rpcjo6T21uaWtuaWdodCBNZWdhUGFjaztkcml2ZV9kaXI6OkVkaWN0IG9mIFNoYWRvd3M7ZHJpdmVfZGlyOjpTaGFkb3cgTWFzcXVlcmFkZSBQcmVtO2RyaXZlX2Rpcjo6U2hhZG93c2hhcmQgLSBPZmYtSGFuZDtkcml2ZV9kaXI6OlNoYWRvd3NoYXJkO2RyaXZlX2Rpcjo6U3dhbXAgU2hhbWFuIFNldDtkcml2ZV9kaXI6Okxhc2ggb2YgdGhlIExpemFyZCBLaW47ZHJpdmVfZGlyOjpHbGFpdmUgb2YgT3NjaWxsYTtkcml2ZV9kaXI6OlNoYWRvdyBpbiB0aGUgRGVlcCBBcm1vcjtkcml2ZV9kaXI6OlNoYWRvdyBpbiB0aGUgRGVlcCBIZWxtO2RyaXZlX2Rpcjo6U2hhZG93IGluIHRoZSBEZWVwIEJyYWNlcnM7ZHJpdmVfZGlyOjpTaGFkb3cgaW4gdGhlIERlZXAgQmFjaztkcml2ZV9kaXI6OlBhbGUgRWRnZSBQcmVtO2RyaXZlX2Rpcjo6T2NjdWx0aXN0cyBQdXJzdWl0O2RyaXZlX2Rpcjo6Rmxvd2VyaW5nIFNoYWRlIFYgMi4wO2RyaXZlX2Rpcjo6VHJhbnN2ZXJzYW50IFNvdWwgUHJlbTtkcml2ZV9kaXI6OlN2ZW4gSW1tb3J0YWxzIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6TWFzcXVlIG9mIEF3YWxlYjtkcml2ZV9kaXI6OkJvbmtlcnMgb2YgQXdhbGViO2RyaXZlX2Rpcjo6VHVuaWMgb2YgdGhlIFN1cnZpdm9yO2RyaXZlX2Rpcjo6QnJhY2VycyBhbmQgU2hvdWxkZXJzIG9mIHRoZSBTdXJ2aXZvcjtkcml2ZV9kaXI6OkJlbHQgb2YgdGhlIFN1cnZpdm9yO2RyaXZlX2Rpcjo6SGFpciBvZiB0aGUgU3Vydml2b3I7ZHJpdmVfZGlyOjpPZmZoYW5kIEJsYWRlIG9mIHRoZSBTdXJ2aXZvciBQcmVtO2RyaXZlX2Rpcjo6QmxhZGUgb2YgdGhlIFN1cnZpdm9yO2RyaXZlX2Rpcjo6Q2xpbmt6IE1lZ2FQYWNrO2RyaXZlX2Rpcjo6RHJhZ29uIEd1YXJkaWFuO2RyaXZlX2Rpcjo6VGhlIEJhcHRpc20gb2YgTWVsdGluZyBGaXJlO2RyaXZlX2Rpcjo6Tnl4IEFzc2Fzc2luIE1lZ2FQYWNrIG5ldztkcml2ZV9kaXI6OkNyb3duIG9mIFRoZSBOaWdodHdvcmxkO2RyaXZlX2Rpcjo6TWVtb3JpZXMgb2YgdGhlIFZvdyBFdGVybmFsO2RyaXZlX2Rpcjo6TGVnaW9uIENvbW1hbmRlciBNb2RNYWtlciBNZWdhUGFjaztkcml2ZV9kaXI6OlNvdWwgb2YgdGhlIFNsYXllciBQcmVtO2RyaXZlX2Rpcjo6UHJvbWlzZSBvZiB0aGUgRmlyc3QgRGF3bjtkcml2ZV9kaXI6OkhlYWRkcmVzcyBvZiB0aGUgUHJvdGVjdG9yO2RyaXZlX2Rpcjo6QnJhY2Ugb2YgVWx0b3JpYW4gR3VhcmQ7ZHJpdmVfZGlyOjpCZWx0IG9mIFVsdG9yaWFuIEd1YXJkO2RyaXZlX2Rpcjo6SGVsbSBvZiBVbHRvcmlhbiBHdWFyZDtkcml2ZV9kaXI6Ok1hbnRsZSBvZiBVbHRvcmlhbiBHdWFyZDtkcml2ZV9kaXI6OlRhaWwgb2YgVWx0b3JpYW4gR3VhcmQ7ZHJpdmVfZGlyOjpTdGFyIG9mIFVsdG9yaWFuIEd1YXJkO2RyaXZlX2Rpcjo6TmFyY2lzc2lzdGljIExlZWNoO2RyaXZlX2Rpcjo6RnJhY3RhbCBIb3JucyBvZiBJbm5lciBBYnlzbSBVUDtkcml2ZV9kaXI6OlBsdW5kZXIgb2YgdGhlIFNhdmFnZSBNb25nZXI7ZHJpdmVfZGlyOjpCaXR0ZXIgTGluZWFnZSBJbW1vcnRhbCBBeGVzO2RyaXZlX2Rpcjo6RGVzZXJ0IEJ1cm4gU2FkZGxlO2RyaXZlX2Rpcjo6RGVzZXJ0IEJ1cm4gQ2FwO2RyaXZlX2Rpcjo6RGVzZXJ0IEJ1cm4gTW9ydHkgSW1tb3J0YWw7ZHJpdmVfZGlyOjpEZXNlcnQgQnVybiBDcm9zc2Jvdztkcml2ZV9kaXI6OlBvd2RlcnNsZWQgUm9va2VyeTtkcml2ZV9kaXI6OlByb3BlbGxlcnMgb2YgdGhlIFZlc3BpZHVuIEh1bnRlci1LaWxsZXI7ZHJpdmVfZGlyOjpIZWFkIG9mIHRoZSBWZXNwaWR1biBIdW50ZXItS2lsbGVyO2RyaXZlX2Rpcjo6Q29uZSBvZiB0aGUgVmVzcGlkdW4gSHVudGVyLUtpbGxlcjtkcml2ZV9kaXI6OlBheWxvYWQgb2YgdGhlIFZlc3BpZHVuIEh1bnRlci1LaWxsZXI7ZHJpdmVfZGlyOjpBcm1hbWVudHMgb2YgdGhlIFZlc3BpZHVuIEh1bnRlci1LaWxsZXI7ZHJpdmVfZGlyOjpDYW5ub24gb2YgdGhlIE9jY3VsdGlzdHMgUHVyc3VpdDtkcml2ZV9kaXI6OlBhY2sgb2YgdGhlIE9jY3VsdGlzdCpzIFB1cnN1aXQ7ZHJpdmVfZGlyOjpTcGFuIG9mIFNvcnJvdztkcml2ZV9kaXI6OldpbmdzIG9mIERheWJyZWFrO2RyaXZlX2Rpcjo6UHJvbWluZW5jZTtkcml2ZV9kaXI6OkdpbWxlayBEZWNhbnRlcjtkcml2ZV9kaXI6Ok1vbHRlbiBEZXN0cnVjdG9yO2RyaXZlX2Rpcjo6TmlnaHQgU3RhbGtlciBJbW1vcnRhbCBhbmQgUmVhcGVyIEtpc2lsZXYgTW9kTWFrZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpGaWVyeSBUeWw7ZHJpdmVfZGlyOjpNYXNrIG9mIHRoZSBQcmltYWwgRmlyZXdpbmc7ZHJpdmVfZGlyOjpTcGlrZSBvZiB0aGUgUHJpbWFsIEZpcmV3aW5nO2RyaXZlX2Rpcjo6VG9vbHMgb2YgdGhlIFByaW1hbCBGaXJld2luZztkcml2ZV9kaXI6OkV5ZSBPZiBQb3dlciBTZXQ7ZHJpdmVfZGlyOjpCYXR0bGV0cmFwIFYgMy4wO2RyaXZlX2Rpcjo6S2lyaW4gUmlkZXIgU2V0O2RyaXZlX2Rpcjo6TW9udW1lbnRzIG9mIHRoZSBOYXR1cmFsIERlbWl1cmdlO2RyaXZlX2Rpcjo6SW5rIERyYWdvbiBQb2V0O2RyaXZlX2Rpcjo6TWFzdGVyIERpbm9zYXVycyBUZWxlcGF0aHk7ZHJpdmVfZGlyOjpNZWNoYSBIb3JuZXQgU2V0O2RyaXZlX2Rpcjo6VG9vbHMgb2YgdGhlIEhlbGxzd29ybjtkcml2ZV9kaXI6OldhcmRlbiBvZiB0aGUgSGVsbGJvcm47ZHJpdmVfZGlyOjpCZWhvbGRlbiBvZiB0aGUgQmFuaXNoZWQgT25lcyAtIFdlYXBvbjtkcml2ZV9kaXI6OkxhbnRlcm4gb2YgdGhlIEluZmVybmFsIE1hdztkcml2ZV9kaXI6OlVyc2EgSW1tb3J0YWxzIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6TWQ5519cm5mdWwgUmV2ZXJpZTtkcml2ZV9kaXI6Ok1hc3RlciBEaW5vc2F1cnMgVGVsZXBhdGh5IEhhd2s7ZHJpdmVfZGlyOjpNYXN0ZXIgRGlub3NhdXJzIFRlbGVwYXRoeSBCZWFzdDtkcml2ZV9kaXI6OkVuaWdtYSBNZWdhUGFjaztkcml2ZV9kaXI6Okp1bmdsZSBCYWJ5c2l0dGVycztkcml2ZV9kaXI6OkFsbHV2aW9uIFByb3BoZWN5IFYgMi4wO2RyaXZlX2Rpcjo6VGhlIEF0bml3cyBGdXJ5IFNldDtkcml2ZV9kaXI6OkZvcm0gb2YgdGhlIEF0bml3O2RyaXZlX2Rpcjo6U3Bpcml0IG9mIHRoZSBBdG5pdyBWIDIuMTtkcml2ZV9kaXI6OkFiYWRkb24gUkVEIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6U2hhdHRlcmJsYXN0IENvcmUgU2hhdHRlcmJsYXN0IENyb3duIEFwb2NhbHlwc2UgVW5ib3VuZDtkcml2ZV9kaXI6Ok91dHdvcmxkIERldm91dmVyIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6QmFyayBvZiB0aGUgQWdlbGVzcyBXaXRuZXNzO2RyaXZlX2Rpcjo6U3R1bnR3b29kIFNhbmN0dWFyeTtkcml2ZV9kaXI6Okp1bmdsZSBDaGllZjtkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBEaXJnZWZ1bCBPdmVybG9yZDtkcml2ZV9kaXI6OkJyYWNlcnMgb2YgdGhlIERpcmdlZnVsIE92ZXJsb3JkO2RyaXZlX2Rpcjo6Q3Jvd24gb2YgdGhlIERpcmdlZnVsIE92ZXJsb3JkO2RyaXZlX2Rpcjo6VmlwZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpHaWFudCBIdW50ZXIgViAyLjE7ZHJpdmVfZGlyOjpEaW1lbnNpb24gUmlwcGVyIEFybXM7ZHJpdmVfZGlyOjpEaW1lbnNpb24gUmlwcGVyIEJhY2s7ZHJpdmVfZGlyOjpEaW1lbnNpb24gUmlwcGVyIEhlYWQ7ZHJpdmVfZGlyOjpEaW1lbnNpb24gUmlwcGVyIExlZ3M7ZHJpdmVfZGlyOjpSaXR1YWwgb2YgdGhlIExveWFsIEZvbGQ7ZHJpdmVfZGlyOjpGb2NhbCBSZXNvbmFuY2UgViAzLjA7ZHJpdmVfZGlyOjpXaW5kcmFuZ2VyIEFyY2FuYSBzdHlsZSAxO2RyaXZlX2Rpcjo6RmlyZSBMb3R1cyBCZWx0IFByZW07ZHJpdmVfZGlyOjpXaW5ncyBvZiBDb2xvcmZ1bCBJY2VjcnlzdGFscztkcml2ZV9kaXI6OkdyaW0gRGVzdGlueTtkcml2ZV9kaXI6Ok1hbmlwdWxhdG9yIG9mIFdhcnNpdHVhdGlvbjtkcml2ZV9kaXI6OkdvbGRlbiBEYXJrIE1hdyBJbmhpYml0byBhbmQgR29sZGVuIFByb2ZhbmUgVW5pb24gYW5kIEdvbGRlbiBEcmVhZCBSZXF1aXNpdGlvbiBMaWZlc3RlYWxlciBJbW1vcnRhbHMgTWVnYXBhY2s7ZHJpdmVfZGlyOjpWZW5nZWFuY2Ugb2YgdGhlIFN1bndhcnJpb3I7ZHJpdmVfZGlyOjpNaWxsaXBlZGUgU2V0O2RyaXZlX2Rpcjo6VHJhaWwgb2YgdGhlIFNhbmd1aW5lIFNwZWN0cnVtO2RyaXZlX2Rpcjo6U2N5dGhlcyBvZiBTb3Jyb3c7ZHJpdmVfZGlyOjpQbGF0ZSBvZiB0aGUgQmFsZWZ1bCBIb2xsb3c7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgTG95YWwgRm9sZDtkcml2ZV9kaXI6OkhlYWRkcmVzcyBvZiB0aGUgTG95YWwgRm9sZDsgMTIzfHx8