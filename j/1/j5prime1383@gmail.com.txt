bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRTIyOUU5NUYtMkVDMi01ODQ1LUEzREYtMDRENEM0QUIwN0FGIDExMXx8fCAyMjI6OiAkMnkkMTAkWlRrMk1UbGhOVEF4Tm1VMk16STNaLmxJZXFjTXdGWFlWVGU0NlNISXhQbldtQjZML1BGby4gMjIyfHx8IDEyMzo6IEhpZGRlbiBWZWN0b3IgLSBCZWx0O0hpZGRlbiBWZWN0b3IgLSBBcm1vcjtIaWRkZW4gVmVjdG9yIC0gQmxhZGU7SGlkZGVuIFZlY3RvciAtIEhhdDtUaGUgTGlnaHRuaW5nIE9yY2hpZCBvZiBFbWluZW50IFJldml2YWwgRXhjZXB0aW9uYWwgRG90YSAyIENoYW5nZXIgRWRpdGlvbjtHb2xkZW4gTWFuZGF0ZSBvZiB0aGUgU3Rvcm1ib3JuO0dhcmIgb2YgdGhlIENvcnJpZGFuIE1hZXN0cm87Um95YWwgRGVjcmVlIFdoaXAgQXR0YWNrO0RlY2xhcmF0aW9uIG9mIHRoZSBEaXZpbmUgTGlnaHQgUmFkaWFudCBUb3dlcnM7RGVjbGFyYXRpb24gb2YgdGhlIERpdmluZSBTaGFkb3cgRGlyZSBUb3dlcnM7R29sZGVuIEFlZ2lzO1BsYW5ldGZhbGwgRmlyZSBCbGluaztUSS0xMCBCb3R0bGUgRWZmZWN0O0VtaW5lbmNlIG9mIFJpc3R1bCBEZW55IDE7VEktMTAgUGhhc2UgQm9vdHMgRWZmZWN0O1RJLTYgT0cgVFAgRWZmZWN0O1NoYWRvdyBpbiB0aGUgRGVlcCBBcm1vcjtTZWEgUmFrZXMgQnJpZGxlO1NoYWRvdyBpbiB0aGUgRGVlcCBCYWNrO1NoYWRvdyBpbiB0aGUgRGVlcCBCcmFjZXJzO1J1YmljayBBcmNhbmEgd2l0aCBJbW1vcnRhbDtIYXQgb2YgdGhlIEl0aW5lcmFudCBTY2hvbGFyO0NydXggb2YgUGVycGxleDtHb2xkZW4gU3RhZmYgb2YgUGVycGxleCBQcmVtO1NoaXBzIGluIHRoZSBOaWdodCBDb2xvciBmb3IgVEI7VGVtcGVzdCBIZWxtIG9mIHRoZSBUaHVuZGVyZ29kICsgUmlnaHRlb3VzIFRodW5kZXJib2x0O1RlbXBlc3QgUmV2ZWxhdGlvbjtTZXJwZW50aW5lIEd1YXJkIFdhcmQ7SmFnZ2VkIEhvbm9yIEJyYWNlcjtKYWdnZWQgSG9ub3IgQmFubmVyO0p1Z2dlcm5hdXQgQXJjYW5hIFJlZCBCbGFkZWZvcm0gT3JpZ2lucztKYWdnZWQgSG9ub3IgTGVncztHb2xkZW4gRWRnZSBvZiB0aGUgTG9zdCBPcmRlcjtQaGFudG9tIEFzY2Vuc2lvbjtUcmFuc3ZlcnNhbnQgU291bCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO1BoYW50b20gQXNjZW5zaW9uIEJlbHQ7UGhhbnRvbSBBc2NlbnNpb24gV2VhcG9uO0dvbGRlbiBIeWRyYWthbiBMYXRjaDtXaW5kcmFuZ2VyIEFyY2FuYSBzdHlsZSAyO1Nob2NrIG9mIHRoZSBBbnZpbCBQcmVtO0Rlc2VydCBCdXJuIFNhZGRsZTtEZXNlcnQgQnVybiBPdXRmaXQ7RGVzZXJ0IEJ1cm4gTW9ydHkgSW1tb3J0YWw7RGVzZXJ0IEJ1cm4gQ2FwO0Rlc2VydCBCdXJuIENyb3NzYm93O0hvb2R3aW5rIEdsZWlwbmlyO0hvb2R3aW5rIERyYWdvbiBDcm9zc2JvdztGcmFjdGFsIEhvcm5zIG9mIElubmVyIEFieXNtIFVQO0JpdHRlciBMaW5lYWdlIEltbW9ydGFsIEF4ZXM7U2NhbGUgb2YgQml0dGVyIFNwb2lsIEltbW9ydGFsIFVQO0hlYWQgb2YgdGhlIEljZXdyYWNrIE1hcmF1ZGVyO0FybW9yIG9mIHRoZSBTYXZhZ2UgTW9uZ2VyO0hvcnJvciBmcm9tIHRoZSBEZWVwIEFybXM7SG9ycm9yIGZyb20gdGhlIERlZXAgQmVsdDtHb2xkZW4gRmxvb2RtYXNrO0hvcnJvciBmcm9tIHRoZSBEZWVwIE9mZi1IYW5kO0hvcnJvciBmcm9tIHRoZSBEZWVwIFdlYXBvbjtGbHV0dGVyaW5nIEFtZXRoeXN0IFRyYXAgKyBJY29uO0hlYWRkcmVzcyBvZiB0aGUgTG95YWwgRm9sZDtNYW50bGUgb2YgdGhlIFdoaXNwZXJlZCBCb25kO0ZvY2FsIFJlc29uYW5jZSBWIDMuMDtUb3JtZW50ZWQgU3RhZmYgb2YgRW1pbmVudCBSZXZpdmFsO0NhcGUgb2YgdGhlIExpZnRlZCBWZWlsO0dvdGhpYyBXaGlzcGVyIEJlbHQ7Q29kaWNpbCBvZiB0aGUgVmVpbGVkIE9uZXM7QXZvd2FuY2Ugb2YgdGhlIFZlaWxlZCBPbmVzO01hbmlmb2xkIFBhcmFkb3ggSGVsbHMgVXNoZXIgU3R5bGUgMTtCbGlzc2Z1bCBLbmF2ZSBDb2F0O01hc2sgb2YgdGhlIENvbmZpZGFudDtSYXBpZXIgb2YgdGhlIFdpbmR3YXJkIFJvZ3VlO0FybXMgb2YgSGFyc2ggU29qb3VybjtIdW1ibGUgRHJpZnRlciBQYW50cztDb25jb3JkIFJldmVyc2lvbiBVUDtDb25jb3JkIERvbWluaW9uO1BoYW50b20gQ29uY29yZCBQcmVtO0FybWd1YXJkcyBvZiB0aGUgU21vbGRlcmluZyBTYWdlO0NpbmRlciBTZW5zZWkgQmVsdDtNYXN0ZXIgb2YgdGhlIFNlYXJpbmcgUGF0aCBIZWFkO0NpbmRlciBTZW5zZWkgT2ZmIEhhbmQgV2VhcG9uO0Fwb2dlZSBvZiB0aGUgR3VhcmRpYW4gRmxhbWU7Q2luZGVyIFNlbnNlaSBXZWFwb247TmlnaHQgVGVycm9ycyBCZWx0O0ZpcmVzdGFydGVyIEdhcyBNYXNrO0doYXN0bHkgTm9jdHVybmU7U2hvdWxkZXIgb2YgdGhlIEFwZXggRXhwbG9yZXI7VHdpc3RlZCBNYWVsc3Ryb20gd2l0aCBXb3JsZCBDaGFzbSBBcnRpZmFjdDtWaXJpZHVzIExlZ2dpbmdzO0NsYXN6dXJlbWUgSW5jdXJzaW9uIEhlYWQ7SmV3ZWwgb2YgQWVvbnM7TWFjZSBvZiBBZW9ucyBQcmVtO0dsb3J5IG9mIHRoZSBFbGRlcmZsYW1lIC0gQXJtcztHb2xkZW4gV3lybXdyb3VnaHQgRmxhcmUgUHJlbTtTb3VsIG9mIHRoZSBTbGF5ZXIgUHJlbTtEaXNjaXBsZSBvZiB0aGUgV3lybXdyb3VnaHQgRmxhbWU7SGVsbC1TcGFyIEFuYXRoZW1hIE9ic2lkaWFuIEJsaWdodDtNYW50bGUgb2YgdGhlIEluZmVybmFsIFJhbWJsZXI7SG9ybnMgb2YgdGhlIEJldHJheWVyO011bGN0YW50IFBhbGwgb2YgdGhlIENyaW1zb24gV2l0bmVzcztGaW4gS2luZ3MgQ2hhcm0gb2YgRW1pbmVudCBSZXZpdmFsIEV4Y2VwdGlvbmFsO0hhaXIgb2YgQmxhY2sgSWNlIFNjb3VyZ2U7TWQ5519bnQgb2YgdGhlIFdpbmdlZCBTZW50aW5lbDtNb29uZmFsbCBQcmVtO01hbnRsZSBvZiB0aGUgQ3Jlc2NlbnQgTW9vbjtUd2lsaWdodCBTY2hpc207QnJhY2VyIG9mIHRoZSBTcGlyYWwgQm9yZTtCZWx0IG9mIHRoZSBTcGlyYWwgQm9yZTtFeWVzIG9mIEFyZGVub2s7SG9ybiBvZiB0aGUgU3BpcmFsIEJvcmU7QnJhY2VycyBvZiB0aGUgV2ludGVybW9vbjtTcGlyaXQgb2YgdGhlIFNhY3JlZCBHcm92ZSAtIEJhY2s7Q3Jlc2NlbnQgQm93IEFycm93IG9ubHk7R29sZGVuIE1hc2sgb2YgTWV0aXJhO0NyZXNjZW50IFF1aXZlcjtBeGlhIG9mIE1ldGlyYTtTcGlyaXQgb2YgdGhlIFNhY3JlZCBHcm92ZSAtIFNob3VsZGVyO1B1bHNhciBSZW1uYW50IFByZW07TGl2aW5nIE5lbHVtO1NoaWVsZCBvZiB0aGUgRW1lcmFsZCBJbnN1cmdlbmNlO01vbmFyY2ggb2YgdGhlIFNhcHBoaXJlIEdsZW47U2lnbnMgb2YgdGhlIEFsbGZhdGhlciAtIEhlYWQ7RGVzZXJ0IEJsb29tIC0gTmVjaztTaWducyBvZiB0aGUgQWxsZmF0aGVyIC0gU2hvdWxkZXI7U3VmZmVyd29vZCBTYXBsaW5nO0Zvd2wgT21lbiBCZWFyZDtIb29kIG9mIERlY2F5O1N1bGxlbiBSYW1wYXJ0O1N1bGxlbiBIb2xsb3cgUHJlbTtTdWxsZW4gSGFydmVzdDtQeXJhbWlkIG9mIHRoZSBUZW1wbGUgb2YgdGhlIEZhbGxlbiBTdW47RmVhdGhlcnMgb2YgdGhlIFZlcm1pbGxpb24gQ3J1Y2libGU7U29sYXIgRm9yZ2UgUHJlbTtCbG9zc29tIG9mIHRoZSBNZXJyeSBXYW5kZXJlcjtFc3NlbmNlIG9mIHRoZSBUcmlja3N0ZXIgQ3Jvd247SW5zYXRpYWJsZSBCb25lc2F3IFByZW07Q2FwZSBvZiB0aGUgTmFyY2lzc2lzdGljIExlZWNoO0JlbHQgb2YgdGhlIFRpbmVkIFNocm91ZDtDaGFsaWNlIG9mIEl4eXhhO1RhaWwgb2YgdGhlIFNjb3VyaW5nIER1bmVzO1RoZSBCYXJyZW4gQ3Jvd24gUHJlbTtEZWZpbGVkIFN0aW5nZXI7TGVncyBvZiB0aGUgUmVkIFNhbmQgV2FycmlvcjtTaG91bGRlcmJsYWRlcyBvZiB0aGUgUmVkIFNhbmQgV2FycmlvcjtHZW51aW5lIERlZmlsZWQgU3RpbmdlcjtBcm1zIG9mIHRoZSBMdWNlbnQgQ2Fub3B5O0hhdWwgb2YgdGhlIEx1Y2VudCBDYW5vcHk7TGFzaCBvZiB0aGUgTGl6YXJkIEtpbjtDcmltc29uIENlbnNlciBvZiBHbGlzcyBVUDtGaWVyeSBXYXJkIG9mIEVraSBCdWthdztMYW1iIHRvIHRoZSBTbGF1Z2h0ZXIgUHJlbTtBcm0gb2YgdGhlIEV4YWN0IE1hcmtzbWFuO0dvbGRlbiBGdWxsLUJvcmUgQm9uYW56YTtIZWxtIG9mIHRoZSBBcmRhbGFuIEludGVyZGljdG9yO1BhdWxkcm9ucyBvZiB0aGUgU2lsdmVyIEZveDtNdWggS2VlbiBHdW47UGFjaHlkZXJtIFBvd2RlcndhZ29uIFNwb29uO1BhY2h5ZGVybSBQb3dkZXJ3YWdvbiBTcXVlZTtQYWNoeWRlcm0gUG93ZGVyd2Fnb24gUmVtb3RlIE1pbmUgVVA7UGFjaHlkZXJtIFBvd2RlcndhZ29uIFNpZ247UGFjaHlkZXJtIFBvd2RlcndhZ29uIEVsZXBoYW50O1N3aW5lIEhlbG1ldDtQb3dkZXJzbGVkIFJvb2tlcnkgQ2Fubm9uO0FybW9yIG9mIHRoZSBMb3lhbCBGb2xkO1N1Ym1lcmdlZCBIYXphcmQgUHJvcGVsbGVyO1JvbGxlcm1hd3N0ZXIgUHJlbTtTdWJtZXJnZWQgSGF6YXJkIExhdW5jaGVyO1N1Ym1lcmdlZCBIYXphcmQgSHVsbDtBcmNhbmljIFJlc29uYW5jZSBCZWFtO0FudGhvem9hbiBBc3NhdWx0IC0gVGlueTtBbnRob3pvYW4gQXNzYXVsdCAtIE1lZGl1bTtBbnRob3pvYW4gQXNzYXVsdCAtIExhcmdlO0FudGhvem9hbiBBc3NhdWx0IC0gSHVnZTtTd29yZCBvZiB0aGUgQ29sb3NzdXM7RXllIG9mIHRoZSBXZWF0aGVyZWQgU3Rvcm0gU2lnaWw7Q2Fubm9uIFB1bmNoIG9mIHRoZSBCYXJyaWVyIFJvZ3VlO0JhY2sgb2YgRGlzdGluZ3Vpc2hlZCBFeHBlZGl0aW9uYXJ5O0JvYnVzYW5ncyBUb2JhY2NvIEZpeDtUdXNrcyBvZiBEaXN0aW5ndWlzaGVkIEV4cGVkaXRpb25hcnk7QXJtb3Igb2YgdGhlIEd1YXJkZWQgV29yZDtLbmlmZSBvZiBEaXN0aW5ndWlzaGVkIEV4cGVkaXRpb25hcnk7RGFyayBBcnRpc3RyeSBUaHJvd2JhY2s7U2hhZG93cyBvZiBSYXZlbnNtYW5lIEFybXM7R29sZGVuIFNpbGVudCBXYWtlO01hbmlhcyBNYXNrIFByZW07TGVncyBvZiB0aGUgS2hhLVJlbiBGYWl0aGZ1bDtTaG91bGRlcnMgb2YgdGhlIEJsYWNrIFdpbmQgUmF2ZW47UmVhcGVycyBXcmVhdGg7RW1ibGVtIG9mIERpdmluaXR5O0NyaW1zb24gQnJhY2VycyBvZiBBZW9ucyBQcmVtO0phZGUgUmVja29uaW5nIFByZW07VGhlIEludGVybmF0aW9uYWwgMjAxOSBWZXJzdXMgU2NyZWVuIEk7VGktOSBSb3NoYW47UmVwdGlsaWFuIFJlZnVnZSBSYWRpYW50IENyZWVwcztSZXB0aWxpYW4gUmVmdWdlIERpcmUgQ3JlZXBzO0NvbGxlY3RvcnMgQmFieSBSb3NoYW4gMjAxODtXZWF0aGVyIFJhaW47VGVycmFpbiAtIEltbW9ydGFsIEdhcmRlbnM7Uml2ZXIgVmlhbCBSZWQ7QXp1cmUgQ29uc3RlbGxhdGlvbiBIVUQ7REsgUGVyc29uYSBEYXZpb247QXhlIGZ1bGwgSW1tb3J0YWxzIE1lZ2FwYWNrIGFsdDtMZWdpb24gQ29tbWFuZGVyIE1vZE1ha2VyIE1lZ2FQYWNrO0t1bmtrYSBJbW1vcnRhbHMgTWVnYVBhY2s7TmlnaHQgU3RhbGtlciBJbW1vcnRhbCBhbmQgUmVhcGVyIEtpc2lsZXYgTW9kTWFrZXIgTWVnYVBhY2s7U0YgQXJjYW5hIE1lZ2FwYWNrO1dyYWl0aCBLaW5nIEFyY2FuYSBNZWdhUGFjaztHb2xkZW4gRGFyayBNYXcgSW5oaWJpdG8gYW5kIEdvbGRlbiBQcm9mYW5lIFVuaW9uIGFuZCBHb2xkZW4gRHJlYWQgUmVxdWlzaXRpb24gTGlmZXN0ZWFsZXIgSW1tb3J0YWxzIE1lZ2FwYWNrO0FudGlNYWdlIEZlbWFsZTtCcmlzdGxlYmFjayBNZWdhUGFjaztNb3RoZXIgb2YgVGhvdXNhbmRzO1NoZXJtYW4gTWFpZGVuIFYgNC4xO1RoZSBKYWRlIEdlbmVyYWw7UGxhbmV0ZmFsbCBhbmQgSnVkZ2VtZW50IG9mIHRoZSBGYWxsZW4gYW5kIEJyYWNlcnMgb2YgdGhlIENhdmVybiBMdW1pbmFyIEFSQ0FOQSBNZWdhUGFjaztIdXNrYXIgTWVnYVBhY2sgTkVXO01hcnMgVEkxMCBDb2xsZWN0b3JzIENhY2hlIE1lZ2FQYWNrO01lZHVzYSBNZWdhUGFjayBORVc7TW9ua2V5IEtpbmcgQXJjYW5hIE1lZ2FQYWNrO0FsbHVyZSBvZiB0aGUgRGVlcDtPZ3JlIE1hZ2kgSW1tb3J0YWxzIEFyY2FuYSBNZWdhUGFjaztTaWxlbmNlciBNZWdhUGFjaztTbGFyZGFyIE1lZ2FQYWNrIHNldDtTcGlyaXQgQnJlYWtlciBNZWdhUGFjaztTdmVuIEltbW9ydGFscyBNZWdhUGFjayBVUDtUaW1iZXJzYXcgTWVnYVBhY2s7VHJlYW50IFByb3RlY3RvciBNZWdhUGFjaztVcnNhIEltbW9ydGFscyBNZWdhUGFjaztCYWJ5IFRveSBQdWRnZSBQZXJzb25hOyAxMjN8fHw=