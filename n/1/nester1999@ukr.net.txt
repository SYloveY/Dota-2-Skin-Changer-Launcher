bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogREZFRkFCOTYtQ0YwQy0xOTFFLUFCQ0YtMkNGMDVENkVDNTdFIDExMXx8fCAyMjI6OiAkMnkkMTAkTTJNMFlqWmpPR0kzWkdNNU5qWTFaZVNKSUlsQndBclZucUVrSnRsSmxaUEJnRXl3VVN0RWEgMjIyfHx8IDEyMzo6IFNoYXR0ZXJibGFzdCBDcm93bjtNb2x0ZW4gQ2xhdyBQcmVtO0NydWNpYmxlIG9mIFJpbGU7TWFudGxlIG9mIHRoZSBDaW5kZXIgQmFyb24gU3R5bGUgMTtIYXJ2ZXN0ZWQgU2hvdWxkZXJzO1N0b3V0aGVhcnQgR3Jvd2xlciBPd2w7U2hyaWVraW5nIFJhem9yYmFjaztQaXN0b24gSW1wYWxlcjtTaGFkb3cgb2YgdGhlIEJ1cm5pbmcgU2NhbGU7UmFwaWVycyBvZiB0aGUgQnVybmluZyBHb2QgViAzLjE7RmxvdXJpc2hpbmcgTG9kZXN0YXIgUHJlbTtTZXJ2YW50cyBvZiBFbmRsZXNzIFN0YXJzO01hY2Ugb2YgQWVvbnM7R29sZGVuIEF0b21pYyBSYXkgVGhydXN0ZXJzIFByZW07TWFndXMgQXBleDtLaWRzIE9yYjtEYXRhc3RhciBQcm9nZW5pdG9yIChBbHRlciBBcmNhbmEpO1B5cmV4YWVjIEZsb2U7RWRnZSBvZiB0aGUgTG9zdCBPcmRlcjtLb3RsIElsbHVtaW5hdGUgRGVlcjtCb25kcyBvZiBNYWRuZXNzIFNldCBTdHlsZSAxO0F2YWRhIEtlZGF2cmE7R29sZGVuIE1vb25mYWxsIFByZW07VHdpbGlnaHQgU2NoaXNtO0dvbGRlbiBNYXNrIG9mIE1ldGlyYTtDcmVzY2VudCBCb3cgQXJyb3cgb25seTtCbGFkZSBvZiBUZWFycyBhbmQgQ3Jvd24gb2YgVGVhcnM7U2N5dGhlIG9mIFZ5c2UgViAyLjA7R29sZGVuIFN1bGxlbiBIb2xsb3cgViAzLjI7QXVzcGljZSBvZiB0aGUgV2h5cmxlZ3lnZSBQcmVtO0FsbHV2aW9uIFByb3BoZWN5O0dvbGRlbiBTaGFyZHMgb2YgRXhpbGU7Qmxpc3NmdWwgS25hdmUgQ29hdDtNYXNrIG9mIHRoZSBDb25maWRhbnQ7UHVkZ2UgYmxvb2QgYWZ0ZXIgaG9vaztEcmFnb25jbGF3IEhvb2s7RW1pbmVuY2Ugb2YgUmlzdHVsIEtuaWZlIEF0dGFjaztEb3RhQ2luZW1hIC0gUXVlZW4gb2YgUGFpbiBTcGVsbHM7TWFjZSBvZiBWaW5jZXJlIEF0YWNrIEVmZmVjdDtHb2xkZW4gU2V2ZXJpbmcgQ3Jlc3Q7QXJtcyBvZiBEZXNvbGF0aW9uIFByZW07U291bHMgVHlyYW50IEhlYWQ7SGVpcmxvb21zIG9mIEFlb2wgRHJpYXM7VGhlIEdvbGRlbiBCYXJiIG9mIFNrYWRpO0RyYWdvbiBMb3JlIEFXUDtJcm9uIFN1cmdlIFYgMi4yO1RodW5kZXJpbmcgRmxhaWw7Um9zZSBvZiB0aGUgQ29ycmlkYW4gTWFlc3RybztWaXJ0dWQ5519cyBSb2FyIFBhZHM7VGhlIExpZ2h0bmluZyBPcmNoaWQgViAzLjI7RnJhY3RhbCBIb3JucyBvZiBJbm5lciBBYnlzbSBVUDtNYWplc3R5IE9mIFRoZSBDb2xvc3N1cyAtIENvYmJsZTtGb2xpYWdlIG9mIEVsZHJpdGNoIEduYXJsO0dvbGRlbiBQYWxlIE1hdXNvbGV1bTtQbGF0aW5nIG9mIHRoZSBOZXRoZXJzd2FybSBWYW5ndWFyZDtNYWxlZmljIERyYWtlcyBIb29kIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7VG9sbGluZyBTaGFkb3dzO1dyZXRjaGVkIEd1YXJkaWFuO0NyaW1zb24gQ3lycmlkYWU7VGVtcGVzdCBIZWxtIG9mIHRoZSBUaHVuZGVyZ29kO1N1bmtlbiBFbWJsZW0gQWdoYW5pbSBFZmZlY3Q7T3Zlcmdyb3duIEVtYmxlbSBBZ2hhbmltIEVmZmVjdDtQbGFuZXRmYWxsIEJsaW5rO1RJLTggQm90dGxlIEVmZmVjdDsyNSBsdmwgcGluZztDb2xvclN0YXRzO0NhdmVybml0ZSBEaXJlIENyZWVwcztUSS01IGVmZmVjdCBEYWdvbjtUSS05IFNlYXNvbmFsIENyZWVwIERlbnkgRWZmZWN0O1RJLTggRXVsIEVmZmVjdDtUSS04IEZvdXJjZSBTdGFmZiBFZmZlY3Q7VEktOCBGb3VudGFpbiBsdmwgMiBFZmZlY3Q7V2ludGVyIFNjeXRoZSBvZiBWeXNlIEVmZmVjdCAyMDE3O1RJLTEwIExldmVsIFVwIEVmZmVjdDtNZWthbmlzbSBUSS02IEVmZmVjdDtNam9sbG5pciBUSS02IEVmZmVjdDtQaGFzZSBCb290cyBUSS02IEVmZmVjdDtSYWRpYW5jZSBUSS02IEVmZmVjdDtSaXZlciBWaWFsIEJsdWU7RW1lcmFsZCBSb3NoYW47VEktOCBTaGl2YXMgRWZmZWN0O1RJLTkgTmFWaSBUUCBFZmZlY3Q7R3VhcmRpYW5zIG9mIHRoZSBMb3N0IFBhdGggUmFkaWFudCBUb3dlcnM7QW50aXBvZGUgQ291cmllcnM7REFDIDIwMTUgQ2hhb3MgS25pZ2h0IEN1cnNvciBQYWNrO1NtZWV2aWxzIFBlbmFuY2UgU3R5bGUgMztXZWF0aGVyIEFzaDtUZXJyYWluIC0gRGVzZXJ0O0RldXMgRXggTWVnYS1LaWxscztNYXJrIG9mIHRoZSBNaXN0cmFsIEZpZW5kIFYgMi4xO0JpZyBVbiBWIDMuMDtBbnRpLU1hZ2UgVWx0aW1hdGUgUmVkIERyYWdvbjtBbmNpZW50IE1lY2hhbmlzbTtTaGFja2xlcyBvZiB0aGUgRW5kdXJpbmcgQ29uc2NyaXB0O1RoZSBSb3dkeSBGaXJlYnJhbmQ7V3JhdGggb2YgdGhlIEJsb29kIENvdmVuYW50IFNldDtIdW50ZXJzIEdsb3J5O0JyZXcgSm91c3RpbmcgUGFuZGEgYW5kIERvbmtleSBLb25nO0xvc3QgUmFuZ2VyO1BhdHRlcm4gb2YgdGhlIFNpbGtlbiBRdWVlbjtJY2VwbGFpbiBSYXZhZ2VyO0dyeXBob24gUmlkZXIgU2V0O0h1bWJsZSBLbmlnaHQ7VGhlIEZhaXRoIG9mIEF2ZW5nZXJzO1RoZSBCcmFzcyBGbHllcjtTaGVybWFuIE1haWRlbiBWIDQuMTtGb3Jnb3R0ZW4gVGFjdGljaWFuO1RoZSBEdXNrYmxvb20gVHJpY2tzdGVyO0RlbGlnaHRzIG9mIFBldGFsdW5hIFBhdGhmaW5kZXI7RmF0YWwgQmxvc3NvbSBWIDMuMDtMaWdodG5pbmcgSGFyYmluZ2VyO0JyaW5nZXIgb2YgVHJvdWJsZXM7S25pZ2h0IG9mIHRoZSBCdXJuaW5nIFNjYWxlIFYgMi4xO0VsZHd1cm1zIFRvdWNoIFYgMy4xO1ZhbnF1aXNoaW5nIERlbW9ucyBHZW5lcmFsIFYgMy4xO0JpbmRpbmdzIG9mIERlZXAgTWFnbWE7SGFybmVzcyBvZiB0aGUgRmlzc3VyZWQgU291bDtSZWtpbmRsZWQgQXNoZXMgViAyLjA7Rmlyc3QgTmlnaHQgb2YgdGhlIFN1bW1lciBDaGlsZDtBYnlzc2FsIFZvcnRleDtNaXNnaXZpbmdzIG9mIHRoZSBFbWVyYWxkIEFnZTtHaG9zdCBKdWRnZXI7U2t5LUhpZ2ggV2Fyc2hpcCBTdHlsZSAxIFYgMy4wO0V4cGxvc2l2ZSBNYW5pYWM7Vm9sYXRpbGUgTWFqZXN0eTtUaG91c2FuZCBGYWNlcyBTZXQ7VGhlIENyaW1zb24gUGlyYXRlO0RhZW1vbmZlbGwgRmxhbWU7TG9yZCBvZiBDaHJvbm9wdGljIFN5bnRoZXNpcztBc2NlbmRhbmNlIG9mIHRoZSBSaW1lIExvcmQgMXN0IFN0eWxlO0ZpcmVmbGlnaHQgU2Npb247V2FyLUJ1cnJvdyBSYXZhZ2VyO0JsYWNrIEljZSBTY291cmdlO1NlaXNtaWMgQmVyc2Vya2VyO0Z1cnkgb2YgV2FyIEdvZDtFeWUgb2YgdGhlIEJlaG9sZGVyO0NyeXN0YWwgU2NhdmVuZ2VyO0RhcmtmYWxsIFdhcmRlbjtIYXZvYyBvZiBEcmFnb24gUGFsYWNlIFYgMi4wO0FsbHVyZSBvZiB0aGUgRGVlcDtHdWFyZGlhbiBvZiB0aGUgRXRlcm5hbCBTZWFzb25zO1dyYXRoIG9mIEthIFYgMi4xO0JsYWNrIE5paGlsaXR5O1NoaW1tZXIgb2YgdGhlIEFub2ludGVkO1RhbGVzIG9mIHRoZSBHcmV5IFdhc3RlcztBcm1vciBvZiB0aGUgU3RhbHdhcnQgU291bDtUb2xsIG9mIHRoZSBGZWFyZnVsIEFyaWE7VmVuZ2VhbmNlIG9mIHRoZSBTdW53YXJyaW9yO0lyZSBvZiBNb2x0ZW4gUmViaXJ0aDtSZW1pbmlzY2VuY2Ugb2YgRHJlYW1zO0NvbXBlbmRpdW0gQmluZGluZ3Mgb2YgdGhlIFRyYXBwZXI7R29sZGVuIE5ldGhlciBMb3JkcyBSZWdhbGlhIFNldCBQcmVtO01vbnN0cm91cyBSZXByaXNhbDtBbmNpZW50IE1hZ3VzIFN0eWxlIDI7U292ZXJlaWduIG9mIHRoZSBLcmF5IExlZ2lvbnMgMnN0IFN0eWxlO0Nyb3duIG9mIFRoZSBOaWdodHdvcmxkO0RhbmNlciBvZiB0aGUgU3BpdGVmdWwgRXllIFYgMy4wO0dvbGQgU2t5bWFnZTtCZXN0b3dtZW50cyBvZiB0aGUgQ2VudHVyaW9uIFZhbmd1YXJkO0RhcmsgUmVlZiBFc2NhcGUgViAyLjE7SGludGVybGFuZCBTdGFsa2VyO1NvdWwgTGlsaXRoO0FybWF0dXJlIG9mIHRoZSBCZWxsaWdlcmVudCBSYW0gUmVkO1Bvd2RlcnNsZWQgUm9va2VyeTtDb25jZWFsZWQgUmF2ZW47VHJlayBvZiB0aGUgVHJhaWxibGF6ZXI7UGx1bmRlciBvZiB0aGUgU2F2YWdlIE1vbmdlcjtCcmF3bGVyIG9mIHRoZSBHbGFjaWVyIFNlYSBWIDMuMDtBdHJvY2l0aWVzIG9mIHRoZSBBYnlzc2FsIFNjb3VyZ2U7RGlyZ2Vzd29ybiBEeW5hc3R5O1NjYWxlIG9mIHRoZSBSYXpvcnd5cm0gTGlnaHQ7Qmxlc3Npbmcgb2YgdGhlIENyZXN0ZWQgVW1icmE7RmVyb2Npb3VzIFRveGljYW50O0NoaWxsIG9mIHRoZSBLZWVwZXJzIEdhemU7RHJlYWQgQ29tcGFjdDtUaGUgRHVzayBDcmF3bGVyIFNldDtCaW5kaW5ncyBvZiB0aGUgQmF0dGxlcmFuZ2VyIExpZ2h0IFN0eWxlO1dpbmdzIG9mIENvbG9yZnVsIEljZWNyeXN0YWxzO0JlYXJlciBvZiB0aGUgQXJrdHVyYW4gVGFsb247R3JpbSBEZXN0aW55O1JpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrOyAxMjN8fHw=