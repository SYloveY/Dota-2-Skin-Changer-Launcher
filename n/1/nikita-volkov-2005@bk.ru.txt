limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$YTIzNWVkMGRkZDY1NmE2NOhLfQJbjW2Cbpj5dhpsXkLMfSHNjmsrS 222||| 123:: Blue Lil Nova;Chromy the Centipede Ward;Guardians of the Lost Path Radiant Towers;Guardians of the Lost Path Dire Towers;Emerald Roshan;River Vial Slime;Azure Constellation HUD;Rollermawster and Mecha Boots of Travel Mk III;Blackshield Protodrone Missile Launcher;Bracers of Aeons Prem;Timebreaker Prem;Jewel of Aeons Prem;Pyrexaec Floe;Pachyderm Powderwagon Sign;Pachyderm Powderwagon Elephant;Bombtrails and Boomsticks Spoon;Bombtrails and Boomsticks Spleen;Iron Surge V 2.2;Savage Mettle;Fin King*s Charm Prem;Shatterblast Crown;Paddapon of Ribbitar V 4.0;Mantle of the Cinder Baron Style 1;Crucible of Rile;Mark of the First Hunt Bestowed;Blastforge Exhaler;The Golden Barb of Skadi;Rippers Reel;Yulsarias Mantle Prem;Ice Blossom;Yulsaria*s Glacier Prem;Edge of the Lost Order;Auspice of the Whyrlegyge Prem;Staff of Perplex Prem;Rubick Curse - Death Ward;Rubick Curse - Freezing Field;Rubick Curse - Mass Serpent Ward;Rubick Curse - Spirit Bear;Bloodfeather Wings Prem;Eminence of Ristul Knife Attack;Bloodfeather Feast;Tempest Helm of the Thundergod Prem;Mark of the Mistral Fiend V 2.1;Cosmic Wanderer;Bloodroot Guard;Spatial Rifter V 3.0;Misgivings of the Emerald Age;Big Un V 3.0;Red Mist Reaper Set;Creed of the Outlaw Huntsman;The Keen Commander;Dark Reef Escape V 2.1;Sherman Maiden V 4.1;Lollipop Juggernaut V 3.0;Tales of the Grey Wastes;Ancient Magus Style 2;Aspect of the Year Beast; 123|||