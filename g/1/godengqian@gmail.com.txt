limitHWID:: 1 000||| 111:: 38FA2B60-F68D-8DC8-36FA-F02F74AD8BB7 111||| 222:: be1b8a73fe39f6d2d1081dc6e0e8bd667e3ce913628a2707a3fdac54d2f730aa4e0e3ca8277bfec6c41c5e0a2face3c5edccc04329e866e487fb6e70202d5703 222||| 123:: drive_dir::Aghanim Dungeon Scepter Effect;drive_dir::Windranger Arcana style 1 (Blue Bird) + Full WR immortal;drive_dir::Sven Immortals MegaPack UP;drive_dir::Acolyte of the Lost Arts;drive_dir::Soul Diffuser Prem;drive_dir::Planetfall;drive_dir::Mace of Aeons Prem;drive_dir::Jewel of Aeons Prem;drive_dir::Doom Immortals MegaPack;drive_dir::Blaze of Oblivion Back;drive_dir::Mars TI10 Collectors Cache MegaPack;drive_dir::Flesh Golem of Forlorn Descent;drive_dir::Roshan pw loadingscreen;drive_dir::Blossom of the Merry Wanderer;drive_dir::Kunkka Immortals MegaPack;drive_dir::Book of the Vizier Exile Prem;drive_dir::Golden Bracers of Forlorn Precipice;drive_dir::Jade Reckoning Prem;drive_dir::Axe of the Proven;drive_dir::Crystals of the Violent Precipitate Champion;drive_dir::Beast of the Crimson Ring Weapon;drive_dir::Darkbrew Enforcer and Eternal Radiance Blades and Midas Knuckles MegaPack;drive_dir::Clockwerk MegaPack;drive_dir::Seismic Berserker Club;drive_dir::Fluttering Amethyst + Purple Focal Resonance Dota2Changer Edition;drive_dir::Tempest Helm of the Thundergod + Righteous Thunderbolt;drive_dir::Swift Claw and Ferocious Heart;drive_dir::Outworld Devouver MegaPack;drive_dir::Occultists Pursuit;drive_dir::TI-10 Blink lvl 2 Effect;drive_dir::Drow Ranger MegaPack;drive_dir::Huskar MegaPack NEW;drive_dir::Kung fu Master;drive_dir::Apogee of the Guardian Flame;drive_dir::Great Sages Reckoning Timeless Tale;drive_dir::Manifold Paradox PA Arcana Style 3;drive_dir::Bloody Baby Invoker;drive_dir::Axe full Immortals Megapack;drive_dir::Wraith King Arcana MegaPack;drive_dir::Juggernaut Arcana Bladeform Legacy;drive_dir::Ursa Immortals MegaPack;drive_dir::Queen of Pain Arcana MegaPack;drive_dir::Champions Blue Color for TB;drive_dir::Abaddon RED MegaPack;drive_dir::Nightstalker MegaPack set;drive_dir::SF Arcana Megapack;drive_dir::Golden Dark Maw Inhibito and Golden Profane Union and Golden Dread Requisition Lifestealer Immortals Megapack;drive_dir::Concord Reversion UP;drive_dir::Phantom Concord Prem;drive_dir::Blade of Tears and Crown of Tears;drive_dir::DK Persona Davion;drive_dir::Nyx Assassin MegaPack new;drive_dir::Hidden Vector - Blade;drive_dir::Hidden Vector - Hat;drive_dir::Hidden Vector - Belt;drive_dir::Hidden Vector - Armor;drive_dir::Brightskye Ultimate Orb;drive_dir::Corridan Maestro and The Lightning Orchid and Golden Mandate of the Stormborn MegaPack NEW;drive_dir::AntiMage RED MegaPack;drive_dir::Prominence;drive_dir::Wings of Daybreak;drive_dir::Ice Lina Premium;drive_dir::Mirana TI10 Collectors Cache MegaPack;drive_dir::Ogre Magi Immortals Arcana MegaPack;drive_dir::Pugna Immortals MegaPack;drive_dir::Slark MegaPack New;drive_dir::Tidehunter MegaPack;drive_dir::Ancient Inheritance - Shoulder;drive_dir::Viper MegaPack;drive_dir::Skittering Desolation Prem;drive_dir::Golden Cyrridae Prem;drive_dir::Frostheart;drive_dir::Severing Crest Prem;drive_dir::Severing Lash Prem;drive_dir::The Barren Crown;drive_dir::Crown of Vile Convocation;drive_dir::Tormented Staff;drive_dir::Tormented Crown;drive_dir::Arcana Crystal Maiden Frost Avalanche;drive_dir::Feast of Abscession;drive_dir::Fetters of Omniscience;drive_dir::Crown of Sacred Light;drive_dir::Adoring Wingfall Prem;drive_dir::Skywrath Mage MegaPack Thanatos;drive_dir::Spirit Breaker MegaPack;drive_dir::Silencer MegaPack;drive_dir::Desert Burn Saddle;drive_dir::Phantom Ascension Shoulders;drive_dir::Phantom Ascension;drive_dir::Golden Rectifier;drive_dir::Controlled Burn;drive_dir::Helm of Grim Reformation;drive_dir::The Hallows Within Tombstone;drive_dir::True Pitlord;drive_dir::Emerald Conquest;drive_dir::Rollermawster;drive_dir::Arcanic Resonance Beam;drive_dir::Submerged Hazard Launcher;drive_dir::Submerged Hazard Hull;drive_dir::Ink Dragon Poet;drive_dir::Herald of the Ember Eye - Brush;drive_dir::Jakiro MegaPack;drive_dir::Dota 2 Changer Edition Hunters Hoard of the Crimson Witness;drive_dir::Tines of Tybara;drive_dir::Mark of the First Hunt Harvested;drive_dir::Diabolic Aspect;drive_dir::Chaos Fulcrum;drive_dir::Talons of the Endless Storm Weapon;drive_dir::Ire of the Ancient Gaoler Shoulder;drive_dir::Golden Infernal Chieftain;drive_dir::Primal Peacemaker;drive_dir::Scabbards of the Stormcharge Dragoon;drive_dir::Firestarter V2.0; 123|||