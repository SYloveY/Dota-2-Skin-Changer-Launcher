bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMjE3QjMzNDUtMTU2My1DRTRBLUFCRDUtQjRBOUZDNkI3NEZCIDExMXx8fCAyMjI6OiAwOTdlNTZlYmYzMjYzOWQwZjNjNzI1YTAyNGYyODY1YzQzZTdiNDljZWI5NTFiOGIyM2I0M2RmMzQ4ZjY2ZWFmYzk5OTQzM2EzNGU0N2ZhOTQ5NWNhYTQ1YzFlN2E0ZDM2YmNlNDFmOTY2NTAyNjY4MGI1NjgyMmU0Y2E4ZTczZSAyMjJ8fHwgMTIzOjogUHJvbWluZW5jZTtTY3l0aGUgb2YgSWNlIFYgMi4wO0ZlYXN0IG9mIEFic2Nlc3Npb247SW5zYXRpYWJsZSBCb25lc2F3IFByZW07UmlwcGVycyBSZWVsIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7VGhlIEJhcnJlbiBWZWN0b3I7VGhlIEJhcnJlbiBDcm93bjtBc3BlY3Qgb2YgT3NjaWxsYTtIb3Jyb3IgZnJvbSB0aGUgRGVlcCBBcm1zO0dvbGRlbiBGbG9vZG1hc2s7QW50aG96b2FuIEFzc2F1bHQgLSBUaW55O0FudGhvem9hbiBBc3NhdWx0IC0gTWVkaXVtO0FudGhvem9hbiBBc3NhdWx0IC0gTGFyZ2U7QW50aG96b2FuIEFzc2F1bHQgLSBIdWdlO0xhcmdlIEFudGhvem9hIEdpYW50O0FudGhvem9hbiBBc3NhdWx0IC0gV2VhcG9uO0dvbGRlbiBQaXNjZWFuIFB1bHZlcml6ZXI7TWQ5519cm5mdWwgUmV2ZXJpZTtIZWxtIG9mIEVjaG9lcztUd2lzdGVkIE1hZWxzdHJvbSB3aXRoIFdvcmxkIENoYXNtIEFydGlmYWN0O0xvcmQgb2YgTHVtaW5hcmllcyBFaWRvbG9ucztHbG9yeSBvZiB0aGUgRWxkZXJmbGFtZSAtIEFybXM7R2xvcnkgb2YgdGhlIEVsZGVyZmxhbWUgLSBCZWx0O0dsb3J5IG9mIHRoZSBFbGRlcmZsYW1lIC0gTmVjaztTdWxsZW4gUmFtcGFydDtTdWxsZW4gSG9sbG93O1N1bGxlbiBIYXJ2ZXN0O1BsYW5ldGZhbGw7SnVkZ2VtZW50IG9mIHRoZSBGYWxsZW47R29kcyBNZXJjeSBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO0NyaW1zb24gUHJvZ2VuaXRvcnMgQmFuZTtCZWx0IG9mIHRoZSBTcGlyYWwgQm9yZTtCcmFjZXJzIG9mIE9ybmF0ZSBDcnVlbHR5O0V5ZXMgb2YgQXJkZW5vaztTaG9jayBvZiB0aGUgQW52aWwgUHJlbTtMaW5lYWdlIFRoZSBSYW1zIEhlYWQgQXJtYW1lbnRzO1RoZSBLaW5nIG9mIFRoaWV2ZXM7S3Vua2thIEltbW9ydGFscyBNZWdhUGFjaztEZXNlcnQgVHJhdmVsbGVyIFNldDtSdWxlciBvZiB0aGUgRnJvc3RiaXRlIER1bmVzO1NpbGVuY2VyIE1lZ2FQYWNrO1RpZGVodW50ZXIgTWVnYVBhY2s7SnVuZ2xlIEV4cGxvcmVyIFNldDtWaXNpb24gb2YgdGhlIFNlcmFwaCBTY2lvbiAtIExpZ2h0O1dpdGNoIERvY3RvciBNZWdhUGFjaztXaW5kcmFuZ2VyIEFyY2FuYSBzdHlsZSAyIChPcmFuZ2UgQmlyZCkgYW5kIEZ1bGwgV1IgaW1tb3J0YWw7Rm93bCBQbGFndWUgU2V0O0NvcnJpZGFuIE1hZXN0cm8gYW5kIFRoZSBMaWdodG5pbmcgT3JjaGlkIGFuZCBHb2xkZW4gTWFuZGF0ZSBvZiB0aGUgU3Rvcm1ib3JuIE1lZ2FQYWNrIE5FVztNZWNoYSBIb3JuZXQgU2V0O0FyZW5hIENoYW1waW9uIFNldDsgMTIzfHx8