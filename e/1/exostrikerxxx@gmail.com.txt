bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogQ0EyRkY1N0UtQ0ZBNy0xMUU2LUI1NzUtOThFRUNCNzE3Q0QzIDExMXx8fCAyMjI6OiAxYWU0OTlmNjdlZWY3YTNmZDI2ZmVhOGJlODJlMDliNzQ3MjE1YTU0MzIxYzQ5NTg4MWUyMDRiMjE2YmI2MjRkZjk0MzBjOThhYjg5MjNmNTIyY2I5ZGQ4OWZiYTQ1ZGY5ZTI0MDMxMDlhN2M4OTQzM2NiMThlZWE2ZTcxNGJjOCAyMjJ8fHwgMTIzOjogZHJpdmVfZGlyOjpXeXZlcm4gSGF0Y2hsaW5nO2RyaXZlX2Rpcjo6REFDIDIwMTUgQ2hhb3MgS25pZ2h0IEN1cnNvciBQYWNrO2RyaXZlX2Rpcjo6Q3VzdG9tIERhc2hib2FyZCAyMDtkcml2ZV9kaXI6Ok1hcmsgb2YgdGhlIE1pc3RyYWwgRmllbmQgViAyLjE7ZHJpdmVfZGlyOjpHYXJiIG9mIHRoZSBQcm9waGV0IEZvcmV0b2xkO2RyaXZlX2Rpcjo6VGFpbCBvZiB0aGUgRXF1aWxpYnJpdW07ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgRXF1aWxpYnJpdW07ZHJpdmVfZGlyOjpTaGF0dGVyYmxhc3QgQ3Jvd247ZHJpdmVfZGlyOjpUaW1lIFdhbmRlcmVyO2RyaXZlX2Rpcjo6TWFyYXVkZXIgQ2hpZWZ0YWluIG9mIHRoZSBDaGFvcyBXYXN0ZXM7ZHJpdmVfZGlyOjpIdW50ZXJzIEdsb3J5O2RyaXZlX2Rpcjo6QmFyYmFyb3VzIEJsYWRlcyBBcm1zO2RyaXZlX2Rpcjo6QmFyYmFyb3VzIEJsYWRlcyBCYWNrO2RyaXZlX2Rpcjo6QmFyYmFyb3VzIEJsYWRlcyBNYXNrO2RyaXZlX2Rpcjo6QmFyYmFyb3VzIEJsYWRlcyBOZWNrO2RyaXZlX2Rpcjo6QmFyYmFyb3VzIEJsYWRlcyBXZWFwb247ZHJpdmVfZGlyOjpJY2VwbGFpbiBSYXZhZ2VyO2RyaXZlX2Rpcjo6VGhlIElyb24gUGlvbmVlcjtkcml2ZV9kaXI6OkZvcmdvdHRlbiBUYWN0aWNpYW47ZHJpdmVfZGlyOjpQZWFjb2NrIFByaWVzdDtkcml2ZV9kaXI6OkhlYXZlbmx5IFN3b3JkIERvb20gViAzLjA7ZHJpdmVfZGlyOjpEZWF0aCBCbG9zc29tIFNldDtkcml2ZV9kaXI6OkJpbmRpbmdzIG9mIERlZXAgTWFnbWE7ZHJpdmVfZGlyOjpCbGF6ZSBBcm1vciBWIDIuMTtkcml2ZV9kaXI6OkFieXNzYWwgVm9ydGV4O2RyaXZlX2Rpcjo6VGVuZ3UgR3VhcmRpYW4gU2V0O2RyaXZlX2Rpcjo6UHlyZXhhZWMgRmxvZTtkcml2ZV9kaXI6OkJhcmRpbmcgb2YgQ2hpbWVyaWMgUmFwcG9ydDtkcml2ZV9kaXI6OlZhbGt5cmllIE9mIFRoZSBSZW1haW5zO2RyaXZlX2Rpcjo6U29yY2VyZXIgb2YgdGhlIEJsYWNrIFBvb2w7ZHJpdmVfZGlyOjpCZXdpdGNoaW5nIEZsYXJlIFYgMi4wO2RyaXZlX2Rpcjo6V2FyLUJ1cnJvdyBSYXZhZ2VyO2RyaXZlX2Rpcjo6SHVudGVyIG9mIEtpbmdzIFYgMi4wO2RyaXZlX2Rpcjo6RnVyeSBvZiBXYXIgR29kO2RyaXZlX2Rpcjo6Vm9vZG9vIE1lZXBvO2RyaXZlX2Rpcjo6SGF2b2Mgb2YgRHJhZ29uIFBhbGFjZSBWIDIuMDtkcml2ZV9kaXI6OlByaXNtYXRpYyBHcmFjZTtkcml2ZV9kaXI6OlNjb3VyZ2UgRG9taW5pb24gViAyLjE7ZHJpdmVfZGlyOjpDaWNhdHJpeCBSZWdhbGlhIEJsYWNrO2RyaXZlX2Rpcjo6SGVhdmVubHkgTGlnaHQ7ZHJpdmVfZGlyOjpHb2xkZW4gU2hhcmRzIG9mIEV4aWxlO2RyaXZlX2Rpcjo6Qmxvb2Ryb290IEd1YXJkO2RyaXZlX2Rpcjo6TmlydmFuYSBTcGlyaXR1YWw7ZHJpdmVfZGlyOjpHcmFuZCBBYnNjZXNzaW9uIEhvb2sgQnVuZGxlO2RyaXZlX2Rpcjo6QXJtbGV0IG9mIHRoZSBCYXNpbGlzaztkcml2ZV9kaXI6OlNwaW5lIG9mIHRoZSBCYXNpbGlzaztkcml2ZV9kaXI6OlB1ZGdlIGJsb29kIGFmdGVyIGhvb2s7ZHJpdmVfZGlyOjpIZWxtIG9mIFRhcnJhc3F1ZTtkcml2ZV9kaXI6OlRoZSBUYWlsIEJhc2g7ZHJpdmVfZGlyOjpHb2xkZW4gU2NhdmVuZ2luZyBHdXR0bGVzbHVnO2RyaXZlX2Rpcjo6Q291bnRlc3Mgb2YgUmlzdHVsO2RyaXZlX2Rpcjo6TWFjZSBvZiBWaW5jZXJlIEF0YWNrIEVmZmVjdDtkcml2ZV9kaXI6OkRvdGFDaW5lbWEgLSBRdWVlbiBvZiBQYWluIFNwZWxscztkcml2ZV9kaXI6Ok1vbnN0cm91cyBSZXByaXNhbDtkcml2ZV9kaXI6OlN0ZWVsIEtpbmc7ZHJpdmVfZGlyOjpGYXRob21sZXNzIFJhdmFnZXI7ZHJpdmVfZGlyOjpIdXNoIG9mIEV0ZXJuYWwgTmlnaHQ7ZHJpdmVfZGlyOjpBcm1zIG9mIHRoZSBCcmVhY2ggV2FyZGVuO2RyaXZlX2Rpcjo6UGxhdGUgb2YgdGhlIENlbnR1cmlvbiBWYW5ndWFyZDtkcml2ZV9kaXI6OlBpa2Ugb2YgdGhlIEJyZWFjaCBXYXJkZW47ZHJpdmVfZGlyOjpTb3VsIExpbGl0aDtkcml2ZV9kaXI6OlN0b3JtIERyYWdvbiBQb3RlbnRlO2RyaXZlX2Rpcjo6Rm91bGZlbGwgQ29ycnVwdG9yO2RyaXZlX2Rpcjo6TW9sdGVuIERlc3RydWN0b3I7ZHJpdmVfZGlyOjpNZWRpdW0gSWduZWQ5519cyBTdG9uZTtkcml2ZV9kaXI6OlBsdW5kZXIgb2YgdGhlIFNhdmFnZSBNb25nZXI7ZHJpdmVfZGlyOjpBYnlzc2FsIEN1aXJhc3M7ZHJpdmVfZGlyOjpDcnlvZ2VuaWMgRW1icmFjZSBTZXQ7ZHJpdmVfZGlyOjpDaGlsbCBvZiB0aGUgS2VlcGVycyBHYXplO2RyaXZlX2Rpcjo6RmVyb2Npb3VzIFRveGljYW50O2RyaXZlX2Rpcjo6QXJyYXkgb2YgVHJhbnF1aWxpdHk7ZHJpdmVfZGlyOjpCZWFyZXIgb2YgdGhlIEFya3R1cmFuIFRhbG9uO2RyaXZlX2Rpcjo6Uml0dWFsIG9mIHRoZSBEcmVhZGJvcm4gUmVnZW50O2RyaXZlX2Rpcjo6Q2hpbGxpbmcgRmVhdGhlcjtkcml2ZV9kaXI6OkVtYmVyIFRpcHBlZCBDYXJhcGFjZSBTZXQ7ZHJpdmVfZGlyOjpCbGVzc2luZyBvZiB0aGUgQ3Jlc3RlZCBVbWJyYTtkcml2ZV9kaXI6OkRpcmdlc3dvcm4gRHluYXN0eTtkcml2ZV9kaXI6OkJhcnJpZXIgUm9ndWU7ZHJpdmVfZGlyOjpCYXJrIG9mIHRoZSBBZ2VsZXNzIFdpdG5lc3MgRGlzdGluZ3Vpc2hlZDtkcml2ZV9kaXI6OlN1Ym1lcmdlZCBIYXphcmQ7ZHJpdmVfZGlyOjpUaGUgVGltZWtlZXBlciBTaWx2ZXI7ZHJpdmVfZGlyOjpDeWNsb3BlYW4gTWFyYXVkZXI7ZHJpdmVfZGlyOjpJcm9uYmFyZGUgQ2hhcmdlcjtkcml2ZV9kaXI6OlNob290aW5nIFN0YXI7ZHJpdmVfZGlyOjpEYXJrIFJlZWYgRXNjYXBlIFYgMi4xO2RyaXZlX2Rpcjo6UGFsZSBFZGdlIFYgMi4wO2RyaXZlX2Rpcjo6R29sZCBTa3ltYWdlO2RyaXZlX2Rpcjo6Q2hhcm1lciBvZiBGaXJlc25ha2U7ZHJpdmVfZGlyOjpSYW1ibGluZyBGYXRlYmVuZGVyO2RyaXZlX2Rpcjo6TWFnaXN0ZXIgb2YgdGhlIE5hcnJvdyBGYXRlcztkcml2ZV9kaXI6OkRlbW9uaWMgUHVnbmEgViAzLjA7ZHJpdmVfZGlyOjpSZW1pbmlzY2VuY2Ugb2YgRHJlYW1zO2RyaXZlX2Rpcjo6QXJteSBPZiBUaGUgVmFzdCBTZWE7ZHJpdmVfZGlyOjpQaXRmYWxsIENydXNhZGVyO2RyaXZlX2Rpcjo6U3RhcmdhemVyIEZpbmFsIFByb3BoZWN5O2RyaXZlX2Rpcjo6QXVzcGljZSBvZiB0aGUgV2h5cmxlZ3lnZSBQcmVtO2RyaXZlX2Rpcjo6VW5mZXR0ZXJlZCBNYWxldm9sZW5jZTtkcml2ZV9kaXI6Okd1YXJkaWFuIG9mIHRoZSBFdGVybmFsIFNlYXNvbnM7ZHJpdmVfZGlyOjpQcmlkZSBvZiB0aGUgV2ludGVybW9vbjtkcml2ZV9kaXI6OkV5ZSBvZiB0aGUgQmVob2xkZXI7ZHJpdmVfZGlyOjpTZWlzbWljIEJlcnNlcmtlcjtkcml2ZV9kaXI6OkJsYWNrIEljZSBTY291cmdlO2RyaXZlX2Rpcjo6VHdpbGlnaHQgU2NoaXNtO2RyaXZlX2Rpcjo6Q29tcGVuZGl1bSBCbG9vZHkgUmlwcGVyO2RyaXZlX2Rpcjo6U3BpcmV0aG9ybiBSZWdhbGlhIFYgMi4wO2RyaXZlX2Rpcjo6U2VhYm9ybmUgUmVwcmlzYWw7ZHJpdmVfZGlyOjpTdXNhbm8gT3MgRGVzY2VuZGFudDtkcml2ZV9kaXI6OkV4cGxvc2l2ZSBNYW5pYWM7ZHJpdmVfZGlyOjpBbGxpZWQgQ29tbWFuZGVyIFNldDtkcml2ZV9kaXI6OlRoZSBDb3JydXB0aW9uIG9mIE5lenp1cmVlbTtkcml2ZV9kaXI6OkhlYWRsYW5kIEh1bnRyZXNzO2RyaXZlX2Rpcjo6SGFybmVzcyBvZiB0aGUgRmlzc3VyZWQgU291bDtkcml2ZV9kaXI6OlZhbnF1aXNoaW5nIERlbW9ucyBHZW5lcmFsIFYgMy4xO2RyaXZlX2Rpcjo6Qml0dGVyd2luZyBMZWdhY3k7ZHJpdmVfZGlyOjpMaWdodG5pbmcgSGFyYmluZ2VyO2RyaXZlX2Rpcjo6U2FjY2hhcmluZSBTYWJvdGV1cjtkcml2ZV9kaXI6OkJsdWVoZWFydCBTb3ZlcmVpZ24gViAyLjA7ZHJpdmVfZGlyOjpQcm92aW5jZSBvZiB0aGUgSHVudCBFdGVybmFsO2RyaXZlX2Rpcjo6Um9zZSBBbmQgVGhlIEJlYXN0O2RyaXZlX2Rpcjo6RmVhc3Qgb2YgdGhlIEdsdXR0b25zIExhcmRlcjtkcml2ZV9kaXI6OlRoZSBHYWxsb3dzIFVuZGVyc3R1ZHkgU2V0O2RyaXZlX2Rpcjo6VGhlIFJvd2R5IEZpcmVicmFuZDtkcml2ZV9kaXI6Ok92ZXJncm93bjtkcml2ZV9kaXI6Ok1hZ2UgQWJvbGlzaGVyIFYgMi4wO2RyaXZlX2Rpcjo6QmlnIFVuIFYgMy4wO2RyaXZlX2Rpcjo6SFVEIG9mIHRoZSBCdXJuaW5nIFNjYWxlIEljZTtkcml2ZV9kaXI6OkVuaWdtYSBsb2Fkc2NyZWVuO2RyaXZlX2Rpcjo6VGVycmFpbiAtIFRoZSBLaW5ncyBOZXcgSm91cm5leTtkcml2ZV9kaXI6OkJsb29kc2Vla2VyIFdhcmQ7ZHJpdmVfZGlyOjpXZWF0aGVyIEFzaDsgMTIzfHx8