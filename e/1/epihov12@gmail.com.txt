bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogNzlGREZDNjItQUVEMS1FNzExLTgwQzctOTgyOUE2NDgwMjY0IDExMXx8fCAyMjI6OiAkMnkkMTAkT1dNM05tUTFPRFJqWldFeU1qQm1PT3UwUk5WcExXcVZsV1Y5NU5GVy9kd00vZDZqQVJTVHkgMjIyfHx8IDEyMzo6IFB5cmlvbiBGbGF4IEFubm91bmNlcjtQbGF0aW51bSBCYWJ5IFJvc2hhbjtDdXN0b20gRGFzaGJvYXJkIDEzOTtTaGF0dGVyYmxhc3QgQ3Jvd247Q3J1Y2libGUgb2YgUmlsZTtNYW50bGUgb2YgdGhlIENpbmRlciBCYXJvbiBTdHlsZSAxO0hhcnZlc3RlZCBTaG91bGRlcnM7U3RvdXRoZWFydCBHcm93bGVyIEJvYXI7SGVsbSBvZiB0aGUgUHJpbWV2YWwgUHJlZGF0b3I7UGlzdG9uIEltcGFsZXI7WXVsc2FyaWFzIE1hbnRsZSBQcmVtO0ljZSBCbG9zc29tO1R3aWxpZ2h0IEhleCAtIEFybW9yO0RhcmsgUmVhbG0gT3JhY2xlcyBNYXNrO0RhcmsgUmVhbG0gT3JhY2xlcyBBcm1vcjtGbG91cmlzaGluZyBMb2Rlc3RhciBQcmVtO1NlcnZhbnRzIG9mIEVuZGxlc3MgU3RhcnM7SmV3ZWwgb2YgQWVvbnMgUHJlbTtCaW5kaW5ncyBvZiB0aGUgUmlmdCBWIDIuMTtQeXJleGFlYyBGbG9lO1dhcmdvZCBvZiB0aGUgQmxhZGVrZWVwZXI7RWRnZSBvZiB0aGUgTG9zdCBPcmRlcjtNb3VudCBvZiB0aGUgRm9yZ290dGVuIFJlbmVnYWRlO0xldmlhdGhhbiBXaGFsZSBCbGFkZTtMZWdhY3kgb2YgdGhlIEZhbGxlbiBMZWdpb247RmlyZSBMb3R1cyBCZWx0O1NwaXJpdCBvZiBDYWxtIFYgMi4xO1dvbHZlcyBvZiBBbWJyeSBWIDIuMTtHb2xkZW4gTWFzayBvZiBNZXRpcmE7QmxhZGUgb2YgVGVhcnMgYW5kIENyb3duIG9mIFRlYXJzO055eCBBc3Nhc3NpbnMgRGFnb247QXVzcGljZSBvZiB0aGUgV2h5cmxlZ3lnZSBQcmVtO0FsbHV2aW9uIFByb3BoZWN5IFYgMi4wO0dvbGRlbiBTaGFyZHMgb2YgRXhpbGU7TWFzayBvZiB0aGUgQ29uZmlkYW50O0Jsb29kZmVhdGhlciBXaW5ncyBQcmVtO1NldmVyaW5nIENyZXN0IFYgMi4wO1RoZSBCYXJyZW4gVmVjdG9yO0h1c2ggb2YgRXRlcm5hbCBOaWdodDtHb2xkZW4gRW1weXJlYW47R29sZGVuIEZ1bGwtQm9yZSBCb25hbnphO1NvdWwgRGlmZnVzZXIgViAyLjE7VGh1bmRlcmluZyBGbGFpbDtJcm9uIFN1cmdlIFYgMi4yO1Jvc2Ugb2YgdGhlIENvcnJpZGFuIE1hZXN0cm87UGFjaHlkZXJtIFBvd2RlcndhZ29uIEVsZXBoYW50O1BhY2h5ZGVybSBQb3dkZXJ3YWdvbiBTaWduO1dpbmdzIG9mIHRoZSBGb3VsZmVsbCBDb3JydXB0b3IgUHJlbWl1bTtTY2FybGV0IE9haztGb2xpYWdlIG9mIEVsZHJpdGNoIEduYXJsO0RhcmsgTWVhZG93IE1hc3NhY3JlIEhlYWQ7QmFyZGluZyBvZiB0aGUgU2llZ2UtRHJha2U7SFVEIG9mIHRoZSBCdXJuaW5nIFNjYWxlIEljZTtNaWRsYW5lIGxvYWRpbmdzY3JlZW47T2N1bGEgdGhlIE9ic2VydmVyO1dlYXRoZXIgU25vdztNYXJrIG9mIHRoZSBNaXN0cmFsIEZpZW5kIFYgMi4xO1JhaWQgb2YgdGhlIE5vcnRoZXJuIEV4aWxlcztGZXJ2ZW50IENvbnNjcmlwdCBWIDMuMDtUaGUgUm93ZHkgRmlyZWJyYW5kO0NyZWVkIG9mIHRoZSBPdXRsYXcgSHVudHNtYW47QnJldyBKb3VzdGluZyBQYW5kYSBhbmQgRG9ua2V5IEtvbmc7UGF0dGVybiBvZiB0aGUgU2lsa2VuIFF1ZWVuO01hemUgUm9hciBTZXQ7R3J5cGhvbiBSaWRlciBTZXQ7QmFycmVuIFN1cnZpdm9yIFYgMi4wO0xpbmVhZ2UgUHJvdmluY2Ugb2YgdGhlIEh1bnQgRXRlcm5hbDtTb3VsIG9mIFN0ZWFtO01lbnRvciBvZiB0aGUgQXJ0aWYgQ29udmVydCBWIDIuMTtBbmNlc3RyYWwgVHJhcHBpbmdzIFNldCBWIDMuMDtMaWdodG5pbmcgSGFyYmluZ2VyO0JyaW5nZXIgb2YgVHJvdWJsZXM7S25pZ2h0IG9mIHRoZSBCdXJuaW5nIFNjYWxlIFYgMi4xO1N0cmVuZ3RoIG9mIHRoZSBEZW1vbiBTdG9uZSBTZXQgViAzLjE7QmluZGluZ3Mgb2YgRGVlcCBNYWdtYTtIYXJuZXNzIG9mIHRoZSBGaXNzdXJlZCBTb3VsO0ZpcmVzIG9mIHRoZSBWb2xjYW5pYyBHdWFyZDtUaGUgQ2hhaW5lZCBTY3JpYmU7UG9ydGVudCBQYXlsb2FkO0V4cGxvc2l2ZSBNYW5pYWM7VmVzdGlnZSBvZiB0aGUgQXJzZW5hbCBNYWd1cyBXZXg7TG9yZCBvZiBDaHJvbm9wdGljIFN5bnRoZXNpcztBc2NlbmRhbmNlIG9mIHRoZSBSaW1lIExvcmQgMXN0IFN0eWxlO05vcnRoZXJuIEJsaWdodDtTZWlzbWljIEJlcnNlcmtlcjtGdXJ5IG9mIFdhciBHb2Q7RXllIG9mIHRoZSBCZWhvbGRlcjtWb29kb28gTWVlcG87SGF2b2Mgb2YgRHJhZ29uIFBhbGFjZSBWIDIuMDtQcmlzbWF0aWMgR3JhY2U7R3VhcmRpYW4gb2YgdGhlIEV0ZXJuYWwgU2Vhc29ucztXcmF0aCBvZiBLYSBWIDIuMSBTdHlsZSAyO0JsYWNrIE5paGlsaXR5O1RvbGwgb2YgdGhlIEZlYXJmdWwgQXJpYTtWZW5nZWFuY2Ugb2YgdGhlIFN1bndhcnJpb3I7SXJlIG9mIE1vbHRlbiBSZWJpcnRoO1JlbWluaXNjZW5jZSBvZiBEcmVhbXM7V3JpdCBvZiB0aGUgUm95YWwgQnV0Y2hlcjtHb2xkZW4gTmV0aGVyIExvcmRzIFJlZ2FsaWEgU2V0IFByZW07TW9uc3Ryb3VzIFJlcHJpc2FsO1RoZSBJbnNjcnV0YWJsZSBaZWFsIFNldDtDcm93biBvZiBUaGUgTmlnaHR3b3JsZDtGYXRob21sZXNzIFJhdmFnZXI7VGhlIFRydWUgQ3JvdyBWIDIuMDtCZXN0b3dtZW50cyBvZiB0aGUgQ2VudHVyaW9uIFZhbmd1YXJkO0RhcmsgUmVlZiBFc2NhcGUgViAyLjE7QXJtcyBvZiBSaXNpbmcgRnVyeTtGbHV0dGVyaW5nIEFtZXRoeXN0O1RpZGVodW50ZXIgS2lsbGVyO0x1bWJlcmNsYXc7VGlua2VyIFNjYXJlY3JvdyBTZXQ7SWNld3JhY2sgTWFyYXVkZXI7QmFycmllciBSb2d1ZTtBYnlzc2FsIEN1aXJhc3M7Qmxlc3Npbmcgb2YgdGhlIENyZXN0ZWQgVW1icmE7RmVyb2Npb3VzIFRveGljYW50O0NoaWxsIG9mIHRoZSBLZWVwZXJzIEdhemU7RHJlYWQgQ29tcGFjdDtUaGUgRHVzayBDcmF3bGVyIFNldDtCaW5kaW5ncyBvZiB0aGUgQmF0dGxlcmFuZ2VyIExpZ2h0IFN0eWxlO0JlYXJlciBvZiB0aGUgQXJrdHVyYW4gVGFsb247R3JpbSBEZXN0aW55O1JpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrOyAxMjN8fHw=