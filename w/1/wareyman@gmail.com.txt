limitHWID:: 1 000||| 111:: 75741160-FE8D-11D5-8926-14DAE9994D1C 111||| 222:: 2c19231aeaeb1ed33b6e8885d2cd9de6dcb34b63468f2d04d275e43d23bf68725c9cea7f15062b3235b6b83b98d949e6960d75673b0938826d5e10a1275f5003 222||| 123:: Hidden Vector - Blade;Hidden Vector - Hat;Hidden Vector - Belt;Hidden Vector - Armor;Golden Aegis;Aghanims Interdimensional Baby Roshan;Honey Heist Baby Roshan;Slumbering Terror;Origin of the Unmaking;Herald of the Ember Eye - Mask;Herald of the Ember Eye - Armor;Herald of the Ember Eye - Belt;Fortune of the Five Houses;Soul of the Slayer Prem;Disciple of the Wyrmwrought Flame;Crimson Progenitors Bane;Gods Mercy of the Crimson Witness;Sniper Immortal Weapon of the Ardalan Interdictor;Helm of the Ardalan Interdictor;Pack of the Ardalan Interdictor;Bracers of the Silver Fox;Voice of Flockhearts Gamble;Dread Retribution - Headwear Alt;Weather Rain;Midnight Terror HUD;Gabe Newell Mega-Kill;V1lat Announcer;Hair of the Survivor;Ire of the Ancient Gaoler Shoulder;Book of the Vizier Exile Prem;Golden Bracers of Forlorn Precipice;Mace of Aeons Prem;Crimson Bracers of Aeons Prem;Perceptions of the Eternal Mind;Jewel of Aeons;Tomo*kan Incarnate Arbalest;Tomo*kan Incarnate Tail;Tomo*kan Incarnate Hood;Tomo*kan Incarnate Armor;Benevolent Companion V 2.0;Helm of the Ember Demons;Flashpoint Proselyte - Off-Hand;The Spoils of Dezun;Draca Maw;Fin Kings Charm of Eminent Revival Exceptional;Hell-Spar Anathema Obsidian Blight;Mulctant Pall of the Crimson Witness;Pyramid of the Temple of the Fallen Sun;Blaze of Oblivion Head;Swine of the Sunken Galley Prem;Crimson Gates of Nothl;Nothlic Burden of the Crimson Witness Prem;Darkclaw Emissary Staff;Damarakan Muzzle of the Crimson Witness;Shield of the Silent Edict;Glaive of Oscilla;Phantom Ascension Belt;Phantom Ascension;Phantom Ascension Shoulders;Transversant Soul of the Crimson Witness Prem;Soul Diffuser Prem;Golden Floodmask;Aquemerald Blade;Emerald Subjugation;Crimson Emerald Conquest;Ravenous Abyss - Armor;Acolyte of the Lost Arts with Taunt Attacks;Puppet Pudge Persona (you can add Hook) UP;Divine Flame V 2.0;Arena Champion Set;Ogre Magi Immortals Arcana MegaPack;Arcana MegaPack Shadow Fiend;Storm Spirit MegaPack;Earthshaker MegaPack New;Queen of Pain Arcana MegaPack;Windranger Arcana style 1 (Blue Bird) + Full WR immortal;Scorching Amber Dragoon;Everblack;Darkbrew Enforcer and Eternal Radiance Blades and Midas Knuckles MegaPack;AAMegaPack;Pledge of the Dragons Disciple and Golden Basher Blades and Golden Origins of Faith MegaPack;AntiMage RED MegaPack;Axe full Immortals Megapack alt;Bristleback MegaPack;Cursed Spirit;Golden Dark Maw Inhibito and Golden Profane Union and Golden Dread Requisition Lifestealer Immortals Megapack;Monkey King Arcana MegaPack;Morphling Immortals MegaPack UP;Manifold Paradox Gothic Hunter;Slark MegaPack New; 123|||