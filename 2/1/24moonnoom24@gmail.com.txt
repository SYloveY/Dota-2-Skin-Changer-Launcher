bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRjc2NTg4MTItQjIwRi1FMjExLTk4MkMtMzA4NUE5RjI3Mjc1IDExMXx8fCAyMjI6OiAkMnkkMTAkWkdFeVpERTJaamRsTlRZek5UWXpZdUtTYjY2ZDdtcXZnMWxnLzRUdURYRWQ5Y25BaTk2cEcgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6QXJhYmlhbiBSaWRlcnM7ZHJpdmVfZGlyOjpUZXJyYWluIC0gU3ByaW5nO2RyaXZlX2Rpcjo6QXJzZW5hbCBvZiB0aGUgRGVtb25pYyBWZXNzZWwgViAyLjE7ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgRXF1aWxpYnJpdW07ZHJpdmVfZGlyOjpUYWlsIG9mIHRoZSBFcXVpbGlicml1bTtkcml2ZV9kaXI6OkdvbGRlbiBPZmZoYW5kIEJhc2hlciBvZiBNYWdlIFNrdWxscztkcml2ZV9kaXI6OkFjb2x5dGUgb2YgVmVuZ2VhbmNlIEhvb2RlZCBNYXNrO2RyaXZlX2Rpcjo6T2ZmaGFuZCBCYXNoZXIgb2YgTWFnZSBTa3VsbHM7ZHJpdmVfZGlyOjpTaG91bGRlciBQbGF0ZSBvZiB0aGUgRmVydmVudCBDb25zY3JpcHQ7ZHJpdmVfZGlyOjpPYXRoYm91bmQgRGVmaWFudCBQYXVsZHJvbnM7ZHJpdmVfZGlyOjpHb2xkZW4gQmFzaGVyIG9mIE1hZ2UgU2t1bGxzO2RyaXZlX2Rpcjo6U2ZTIERlbW9uIEh1bnRlciBGb3IgQW50aW1hZ2U7ZHJpdmVfZGlyOjpUaGUgQmFzaGVyIEJsYWRlcztkcml2ZV9kaXI6OktvbWVpamkgS29pc2hpIDIgZm9yIEJhbmUgYnkgUGF0Y2hvdWxpIEtub3dsZWRnZTtkcml2ZV9kaXI6Okd1aXNlIG9mIHRoZSBXaW5nZWQgQm9sdDtkcml2ZV9kaXI6OlF1aXZlciBvZiB0aGUgQm9yZWFsIFdhdGNoO2RyaXZlX2Rpcjo6QWxnaWQgTGVnYWN5O2RyaXZlX2Rpcjo6U2hvdWxkZXJzIG9mIHRoZSBCbGFjayBXaW5kIFJhdmVuO2RyaXZlX2Rpcjo6RnJvc3RnbGFkZSBGYW1pbGlhciBCb3c7ZHJpdmVfZGlyOjpMYWR5IFN5bHZhbmFzIGZvciBEcm93IC0gRWxkd3VybXMgVG91Y2g7ZHJpdmVfZGlyOjpUaGUgSG9sbG93IFNldDtkcml2ZV9kaXI6OkJhdHRsZWZ1cnk7ZHJpdmVfZGlyOjpNYWNlIG9mIEFlb25zO2RyaXZlX2Rpcjo6TWFzayBvZiBNYWRuZXNzIGZvciBWb2lkIERvdGEyQ2hhbmdlciBFZGl0aW9uO2RyaXZlX2Rpcjo6Q2FwZSBvZiB0aGUgQmxvb2Ryb290IEd1YXJkO2RyaXZlX2Rpcjo6Q2FwcmljaWQ5519cyBGYXRlIEhlYWQ7ZHJpdmVfZGlyOjpDYXByaWNpb3VzIEZhdGUgU2hvdWxkZXI7ZHJpdmVfZGlyOjpCZWx0IG9mIHRoZSBHbGVhbWluZyBTZWFsO2RyaXZlX2Rpcjo6RmlyZXMgb2YgVmFzaHVuZG9sIG5vIGVmZmVjdCBWIDIuMTtkcml2ZV9kaXI6OkJsb29kc3RhaW5lZCBCcml0Y2hlcztkcml2ZV9kaXI6OkNyYXplZCBUYXNzZWxzIG9mIHRoZSBCbGFjayBEZWF0aDtkcml2ZV9kaXI6OkRpcmVjb3VydCBKZXN0ZXIgQ2xlYXZlcjtkcml2ZV9kaXI6OlRoZSBUYWlsIEJhc2g7ZHJpdmVfZGlyOjpEb29tc2RheSBSaXBwZXIgU2hvdWxkZXI7ZHJpdmVfZGlyOjpEcmFnb25jbGF3IEhvb2s7ZHJpdmVfZGlyOjpQdWRnZSBTY3JlYW07ZHJpdmVfZGlyOjpQdWRnZSBEYWdnZXI7ZHJpdmVfZGlyOjpHcmVhdCBTYWdlKnMgUmVja29uaW5nO2RyaXZlX2Rpcjo6U3RhZmYgb2YgR3VuLVl1O2RyaXZlX2Rpcjo6SGVhbGluZyBGb3VudCBvZiB0aGUgTG9zdCBJc2xlcztkcml2ZV9kaXI6OkdpZnRzIG9mIHRoZSBWYW5pc2hlZCBJc2xlIEFybXM7ZHJpdmVfZGlyOjpBcnNlbmFsIG9mIHRoZSBCbGFkZWtlZXBlcjtkcml2ZV9kaXI6OlNpZ2lsIE1hc2sgb2YgdGhlIEJsYWRla2VlcGVyO2RyaXZlX2Rpcjo6R2lmdHMgb2YgdGhlIFZhbmlzaGVkIElzbGUgTGVncztkcml2ZV9kaXI6OkJsYWNrZW5lZCBFZGdlIG9mIHRoZSBCbGFkZWtlZXBlcjtkcml2ZV9kaXI6OlNlcnJha3VyYTtkcml2ZV9kaXI6OkFybXMgb2YgRGVzb2xhdGlvbjtkcml2ZV9kaXI6OkV0ZXJuYWwgSGFydmVzdDtkcml2ZV9kaXI6OlRveGljIERlYXRoIEVhdGVyO2RyaXZlX2Rpcjo6SGFyc2ggU29qb3Vybjtkcml2ZV9kaXI6OkNvbnNwaWN1b3VzIEN1bHByaXQgTW9oYXdrO2RyaXZlX2Rpcjo6Q29uc3BpY3VvdXMgQ3VscHJpdCBBcm1vcjtkcml2ZV9kaXI6OlNob3VsZGVycyBvZiB0aGUgSWNld3JhY2sgTWFyYXVkZXI7ZHJpdmVfZGlyOjpLZWVwZXIgb2YgT2JsaXZpb24gQXJtb3I7ZHJpdmVfZGlyOjpSaXR1YWwgb2YgdGhlIExveWFsIEZvbGQ7ZHJpdmVfZGlyOjpCYWNrIG9mIHRoZSBTZWFzb25lZCBFeHBlZGl0aW9uYXJ5O2RyaXZlX2Rpcjo6QXJtIG9mIHRoZSBFeGFjdCBNYXJrc21hbjtkcml2ZV9kaXI6OldpdGNoIEh1bnQgSGF0O2RyaXZlX2Rpcjo6Q29sYXIgb2YgdGhlIEFyZGFsYW4gSW50ZXJkaWN0b3I7ZHJpdmVfZGlyOjpHcmFtcGEgU2hhcnBpZXMgU2hpbiBTaG9vdGVyO2RyaXZlX2Rpcjo6V2VhcG9uIG9mIHRoZSBTZWFzb25lZCBFeHBlZGl0aW9uYXJ5O2RyaXZlX2Rpcjo6R3JpbSBEZXN0aW55O2RyaXZlX2Rpcjo6Q3Vyc2Ugb2YgdGhlIENyb3cgS2luZyBCYWNrO2RyaXZlX2Rpcjo6Q2FwZSBvZiB0aGUgU3RvbmVtYXJjaCBTb3ZlcmVpZ247ZHJpdmVfZGlyOjpEcmVhZGtuaWdodCBQYXVsZHJvbjtkcml2ZV9kaXI6OkhlbG0gb2YgR3JpbSBEZXN0aW55O2RyaXZlX2Rpcjo6RW1waXJlIERlc3Ryb3llcjtkcml2ZV9kaXI6OkRyZWFka25pZ2h0IEJsYWRlO2RyaXZlX2Rpcjo6V2F5ZmFyaW5nIFNjaG9sYXIgU2V0O2RyaXZlX2Rpcjo6TmVwdHVuZSBmb3IgTWFycyBieSBQYXRjaG91bGkgS25vd2xlZGdlO2RyaXZlX2Rpcjo6Q292ZW5hbnQgb2YgdGhlIERlcHRocztkcml2ZV9kaXI6OlRoZSBKYWRlIEdlbmVyYWw7ZHJpdmVfZGlyOjpJb2xvIFdpc3AgU3R5bGUgMjtkcml2ZV9kaXI6OkRpdmluZSBGbGFtZSBWIDIuMDtkcml2ZV9kaXI6OkdvZGRlc3Mgb2YgdGhlIFVuZGVyd29ybGQ7ZHJpdmVfZGlyOjpCcmFjZXJzIG9mIHRoZSBDYXZlcm4gTHVtaW5hcjtkcml2ZV9kaXI6OkJlbHQgb2YgdGhlIFJlZCBNb3VudGFpbjtkcml2ZV9kaXI6OkljZSBTaGFrZXI7ZHJpdmVfZGlyOjpGb3Jnb3R0ZW4gRXBvY2g7ZHJpdmVfZGlyOjpCYXN0aW9uIG9mIHRoZSBMaW9uc2d1YXJkO2RyaXZlX2Rpcjo6Q3J5c3RhbCBTY2F2ZW5nZXI7ZHJpdmVfZGlyOjpTb3VsIERpZmZ1c2VyO2RyaXZlX2Rpcjo6QXVyYW50aWFjbyBtaWxpdGlzO2RyaXZlX2Rpcjo6TWFsZWZpYyBEcmFrZXMgSG9vZCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO2RyaXZlX2Rpcjo6Rm9ybSBvZiB0aGUgRmVydmlkIE1vbmFyY2g7ZHJpdmVfZGlyOjpFdWxzIFNjZXB0ZXIgb2YgRGl2aW5pdHk7ZHJpdmVfZGlyOjpZdWxzYXJpYSpzIE1hbnRsZTtkcml2ZV9kaXI6OktpbW9ubyBvZiB0aGUgSWNlYm91bmQgRmxvcmV0O2RyaXZlX2Rpcjo6U3R5bGUgb2YgdGhlIEx1bWluaSBQb2xhcmU7ZHJpdmVfZGlyOjpBYnlzc2FsIEhlbGxjbGF3O2RyaXZlX2Rpcjo6TWFudGxlIG9mIEhlbGwqcyBBbWJhc3NhZG9yO2RyaXZlX2Rpcjo6TXVsY3RhbnQgUGFsbDtkcml2ZV9kaXI6OkZpbiBLaW5nKnMgQ2hhcm07ZHJpdmVfZGlyOjpBdmFkYSBLZWRhdnJhO2RyaXZlX2Rpcjo6SWxsaWRhbiBSVVMgc291bmRzO2RyaXZlX2Rpcjo6QmVzdG93bWVudHMgb2YgdGhlIENlbnR1cmlvbiBWYW5ndWFyZDtkcml2ZV9kaXI6OlBsYXRlIG9mIHRoZSBDZW50dXJpb24gVmFuZ3VhcmQ7ZHJpdmVfZGlyOjpHb2xkZW4gR3Jhc3BpbmcgQmx1ZGdlb247ZHJpdmVfZGlyOjpOYWdhIEd1YXJkaWFuIGZvciBTbGFyZGFyIFYgMi4wO2RyaXZlX2Rpcjo6QXJtb3Igb2YgdGhlIFN0b3JtIERyYWdvbiBQb3RlbnRlO2RyaXZlX2Rpcjo6UGF1bGRyb25zIG9mIHRoZSBTdG9ybSBEcmFnb24gUG90ZW50ZTtkcml2ZV9kaXI6OkZlYXRoZXJlZCBIYXQgb2YgdGhlIENvcnJpZGFuIE1hZXN0cm87ZHJpdmVfZGlyOjpLcm9iZWxpbmcgUHJlbTtkcml2ZV9kaXI6OkFjaWQgSHlkcmEgQ3Vyc29yIFBhY2s7ZHJpdmVfZGlyOjpDdXN0b20gRGFzaGJvYXJkIDEwNDtkcml2ZV9kaXI6Okludm9rYXRpb247ZHJpdmVfZGlyOjpBcGVydHVyZSBTY2llbmNlIFdhcmRjb3JlO2RyaXZlX2Rpcjo6VGVjaGllcyBNZWdhLUtpbGxzO2RyaXZlX2Rpcjo6R2FjaGkgTWVnYS1LaWxscztkcml2ZV9kaXI6OkNoaXRvZ2UgTWVnYS1LaWxscztkcml2ZV9kaXI6OktvbmdvdSBNZWdhLUtpbGxzO2RyaXZlX2Rpcjo6VEktMTAgQm90dGxlIEVmZmVjdDtkcml2ZV9kaXI6OlF1ZXN0aW9uIG1hcmsgRGVueTtkcml2ZV9kaXI6OlBlZGVzdGFsIEZlYXN0IG9mIEFic2Nlc3Npb24gUmVkO2RyaXZlX2Rpcjo6UGVkZXN0YWwgQmxhZGVmb3JtIExlZ2FjeTtkcml2ZV9kaXI6OlRJLTggTFZMIFVQIEVmZmVjdDtkcml2ZV9kaXI6OkFudGlxdWl0eSBIVUQ7ZHJpdmVfZGlyOjpXZWF0aGVyIE1vb25iZWFtOyAxMjN8fHw=