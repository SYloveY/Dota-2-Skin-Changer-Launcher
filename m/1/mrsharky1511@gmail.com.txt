limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$YTQ2ZmZhNGE4MjNjMWNjYOagWV9zgBzDAZi4DX4q/Rlo9JxO4sT6C 222||| 123:: Carnage of the Endless Hunt - Shoulders;Axe Blackthorn Belt;Rampant Outrage Prem;Prize of the Snowpack Savage;Carnage of the Endless Hunt - Weapon;Assassination of Dark Feather Back;Assassination of Dark Feather Head;Blade of the Creeping Shadow;Tempest Helm of the Thundergod Prem;Markings of the King Restored;Cape of Falconside Armor;Falconside;Song of the Bluebird - Hood;Song of the Bluebird - Quiver;Quiver of Falconside Armor;Song of the Bluebird - Shoulder;Song of the Bluebird - Bow;Provocation of Ruin Bracers;Sinister Shadow Back;Gifts of the Vanished Isle Head;Provocation of Ruin Belt;Serrakura;Reptilian Refuge Dire Creeps;Black Ice Constellation - Arms;Black Ice Constellation - Cloak;Gaze of the Zebulon - set Head;Black Ice Constellation - Legs;Black Ice Constellation - Quiver;Armor of the Kha-Ren Faithful;Black Ice Constellation - Weapon;Wings of the Wicked Succubus;Horns of the Arch Temptress;Sash of Twilight Shade;Blade of the Obsidian Nightmare;Claws of the Sangstrath Fold;Mantle of the Sangstrath Fold;Barding of the Sangstrath Fold;Helm of the Ferocious Heart;Blacksail Cannoneer Arms;Cape of the Great Safari;Cyclopean Helm of the Keen Machine;Mantle of the Hinterland Stalker;Stonefire;Girdle of the Dark Wraith;Shawl of the Creeping Shadow; 123|||