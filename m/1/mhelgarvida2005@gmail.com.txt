bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMkFCRjRBREItQjlBNC1CQzQ4LUJGODQtODlEQUNBMDIwQjkyIDExMXx8fCAyMjI6OiAkMnkkMTAkWlRaaVpEZzVPRGd6TmpReFpXUmpOZWlWM2Z4YVhCLjBCUm9KZVJoaGc0dGcyQ2NNT3p1ejYgMjIyfHx8IDEyMzo6IFJvc2hhbiBIYWxsb3dlZW4gU2tpbjtIb2xpZGF5IFJhZGlhbnQgVG93ZXI7VEktNyBOUCBUUCBlZmZlY3Q7VEktMTAgQm90dGxlIEVmZmVjdDtLcm9iZWxpbmcgUHJlbTtBcm1vciBvZiB0aGUgV2luZ2VkIFNlbnRpbmVsO0xpbmVhZ2UgQmxhZGUgb2YgdGhlIFJhaWRmb3JnZWQgUmlkZXI7TGluZWFnZSBTaGllbGQgb2YgdGhlIFJhaWRmb3JnZWQgUmlkZXI7Q29tcGxldGUgSGVsbSBvZiB0aGUgRGFyayBNb29uIFN0YWxrZXI7THVjZW50eXI7QXJ0aXN0IG9mIHRoZSBBc3RyYWwgU3VtbWVyIC0gSGVhZDtUZW1wbGUgR2FsYSAtIEFybXM7VGVtcGxlIEdhbGEgLSBCYWNrO1RlbXBsZSBHYWxhIC0gSGVhZDtUZW1wbGUgR2FsYSAtIE1vdW50O1RlbXBsZSBHYWxhIC0gTWlzYztUZW1wbGUgR2FsYSAtIFNob3VsZGVyO1RlbXBsZSBHYWxhIC0gV2VhcG9uO0dsYWNpYWwgR2FyZGVucyBBcm1zO0Fzc2Fzc2luYXRpb24gb2YgRGFyayBGZWF0aGVyIEhlYWQ7QXNzYXNzaW5hdGlvbiBvZiBEYXJrIEZlYXRoZXIgU2hvdWxkZXI7R2xlYW1pbmcgU2VhbDtBc3Nhc3NpbmF0aW9uIG9mIERhcmsgRmVhdGhlciBCYWNrO0Fzc2Fzc2luYXRpb24gb2YgRGFyayBGZWF0aGVyIEJlbHQ7U3ltYm9sIG9mIHRoZSBLaW5nIFJlc3RvcmVkO1RlbXBlc3QgSGVsbSBvZiB0aGUgVGh1bmRlcmdvZCBQcmVtO0JlbHQgb2YgdGhlIEtpbmcgUmVzdG9yZWQ7WmV1cyBFbXBlcm9yIG9mIHRoZSBDbGVyZ3kgQXJtcztUSS0xMCBQaGFzZSBCb290cyBFZmZlY3Q7QmxpbmsgRGFnZ2VyIGx2bCAxIFRJLTYgRWZmZWN0O1RJLTggTFZMIFVQIEVmZmVjdDtDaGltZXMgb2YgdGhlIFRlbXBsZSBTaG91bGRlcjtBcm1vciBvZiB0aGUgT255eCBMb3R1cztUSS0xMCBNam9sbG5pciBFZmZlY3Q7RHJlc3Mgb2YgdGhlIE9ueXggTG90dXM7VHJlbmNoa25pZ2h0IC0gU2hvdWxkZXI7VHJlbmNoa25pZ2h0IC0gTWQ5519bnQ7VHJlbmNoa25pZ2h0IC0gSGVhZDtUcmVuY2hrbmlnaHQgLSBXZWFwb247VmVzcGVydGluZSBHdWFyZCBDbG9haztCbGFjayBJY2UgQ29uc3RlbGxhdGlvbiAtIEFybXM7QmxhY2sgSWNlIENvbnN0ZWxsYXRpb24gLSBMZWdzO1Nob290aW5nIFN0YXJzIEhlYWQ7U2hvb3RpbmcgU3RhcnMgTGVncztCbGFjayBJY2UgQ29uc3RlbGxhdGlvbiAtIENsb2FrO1F1aXZlciBvZiB0aGUgRnJvc3Rib3JuZSBXYXlmYXJlcjtTaG9vdGluZyBTdGFycyBTaG91bGRlcjtUaGUgR2lsZGVkIE1hdyBTaGllbGQ7U2lsdmVyIERyYWdvbiBLaW5nIFNob3VsZGVyO1RoZSBHaWxkZWQgTWF3IEhlbG07VGhlIEdpbGRlZCBNYXcgV2VhcG9uO0Jsb29keSBCcmlkZTtMaWNoIE1hc3RlciBOZWNyb21hbmNlciBWIDIuMTtIb25vcmVkIFNlcnZhbnQgb2YgdGhlIEVtcGlyZTsgMTIzfHx8