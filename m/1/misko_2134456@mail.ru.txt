limitHWID:: 1 000||| 111::  111||| 222:: c4e8574a3f2400059443c62a2ded138f2700e54f2a7af79076ff4d4ec51094de932d485b57aee168aef23c2dac3e0f24698d7078de63e4e35dcfed9bb068e938 222||| 123:: Terrain - Immortal Gardens;Burning Shield of the Outland Ravager;Helm of the Outland Ravager;Bracers of the Outland Ravager;Mantle of the Outland Ravager;Armor of the Outland Ravager;Horns of the Betrayer;Mulctant Pall of the Crimson Witness;Hell-Spar Anathema Obsidian Blight;Phantom Ascension Belt;Phantom Ascension Shoulders;Phantom Ascension;Phantom Ascension Weapon;Herald of the Ember Eye - Mask;Herald of the Ember Eye - Belt;Herald of the Ember Eye - Armor;Fortune of the Five Houses;Hidden Vector - Blade;Hidden Vector - Belt;Hidden Vector - Hat;Hidden Vector - Armor;Tormented Crown;Tormented Staff;Disciple of the Wyrmwrought Flame;Wyrmwrought Flare;Glory of the Elderflame - Arms;Golden Twilight Schism;Moonfall Prem;Lucentyr Prem;Mask of Metira;Pulsar Remnant Prem;Sapphire Sabre-Lynx Prem;Latticean Shards;Crown of Ultimate Worship;Latticean Hierarchy;Mask of the Confidant;Blissful Knave Coat;Rapier of the Windward Rogue;Solar Forge Prem;Pyramid of the Temple of the Fallen Sun;Blaze of Oblivion Back;Blossom of the Merry Wanderer;Feast of Abscession Chain;Manifold Paradox PA Arcana Style 3;Crimson Hearts of Misrule;The Sunbreeze Birthright;Ogre Magi Immortals Arcana MegaPack;Jakiro MegaPack;Queen of Pain Arcana MegaPack;Monkey King Arcana MegaPack;Frostheart;SF Arcana Megapack;Legion Commander ModMaker MegaPack; 123|||