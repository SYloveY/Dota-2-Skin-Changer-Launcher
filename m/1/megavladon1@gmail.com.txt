bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtNENDQzZBNjY1QzFDIDExMXx8fCAyMjI6OiAkMnkkMTAkTTJJMk16STFaamMwTXpWa1l6ZzVZTzZ2QldkaC9UMEFTY2pnMmZNOEhucUtxeTJQWVE4dGUgMjIyfHx8IDEyMzo6IFJpdmVyIFZpYWwgUGluaztHdWFyZGlhbnMgb2YgdGhlIExvc3QgUGF0aCBEaXJlIFRvd2VycztHdWFyZGlhbnMgb2YgdGhlIExvc3QgUGF0aCBSYWRpYW50IFRvd2VycztUdXJxdW9pc2UgR2lhbnQgR3VhcmQgU3RvbmU7U291bCBvZiB0aGUgU2xheWVyIFByZW07R29sZGVuIE1hbnRsZSBvZiBHcmltIEZhY2FkZTtDcmltc29uIEVkZ2Ugb2YgdGhlIExvc3QgT3JkZXI7UmFwaWVyIG9mIHRoZSBCdXJuaW5nIEdvZCBPZmZoYW5kO1RoZSBMaWdodG5pbmcgT3JjaGlkO01hdyBvZiBFenR6aG9rO1ZpZ2lsIFRyaXVtcGg7VGluZXMgb2YgVHliYXJhO0JsaXN0ZXJpbmcgU2hhZGU7R29sZGVuIFNldmVyaW5nIENyZXN0O0dvbGRlbiBHcmF2ZWxtYXc7RWRnZSBvZiB0aGUgTG9zdCBPcmRlcjtHb2xkZW4gU2hhZG93IE1hc3F1ZXJhZGU7V29ybGQgQ2hhc20gQXJ0aWZhY3Q7Vm9pZGhhbW1lcjtDcmltc29uIEVtZXJhbGQgQ29ucXVlc3Q7QXRvbWljIFJheSBUaHJ1c3RlcnMgUHJlbTtTbHVtYmVyaW5nIFRlcnJvcjtDb3Jwc2VtYWtlcjtTcGlrZXMgb2YgdGhlIFdyYXRocnVubmVyO01hbmlhcyBNYXNrIFByZW07QmF0dGxlZnVyeTtTb3VsIERpZmZ1c2VyIFByZW07QmxhZGUgb2YgVGVhcnMgYW5kIENyb3duIG9mIFRlYXJzO1BhdWxkcm9ucyBvZiBFdGVybmFsIEhhcnZlc3QgUHJlbTtDYW5ub24gb2YgdGhlIE9jY3VsdGlzdHMgUHVyc3VpdDtCaXR0ZXIgTGluZWFnZSBJbW1vcnRhbCBBeGVzO0dvbGRlbiBCYXNoZXIgQmxhZGVzIFYgMi4wO1NjeXRoZSBvZiBWeXNlIFYgMi4wO1Nob2NrIG9mIHRoZSBBbnZpbDtHb2xkZW4gQnJhY2VycyBvZiBGb3Jsb3JuIFByZWNpcGljZTtHb2xkZW4gU2NhdmVuZ2luZyBHdXR0bGVzbHVnO0F1c3BpY2Ugb2YgdGhlIFdoeXJsZWd5Z2U7Um9sbGVybWF3c3RlciBhbmQgTWVjaGEgQm9vdHMgb2YgVHJhdmVsIE1rIElJSTtHb2xkZW4gRHJlYWQgUmVxdWlzaXRpb247TWFudGxlIG9mIHRoZSBXaGlzcGVyZWQgQm9uZDtJY2UgUGhvZW5peCBQcmVtaXVtIEVkaXRpb247SG9ub3JlZCBTZXJ2YW50IG9mIHRoZSBFbXBpcmU7RXRlcm5hbCBGaXJlIFYgMi4xO1JpZ2h0ZWQ5519cyBUaHVuZGVyYm9sdCBhbmQgQXJjYW5hIE1lZ2FQYWNrO1NoYWRvdyBGbGFtZSBWIDMuMDsgMTIzfHx8