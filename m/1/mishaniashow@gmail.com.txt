limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$Mjc2NzEyZTBjOTMzM2FhYeTdKDHIoDve8C..kweRiNYVWEN7q.gze 222||| 123:: Arms of Desolation;Offhand Basher of Mage Skulls;Golden Basher of Mage Skulls;Rapier of the Burning God Offhand;Tempest Helm of the Thundergod Prem;Golden Immortal Pantheon;God*s Mercy;Arena Champion Armor;Mulctant Pall;Fin King*s Charm;Question mark Deny;Reptilian Refuge Radiant Creeps;TI-10 Mjollnir Effect;TI-10 Radiance Effect;TI-10 Phase Boots Effect;River Vial Green;TI-10 Bottle Effect;TI-10 Eul Scepter Effect;TI-10 Aghanim Effect;Reptilian Refuge Dire Creeps;TI-10 Shivas Effect;TI-10 Teleport lvl 2 Effect;Weather Moonbeam;The Lightning Orchid;Bloodfeather Wings;Battlefury;Mace of Aeons;Dark Artistry Bracers;Dark Artistry Cape;Dark Artistry Belt;Mask of the Divine Sorrow V 3.1;Heaven-Piercing Pauldrons;Eternal Harvest;Bloodroot Guard;Visions of the Lifted Veil;Adage of the Smoldering Sage;Honored Servant of the Empire;Ritual of the Loyal Fold;Blazing Cosmos;Witch Hunter Templar;Harvests Hound;Storm Dragon Potente;Dapper Disguise;Throes of Anguish Set Style 1;The Corruption of Nezzureem; 123|||