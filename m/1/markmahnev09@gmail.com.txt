limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$YzkwZDJiMTM0NDM0ZmE0ZeacXy8gJZX2i2dT9wSgbAG05yyoBM11C 222||| 123:: Armor of the Dreadborn Regent;Cape of the Dreadborn Regent;Fury of Boundless Darkness Head;Rampage Knight Mount;Shield of the Burning Nightmare;Oda Nobunaga Shoulder;Chaos Maw Weapon;Arms of Desolation;Pauldrons of Eternal Harvest;Collar of the Blackguard Magus;Dark Artistry Cape;Shoulders of the Dark Magic;Phantom Concord;Belt of the Sunwarrior;Buckler of the Bramble Lord;Hell*s Guide;Armor of Cruel Reprisal;Helm of Cruel Reprisal;Penumbral Crest;Assassination of Dark Feather Back;Nomad*s Shelter;Bracers of the Survivor;Sash of the Mage Abolisher;Faceless Death - Head;Golden Offhand Basher of Mage Skulls;Golden Basher of Mage Skulls;Golden Hydrakan Latch;Shadow in the Deep Bracers;Deep Warden*s Darkray Cape;Crown of the Ocean Conqueror;Shell of the Umizar Crawler;Heartless Hunt - Armor;Cape of the Hunter;Mask of Corruption;Heartless Hunt - Off-Hand;Mark of the First Hunt;Trappings of the Old-Timers - Weapon;Armlet of Reckless Vigor;Winter Hunting Head;Blade of Reckless Vigor;Wildmane Berserker Shoulder;Trident of the Samareen Sacrifice;Staff of Gun-Yu;Great Sage*s Reckoning;Span of Black Nihility;Origin of the Dark Oath - Legs;Indomitable Legacy - Weapon;Helm of the Stormwrought Arbiter;Lord of Northwarden Shoulder;Commander*s Skirt of the Flameguard;Hallowed Flame Bracer;The Song of Swiftguard - Finery;Lord Fox Head;Frozen Falchionaire Weapon;Severing Lash;Severing Crest;Armor of the Maze Keeper;Arms of the Forlorn Maze;Barding of the Maze Keeper;Cloak of the Demonic Vessel;Hood of the Everblack;Ram of Enveloping Despair;Endless Night Shoulder;Phantom*s Reaper;Terrain - Spring;Kongou Mega-Kills;Templar Assassin Anime Voice;Brightskye Gem of Truesight;Aperture Science Wardcore;Rough Rider*s Tools;Hat of Empiric Incendiary;Crow of Empiric Incendiary;Cape of Empiric Incendiary;Gloves of the Loaded Prospects;Wyrmbrew Connoisseur Back;Bandana of the Rumrunner*s Carronade;Wyrmbrew Connoisseur Off-Hand;Sash of the Rumrunner*s Carronade;Words of the Drunken Warlord;Gauntlet of the Treacherous Demon;Lion Greedy King Back;Mulctant Pall;Fin King*s Charm;Avada Kedavra;Emanations of the Worldcore Arms;Belt of the Jade General;Style of the Jade General;Serpent of the Jade Emissary;Jade Reckoning;Hood of the Heretic;Fringe of the Plaguemonger;Exodus of the Plague Witch Back;Raven Scythe;Eternal Radiance Blades Prem;Delight of the Northern Exiles;Formed Alloy Goggles;Frostreach Brigands Scarf;Razzils Midas Knuckles Prem;Razil*s Revitalizer Garb;Mace of Aeons;Frozen Void Belt;Frozen Void Arms;Frozen Void Head;Frozen Void Shoulder;Pauldrons of the Stonemarch Sovereign;Wraith King Rapier;Ritual of the Loyal Fold;Herald of Measureless Ruin V 2.1;Neptune for Mars by Patchouli Knowledge;Akamanah for Legion Commander V 3.1;Yagokoro Eirin for Dazzle by Patchouli Knowledge;Ferocious Heart;Guise of the Winged Bolt; 123|||