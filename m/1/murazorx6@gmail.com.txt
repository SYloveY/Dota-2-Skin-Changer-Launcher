limitHWID:: 1 000||| 111:: 66A14E03-E4EC-E111-9C08-B888E3A07DEE 111||| 222:: b8f06a1603d12742b0bd4cd56c3a694900eecafc031e612d776e3ce20cb1f73b9c74ff7a89e0ce80319274472df66964c2d59b314697c4a4576e288b2aba528e 222||| 123:: Staff of Gun-Yu;Rampant Outrage Prem;Axe of Phractos Prem;The Basher Blades;Golden Greevil;Mantle of the Cinder Baron Style 1;Rapiers of the Burning God V 3.1;Eternal Radiance Blades Prem;Razzils Midas Knuckles Prem;Arms of Desolation Prem;Focal Resonance V 3.0;Spaulders of the Psion Inquisitor;Full-Bore Bonanza;Iron Surge V 2.2;Savage Mettle;Yulsarias Mantle Prem;Crimson Cyrridae;Rainmaker V 4.0;Harvested Shoulders;Wraps of the Seasoned Veteran V 2.1;Tempest Helm of the Thundergod Prem;TI-8 TP lvl 1 Effect;TI-8 LVL UP Effect;TI-8 Fountain lvl 1 Effect;Pyrion Flax Announcer;25 lvl ping;Fuck Deny;TI-8 TP lvl 2 Effect;Golden Gravelmaw;Weather Snow;Magus Apex;The Lightning Orchid of Eminent Revival;Guardians of the Lost Path Radiant Towers;Cavernite Radiant Creeps;Cavernite Dire Creeps;Terrain - Winter;River Vial Blue;Bracers of the Cavern Luminar;Mulctant Pall;Golden Scavenging Guttleslug;Bloodstained Britches;Dragonclaw Hook;Mask of the Mad Harvester;Chopper of the Mad Harvester;Jewel of Aeons Prem;Bracers of Aeons Prem;Battlefury;Forgotten Renegade;The Rowdy Firebrand;Tipsy Brawler;Bitterwing Legacy;Trials of the Blackguard Magus No effects;Bindings of the Battleranger Chaotic Style; 123|||