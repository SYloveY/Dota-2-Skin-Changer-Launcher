bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRUExODUxQ0MtQTY4Ni05RDE3LUEwQjUtMDBEODYxQTY5QUZBIDExMXx8fCAyMjI6OiAkMnkkMTAkTkdFNU9UQmlNak13TkRGaE16QXlNT2o0V2ZMd3E4ZUZYYURJd0d3TDFRSkxWZFdYWmlXaW0gMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6RGFya2JyZXcgRW5mb3JjZXIgYW5kIEV0ZXJuYWwgUmFkaWFuY2UgQmxhZGVzIGFuZCBNaWRhcyBLbnVja2xlcyBNZWdhUGFjaztkcml2ZV9kaXI6OkFBTWVnYVBhY2s7ZHJpdmVfZGlyOjpXaWNrZWQgU3BhY2UgS25pZ2h0O2RyaXZlX2Rpcjo6SXJlIG9mIHRoZSBBbmNpZW50IEdhb2xlciBBcm1zO2RyaXZlX2Rpcjo6SXJlIG9mIHRoZSBBbmNpZW50IEdhb2xlciBCYWNrO2RyaXZlX2Rpcjo6V3JhaXRoYmluZGVyO2RyaXZlX2Rpcjo6QXhlIGZ1bGwgSW1tb3J0YWxzIE1lZ2FwYWNrIGFsdDtkcml2ZV9kaXI6Ok9yaWdpbiBvZiB0aGUgVW5tYWtpbmc7ZHJpdmVfZGlyOjpTbHVtYmVyaW5nIFRlcnJvcjtkcml2ZV9kaXI6Ok5pZ2h0IFRlcnJvcnMgQmVsdDtkcml2ZV9kaXI6Ok5pZ2h0IFRlcnJvcnMgSGF0O2RyaXZlX2Rpcjo6R2hhc3RseSBOb2N0dXJuZTtkcml2ZV9kaXI6OkZpcmVzdGFydGVyIEZ1ZWwgQ2FubmlzdGVyO2RyaXZlX2Rpcjo6QmVhc3RtYXN0ZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpDaGllZnRhaW4gb2YgdGhlIFByaW1hbCBUcmliZXMgQmVhc3Q7ZHJpdmVfZGlyOjpDaGllZnRhaW4gb2YgdGhlIFByaW1hbCBUcmliZXMgSGF3aztkcml2ZV9kaXI6OlRoaXJzdCBvZiBFenR6aG9rIEJ1bmRsZSBQcmVtO2RyaXZlX2Rpcjo6U2hvdWxkZXIgb2YgdGhlIEJsb29kZm9yZ2U7ZHJpdmVfZGlyOjpNYXcgb2YgRXp0emhvaztkcml2ZV9kaXI6OkJlbHQgb2YgdGhlIEJsb29kZm9yZ2U7ZHJpdmVfZGlyOjpDYXBlIG9mIHRoZSBCbG9vZGZvcmdlO2RyaXZlX2Rpcjo6QnJhY2VyIG9mIHRoZSBCbG9vZGZvcmdlO2RyaXZlX2Rpcjo6SGVhcnRsZXNzIEh1bnQgLSBBcm1vcjtkcml2ZV9kaXI6Okh1bnRlcnMgSG9hcmQgb2YgdGhlIENyaW1zb24gV2l0bmVzcztkcml2ZV9kaXI6OkhlYXJ0bGVzcyBIdW50IC0gSGVhZDtkcml2ZV9kaXI6OkhlYXJ0bGVzcyBIdW50IC0gT2ZmLUhhbmQ7ZHJpdmVfZGlyOjpUaW5lcyBvZiBUeWJhcmE7ZHJpdmVfZGlyOjpNYXJrIG9mIHRoZSBGaXJzdCBIdW50IEhhcnZlc3RlZDtkcml2ZV9kaXI6OkxvYWRlZCBQcm9zcGVjdHM7ZHJpdmVfZGlyOjpFbGl4aXIgb2YgRHJhZ29ucyBCcmVhdGggUHJlbTtkcml2ZV9kaXI6OkJlYXN0IG9mIHRoZSBDcmltc29uIFJpbmcgQnJhY2Vycztkcml2ZV9kaXI6OlBpc3RvbiBJbXBhbGVyO2RyaXZlX2Rpcjo6Qmxhc3Rmb3JnZSBFeGhhbGVyIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7ZHJpdmVfZGlyOjpCZWFzdCBvZiB0aGUgQ3JpbXNvbiBSaW5nIEFybW9yO2RyaXZlX2Rpcjo6QmVhc3Qgb2YgdGhlIENyaW1zb24gUmluZyBXZWFwb247ZHJpdmVfZGlyOjpCcm9vZG1vdGhlciBNZWdhUGFjaztkcml2ZV9kaXI6OkljZXBsYWluIFJhdmFnZXIgU2hpZWxkO2RyaXZlX2Rpcjo6SWNlcGxhaW4gUmF2YWdlciBIb3JuO2RyaXZlX2Rpcjo6QmVsdCBvZiBDb250ZXN0ZWQgRmF0ZTtkcml2ZV9kaXI6OkdvbGRlbiBJbmZlcm5hbCBDaGllZnRhaW47ZHJpdmVfZGlyOjpJY2VwbGFpbiBSYXZhZ2VyIEFybW9yO2RyaXZlX2Rpcjo6SWNlcGxhaW4gUmF2YWdlciBUYWlsO2RyaXZlX2Rpcjo6SW5mZXJuYWwgTWVuYWNlO2RyaXZlX2Rpcjo6RGlhYm9saWMgQXNwZWN0O2RyaXZlX2Rpcjo6VGFsb25zIG9mIHRoZSBFbmRsZXNzIFN0b3JtIE1vdW50O2RyaXZlX2Rpcjo6Q2hhb3MgRnVsY3J1bTtkcml2ZV9kaXI6OlRhbG9ucyBvZiB0aGUgRW5kbGVzcyBTdG9ybSBTaG91bGRlcjtkcml2ZV9kaXI6OkNoYW9zIEFyYml0ZXI7ZHJpdmVfZGlyOjpFbXBlcm9yIG9mIHRoZSBTdW47ZHJpdmVfZGlyOjpDbGlua3ogTWVnYVBhY2s7ZHJpdmVfZGlyOjpDbG9ja3dlcmsgTWVnYVBhY2s7ZHJpdmVfZGlyOjpSYWJpZCBXYXRjaGNvZztkcml2ZV9kaXI6OlByZWxhdGVzIEJyYWNlcnMgb2YgdGhlIFd5dmVybiBMZWdpb247ZHJpdmVfZGlyOjpZdWxzYXJpYSpzIEdsYWNpZXIgUHJlbTtkcml2ZV9kaXI6Oll1bHNhcmlhcyBNYW50bGUgUHJlbTtkcml2ZV9kaXI6OkljZSBCbG9zc29tO2RyaXZlX2Rpcjo6QnJhY2VycyBvZiBGb3Jsb3JuIFByZWNpcGljZTtkcml2ZV9kaXI6OkJvb2sgb2YgdGhlIFZpemllciBFeGlsZSBQcmVtO2RyaXZlX2Rpcjo6S2VlcGVyIG9mIE9sb3hpY2FtKnMgR2xhc3MgQmVsdDtkcml2ZV9kaXI6OktlZXBlciBvZiBPbG94aWNhbSpzIEdsYXNzIEhlYWQ7ZHJpdmVfZGlyOjpLZWVwZXIgb2YgT2xveGljYW0qcyBHbGFzcyBQYXVsZHJvbnM7ZHJpdmVfZGlyOjpEcmVzcyBvZiB0aGUgRmFlc2hhZGUgRmxvd2VyO2RyaXZlX2Rpcjo6V2luZ3Mgb2YgdGhlIEZhZXNoYWRlIEZsb3dlcjtkcml2ZV9kaXI6OlRoZSBTdW5icmVlemUgQmlydGhyaWdodDtkcml2ZV9kaXI6OkNyaW1zb24gSGVhcnRzIG9mIE1pc3J1bGU7ZHJpdmVfZGlyOjpEYXJrY2xhdyBFbWlzc2FyeSBBcm1zO2RyaXZlX2Rpcjo6Q3JpbXNvbiBHYXRlcyBvZiBOb3RobDtkcml2ZV9kaXI6OkRhcmtjbGF3IEVtaXNzYXJ5IERyZXNzO2RyaXZlX2Rpcjo6Tm90aGxpYyBCdXJkZW4gb2YgdGhlIENyaW1zb24gV2l0bmVzcyBQcmVtO2RyaXZlX2Rpcjo6RGFya2NsYXcgRW1pc3NhcnkgU3RhZmY7ZHJpdmVfZGlyOjpHaG9zdHMgb2YgRXRlcm5hbCBUZXN0YW1lbnQ7ZHJpdmVfZGlyOjpDb3ZlcnMgb2YgdGhlIE1lcnF1ZWVuO2RyaXZlX2Rpcjo6U2xlZXZlcyBvZiB0aGUgTWVycXVlZW47ZHJpdmVfZGlyOjpDcm93biBvZiB0aGUgTWVycXVlZW47ZHJpdmVfZGlyOjpEcmVzcyBvZiB0aGUgTWVycXVlZW47ZHJpdmVfZGlyOjpXcmFwcyBvZiB0aGUgU3Rvcm1jaGFyZ2UgRHJhZ29vbjtkcml2ZV9kaXI6OlJlc2lzdGl2ZSBQaW5mb2xkIFByZW07ZHJpdmVfZGlyOjpIYXQgb2YgdGhlIFN0b3JtY2hhcmdlIERyYWdvb247ZHJpdmVfZGlyOjpCZWFzdCBvZiB0aGUgRGVmZW5kZXIgb2YgUnVpbjtkcml2ZV9kaXI6Ok1hbnRsZSBvZiB0aGUgU3Rvcm1jaGFyZ2UgRHJhZ29vbjtkcml2ZV9kaXI6Ok9yYiBvZiBEZWxpdmVyYW5jZTtkcml2ZV9kaXI6OkRvb20gSW1tb3J0YWxzIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6U2NvcmNoZWQgQW1iZXIgQnJhY2VyO2RyaXZlX2Rpcjo6U2NvcmNoZWQgQW1iZXIgQmVsdDtkcml2ZV9kaXI6OlNjb3JjaGVkIEFtYmVyIEhlbG07ZHJpdmVfZGlyOjpTY29yY2hlZCBBbWJlciBTaGllbGQ7ZHJpdmVfZGlyOjpLaW5kcmVkIG9mIHRoZSBJcm9uIERyYWdvbiBWIDMuMDtkcml2ZV9kaXI6OlNjb3JjaGVkIEFtYmVyIEFybW9yO2RyaXZlX2Rpcjo6U2NvcmNoZWQgQW1iZXIgU3dvcmQ7ZHJpdmVfZGlyOjpCcmFjZXJzIG9mIHRoZSBTYWNyZWQgSHVudDtkcml2ZV9kaXI6OlNpbGVudCBXYWtlIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7ZHJpdmVfZGlyOjpDcm93biBvZiB0aGUgU2FjcmVkIEh1bnQ7ZHJpdmVfZGlyOjpTa2lydCBvZiB0aGUgU2FjcmVkIEh1bnQ7ZHJpdmVfZGlyOjpRdWl2ZXIgb2YgdGhlIEtoYS1SZW4gRmFpdGhmdWw7ZHJpdmVfZGlyOjpTaG91bGRlcnMgb2YgdGhlIFNhY3JlZCBIdW50O2RyaXZlX2Rpcjo6UmVhcGVycyBXcmVhdGg7ZHJpdmVfZGlyOjpUdXJxdW9pc2UgR2lhbnQgR3VhcmQ7ZHJpdmVfZGlyOjpKYWRlIFJlY2tvbmluZyBQcmVtO2RyaXZlX2Rpcjo6TW9udW1lbnRzIG9mIHRoZSBOYXR1cmFsIERlbWl1cmdlO2RyaXZlX2Rpcjo6TWFjZSBvZiB0aGUgRmlzc3VyZWQgU291bDtkcml2ZV9kaXI6OkJlbGxvd3Mgb2YgQ3JlYXRpb247ZHJpdmVfZGlyOjpUdW5pYyBvZiB0aGUgV2FuZGVyaW5nIEZsYW1lO2RyaXZlX2Rpcjo6TWFzdGVyIG9mIHRoZSBTZWFyaW5nIFBhdGggSGVhZDtkcml2ZV9kaXI6OkNpbmRlciBTZW5zZWkgT2ZmIEhhbmQgV2VhcG9uO2RyaXZlX2Rpcjo6QXBvZ2VlIG9mIHRoZSBHdWFyZGlhbiBGbGFtZTtkcml2ZV9kaXI6OkNpbmRlciBTZW5zZWkgV2VhcG9uO2RyaXZlX2Rpcjo6TWFzdGVyIG9mIHRoZSBTZWFyaW5nIFBhdGggQXJtcztkcml2ZV9kaXI6OlNvbmdzIG9mIFN0YXJmYWxsIEdsZW4gLSBBcm1zO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgU291dGggU3Rhcjtkcml2ZV9kaXI6OkZsb3VyaXNoaW5nIExvZGVzdGFyIFByZW07ZHJpdmVfZGlyOjpWaXJnYXMgQXJjO2RyaXZlX2Rpcjo6QnJhY2VycyBvZiBBZW9ucyBQcmVtO2RyaXZlX2Rpcjo6Q2xhc3p1cmVtZSBJbmN1cnNpb24gQmVsdDtkcml2ZV9kaXI6OkZhY2VsZXNzIE1hZG5lc3M7ZHJpdmVfZGlyOjpKZXdlbCBvZiBBZW9ucyBQcmVtO2RyaXZlX2Rpcjo6TWFjZSBvZiBBZW9ucyBQcmVtO2RyaXZlX2Rpcjo6SGVyYWxkIG9mIHRoZSBFbWJlciBFeWUgLSBBcm1vcjtkcml2ZV9kaXI6OlJlbW5hbnRzIG9mIEFzY2Vuc2lvbjtkcml2ZV9kaXI6OkZvcnR1bmUgb2YgdGhlIEZpdmUgSG91c2VzO2RyaXZlX2Rpcjo6SGVyYWxkIG9mIHRoZSBFbWJlciBFeWUgLSBCZWx0O2RyaXZlX2Rpcjo6UHJvcGVsbGVycyBvZiB0aGUgVmVzcGlkdW4gSHVudGVyLUtpbGxlcjtkcml2ZV9kaXI6OkhlYWQgb2YgdGhlIFZlc3BpZHVuIEh1bnRlci1LaWxsZXI7ZHJpdmVfZGlyOjpDb25lIG9mIHRoZSBWZXNwaWR1biBIdW50ZXItS2lsbGVyO2RyaXZlX2Rpcjo6UGF5bG9hZCBvZiB0aGUgVmVzcGlkdW4gSHVudGVyLUtpbGxlcjtkcml2ZV9kaXI6OkdvbGRlbiBBdG9taWMgUmF5IFRocnVzdGVycyBQcmVtO2RyaXZlX2Rpcjo6SHVza2FyIE1lZ2FQYWNrIE5FVztkcml2ZV9kaXI6OkltbW9ydGFsIEludm9rZXIgS2lkO2RyaXZlX2Rpcjo6QmVuZXZvbGVudCBDb21wYW5pb24gUHJlbTtkcml2ZV9kaXI6Okpha2lybyBJbW1vcnRhbHMgSGVhZHM7ZHJpdmVfZGlyOjpKYWtpcm8gSW1tb3J0YWwgV2luZ3M7ZHJpdmVfZGlyOjpUaGUgS2luZyBPZiBUaGlldmVzIEJlbHQ7ZHJpdmVfZGlyOjpUaGUgS2luZyBPZiBUaGlldmVzIEhlYWQ7ZHJpdmVfZGlyOjpXaW5ncyBvZiBEYXlicmVhaztkcml2ZV9kaXI6OlByb21pbmVuY2U7ZHJpdmVfZGlyOjpLdW5ra2EgSW1tb3J0YWxzIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6TGVnaW9uIENvbW1hbmRlciBNb2RNYWtlciBNZWdhUGFjaztkcml2ZV9kaXI6OlRodW5kZXIgR3JpZmZpbjtkcml2ZV9kaXI6OlRvcm1lbnRlZCBDcm93bjtkcml2ZV9kaXI6OlRvcm1lbnRlZCBTdGFmZjtkcml2ZV9kaXI6OkdsYXJlIG9mIHRoZSBUeXJhbnQ7ZHJpdmVfZGlyOjpUb21lIG9mIEZvcmJpZGRlbiBLbm93bGVkZ2U7ZHJpdmVfZGlyOjpCZWx0IG9mIFZpbGUgQ29udm9jYXRpb247ZHJpdmVfZGlyOjpMaWNoIEltbW9ydGFsIEhlYWQgUGVydmVyc2lvbnMgb2YgdGhlIEJsb29kd2hvcmw7ZHJpdmVfZGlyOjpTaGVhcmluZyBEZXBvc2l0aW9uO2RyaXZlX2Rpcjo6R29sZGVuIERhcmsgTWF3IEluaGliaXRvIGFuZCBHb2xkZW4gUHJvZmFuZSBVbmlvbiBhbmQgR29sZGVuIERyZWFkIFJlcXVpc2l0aW9uIExpZmVzdGVhbGVyIEltbW9ydGFscyBNZWdhcGFjaztkcml2ZV9kaXI6Okdsb3J5IG9mIHRoZSBFbGRlcmZsYW1lIC0gQXJtcztkcml2ZV9kaXI6Old5cm13cm91Z2h0IEZsYXJlO2RyaXZlX2Rpcjo6U291bCBvZiB0aGUgU2xheWVyIFByZW07ZHJpdmVfZGlyOjpEaXNjaXBsZSBvZiB0aGUgV3lybXdyb3VnaHQgRmxhbWU7ZHJpdmVfZGlyOjpDdXJzZSBvZiB0aGUgTWFsaWduYW50IENvcnJ1cHRpb24gU2V0O2RyaXZlX2Rpcjo6RmluIEtpbmdzIENoYXJtIG9mIEVtaW5lbnQgUmV2aXZhbCBFeGNlcHRpb25hbDtkcml2ZV9kaXI6Ok11bGN0YW50IFBhbGwgb2YgdGhlIENyaW1zb24gV2l0bmVzcztkcml2ZV9kaXI6Okhvcm5zIG9mIHRoZSBCZXRyYXllcjtkcml2ZV9kaXI6OkhlbGwtU3BhciBBbmF0aGVtYSBPYnNpZGlhbiBCbGlnaHQ7ZHJpdmVfZGlyOjpMb25lIERydWlkIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6SGVsbSBvZiB0aGUgRGFyayBNb29uIFN0YWxrZXI7ZHJpdmVfZGlyOjpNb3VudCBvZiB0aGUgV2luZ2VkIFNlbnRpbmVsO2RyaXZlX2Rpcjo6TW9vbmZhbGwgUHJlbTtkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBXaW5nZWQgU2VudGluZWw7ZHJpdmVfZGlyOjpUd2lsaWdodCBTY2hpc207ZHJpdmVfZGlyOjpMeWNhbiBLaXNpbGV2IE1vZE1ha2VyIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6QnJhY2VyIG9mIHRoZSBTcGlyYWwgQm9yZTtkcml2ZV9kaXI6OkJlbHQgb2YgT3JuYXRlIENydWVsdHk7ZHJpdmVfZGlyOjpFeWVzIG9mIEFyZGVub2s7ZHJpdmVfZGlyOjpIb3JuIG9mIHRoZSBTcGlyYWwgQm9yZTtkcml2ZV9kaXI6OlNob2NrIG9mIHRoZSBBbnZpbCBQcmVtO2RyaXZlX2Rpcjo6R29kKnMgTWVyY3k7ZHJpdmVfZGlyOjpGb3Jzd29ybiBMZWdhY3kgLSBBcm1vcjtkcml2ZV9kaXI6OkZvcnN3b3JuIExlZ2FjeSAtIExlZ3M7ZHJpdmVfZGlyOjpNZWR1c2EgTWVnYVBhY2sgTkVXO2RyaXZlX2Rpcjo6UGl0bWQ5519c2UgRnJhdGVybml0eSBCcmFjZXI7ZHJpdmVfZGlyOjpDb2xvc3NhbCBDcnlzdGFsIENob3J1cyBQcmVtO2RyaXZlX2Rpcjo6UGl0bWQ5519c2UgRnJhdGVybml0eSBHb2dnbGVzO2RyaXZlX2Rpcjo6UGl0bWQ5519c2UgRnJhdGVybml0eSBQYXVsZHJvbjtkcml2ZV9kaXI6OlBpdG1vdXNlIEZyYXRlcm5pdHkgVGFpbDtkcml2ZV9kaXI6OkJsYWRlIG9mIHRoZSBGcmFjdHVyZWQgT3JkZXI7ZHJpdmVfZGlyOjpQdWxzYXIgUmVtbmFudCBQcmVtO2RyaXZlX2Rpcjo6QXhpYSBvZiBNZXRpcmE7ZHJpdmVfZGlyOjpTcGlyaXQgb2YgdGhlIFNhY3JlZCBHcm92ZSAtIEFybXM7ZHJpdmVfZGlyOjpTcGlyaXQgb2YgdGhlIFNhY3JlZCBHcm92ZSAtIEJhY2s7ZHJpdmVfZGlyOjpTcGlyaXQgb2YgdGhlIFNhY3JlZCBHcm92ZSAtIFF1aXZlcjtkcml2ZV9kaXI6OlNwaXJpdCBvZiB0aGUgU2FjcmVkIEdyb3ZlIC0gU2hvdWxkZXI7ZHJpdmVfZGlyOjpCbGFkZXMgb2YgUHJpc21hdGljIEdyYWNlO2RyaXZlX2Rpcjo6VGhlIE9yZGVyIG9mIEN5cHJpbjtkcml2ZV9kaXI6OkNoaWxkcmVuIG9mIFZlcm9kaWNpYTtkcml2ZV9kaXI6OlNpZ25zIG9mIHRoZSBBbGxmYXRoZXIgLSBBcm1zO2RyaXZlX2Rpcjo6TW9uYXJjaCBvZiB0aGUgU2FwcGhpcmUgR2xlbjtkcml2ZV9kaXI6OlNpZ25zIG9mIHRoZSBBbGxmYXRoZXIgLSBIZWFkO2RyaXZlX2Rpcjo6U2lnbnMgb2YgdGhlIEFsbGZhdGhlciAtIE5lY2s7ZHJpdmVfZGlyOjpNYW50bGUgb2YgdGhlIFRydWViYXJrIEFkaGVyZW50O2RyaXZlX2Rpcjo6U3VmZmVyd29vZCBTYXBsaW5nO2RyaXZlX2Rpcjo6U3VsbGVuIEhhcnZlc3Q7ZHJpdmVfZGlyOjpTdWxsZW4gSG9sbG93IFByZW07ZHJpdmVfZGlyOjpTdWxsZW4gUmFtcGFydDtkcml2ZV9kaXI6OkZvd2wgT21lbiBIZWFkO2RyaXZlX2Rpcjo6Rm93bCBPbWVuIEJlYXJkO2RyaXZlX2Rpcjo6TmlnaHQgU3RhbGtlciBNZWdhUGFjaztkcml2ZV9kaXI6Ok9ncmUgTWFnaSBJbW1vcnRhbHMgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6QWRvcmluZyBXaW5nZmFsbCBQcmVtO2RyaXZlX2Rpcjo6RmV0dGVycyBvZiBPbW5pc2NpZW5jZTtkcml2ZV9kaXI6OlBhcmFnb25zIFJlYnVrZTtkcml2ZV9kaXI6OkZsaWdodCBvZiB0aGUgVW5keWluZyBMaWdodDtkcml2ZV9kaXI6OkdhdW50bGV0cyBvZiBTYWNyZWQgTGlnaHQ7ZHJpdmVfZGlyOjpEcmVzcyBvZiB0aGUgSGllcm9waGFudDtkcml2ZV9kaXI6OkJhY2sgb2YgdGhlIEhpZXJvcGhhbnQ7ZHJpdmVfZGlyOjpTYWdhcyBvZiB0aGUgQ3ltdXJyaW4gU2FnZTtkcml2ZV9kaXI6OkFsbHV2aW9uIFByb3BoZWN5IFYgMi4wO2RyaXZlX2Rpcjo6T3V0d29ybGQgRGV2b3V2ZXIgTWVnYVBhY2s7ZHJpdmVfZGlyOjpUYWxlcyBvZiB0aGUgV2luZHdhcmQgUm9ndWU7ZHJpdmVfZGlyOjpNYXNrIG9mIHRoZSBDb25maWRhbnQ7ZHJpdmVfZGlyOjpNYW5pZm9sZCBQYXJhZG94IFBBIEFyY2FuYSBTdHlsZSAzO2RyaXZlX2Rpcjo6UGhhbnRvbSBDb25jb3JkIFByZW07ZHJpdmVfZGlyOjpDb25jb3JkIERvbWluaW9uO2RyaXZlX2Rpcjo6Q29uY29yZCBSZXZlcnNpb24gVVA7ZHJpdmVfZGlyOjpCcmFjZXJzIG9mIHRoZSBSZWQgU2FuZHM7ZHJpdmVfZGlyOjpCZWx0IG9mIHRoZSBSZWQgU2FuZHM7ZHJpdmVfZGlyOjpTb2xhciBGb3JnZSBQcmVtO2RyaXZlX2Rpcjo6U29sYXIgR3lyZTtkcml2ZV9kaXI6OkJsYXplIG9mIE9ibGl2aW9uIFN1cGVybm92YTtkcml2ZV9kaXI6OlJlbWluaXNjZW5jZSBvZiBEcmVhbXM7ZHJpdmVfZGlyOjpQdWduYSBJbW1vcnRhbHMgTWVnYVBhY2s7ZHJpdmVfZGlyOjpHb2xkZW4gRXllIG9mIEl4Knl4YTtkcml2ZV9kaXI6OkJyYWNlcnMgb2YgdGhlIEd1YXJkaWFuIENvbnN0cnVjdCBCZXN0b3dlZDtkcml2ZV9kaXI6OkNoZXN0cGxhdGUgb2YgdGhlIEd1YXJkaWFuIENvbnN0cnVjdCBCZXN0b3dlZDtkcml2ZV9kaXI6OlNraXJ0IG9mIHRoZSBHdWFyZGlhbiBDb25zdHJ1Y3QgQmVzdG93ZWQ7ZHJpdmVfZGlyOjpHb2xkZW4gU2V2ZXJpbmcgQ3Jlc3QgUHJlbTtkcml2ZV9kaXI6OlNldmVyaW5nIExhc2ggUHJlbTtkcml2ZV9kaXI6Okh1bmdlciBvZiB0aGUgSG93bGluZyBXaWxkcyBBcm1zO2RyaXZlX2Rpcjo6R29sZGVuIEVkaWN0IG9mIFNoYWRvd3M7ZHJpdmVfZGlyOjpIdW5nZXIgb2YgdGhlIEhvd2xpbmcgV2lsZHMgT2ZmLUhhbmQgV2VhcG9uO2RyaXZlX2Rpcjo6R29sZGVuIFNoYWRvdyBNYXNxdWVyYWRlIFByZW07ZHJpdmVfZGlyOjpTbW9rZSBCb21iIG9mIE1vbnN0cm91cyBSZXByaXNhbDtkcml2ZV9kaXI6Okh1bmdlciBvZiB0aGUgSG93bGluZyBXaWxkcyBXZWFwb247ZHJpdmVfZGlyOjpIYXQgb2YgRmFudG9jY2luaXMgRGlsZW1tYTtkcml2ZV9kaXI6OlRoZSBCYXJyZW4gQ3Jvd24gUHJlbTtkcml2ZV9kaXI6OlRhaWwgb2YgdGhlIFNjb3VyaW5nIER1bmVzO2RyaXZlX2Rpcjo6VGhlIEJhcnJlbiBWZWN0b3I7ZHJpdmVfZGlyOjpTaG91bGRlcmJsYWRlcyBvZiB0aGUgUmVkIFNhbmQgV2Fycmlvcjtkcml2ZV9kaXI6OkxlZ3Mgb2YgdGhlIFJlZCBTYW5kIFdhcnJpb3I7ZHJpdmVfZGlyOjpDcm93biBvZiBDYWxhcGhhcyBBcm1vcjtkcml2ZV9kaXI6OkdvbGRlbiBNYW50bGUgb2YgR3JpbSBGYWNhZGU7ZHJpdmVfZGlyOjpDcm93biBvZiBDYWxhcGhhcyBUYWlsO2RyaXZlX2Rpcjo6Q3Jvd24gb2YgQ2FsYXBoYXMgQmVsdDtkcml2ZV9kaXI6OlNGIEFyY2FuYSBNZWdhcGFjaztkcml2ZV9kaXI6OkFybXMgb2YgdGhlIEx1Y2VudCBDYW5vcHk7ZHJpdmVfZGlyOjpIYXVsIG9mIHRoZSBMdWNlbnQgQ2Fub3B5O2RyaXZlX2Rpcjo6TGFzaCBvZiB0aGUgTGl6YXJkIEtpbjtkcml2ZV9kaXI6OkNyaW1zb24gQ2Vuc2VyIG9mIEdsaXNzIFVQO2RyaXZlX2Rpcjo6U3dhbXAgU2hhbWFuIFdhcmRzO2RyaXZlX2Rpcjo6R29sZGVuIExhbWIgdG8gdGhlIFNsYXVnaHRlciBQcmVtO2RyaXZlX2Rpcjo6U2lsZW50IFNsYXllciAtIEVxdWlwbWVudDtkcml2ZV9kaXI6OlNpbGVudCBTbGF5ZXIgLSBCZWx0O2RyaXZlX2Rpcjo6QXNwZWN0IG9mIE9zY2lsbGE7ZHJpdmVfZGlyOjpTaWxlbnQgU2xheWVyIC0gU2hvdWxkZXI7ZHJpdmVfZGlyOjpHbGFpdmUgb2YgT3NjaWxsYTtkcml2ZV9kaXI6OkRhbWFyYWthbiBNdXp6bGU7ZHJpdmVfZGlyOjpTZWNyZXRzIG9mIHRoZSBDZWxlc3RpYWwgU2hvdWxkZXI7ZHJpdmVfZGlyOjpTZWNyZXRzIG9mIHRoZSBDZWxlc3RpYWwgSGVhZDtkcml2ZV9kaXI6OlNlY3JldHMgb2YgdGhlIENlbGVzdGlhbCBCZWx0O2RyaXZlX2Rpcjo6R29sZGVuIEZsaWdodCBvZiBFcGlwaGFueTtkcml2ZV9kaXI6OkdvbGRlbiBFbXB5cmVhbiBQcmVtO2RyaXZlX2Rpcjo6U2VjcmV0cyBvZiB0aGUgQ2VsZXN0aWFsIEFybXM7ZHJpdmVfZGlyOjpHb2xkZW4gSHlkcmFrYW4gTGF0Y2g7ZHJpdmVfZGlyOjpTaGFkb3cgaW4gdGhlIERlZXAgQXJtb3I7ZHJpdmVfZGlyOjpTZWEgUmFrZXMgQnJpZGxlO2RyaXZlX2Rpcjo6U2hhZG93IGluIHRoZSBEZWVwIEJhY2s7ZHJpdmVfZGlyOjpTaGFkb3cgaW4gdGhlIERlZXAgQnJhY2Vycztkcml2ZV9kaXI6OkRlc2VydCBCdXJuIFNhZGRsZTtkcml2ZV9kaXI6OkRlc2VydCBCdXJuIE91dGZpdDtkcml2ZV9kaXI6OkRlc2VydCBCdXJuIENhcDtkcml2ZV9kaXI6OkRlc2VydCBCdXJuIE1vcnR5IEltbW9ydGFsO2RyaXZlX2Rpcjo6RGVzZXJ0IEJ1cm4gQ3Jvc3Nib3c7ZHJpdmVfZGlyOjpTbmlwZXIgSW1tb3J0YWwgV2VhcG9uIG9mIHRoZSBBcmRhbGFuIEludGVyZGljdG9yO2RyaXZlX2Rpcjo6QmxhY2tzYWlsIENhbm5vbmVlciBTaG91bGRlcjtkcml2ZV9kaXI6OlRvcCBIYXQgb2YgdGhlIE9jY3VsdGlzdHMgUHVyc3VpdDtkcml2ZV9kaXI6OkdvbGRlbiBGdWxsLUJvcmUgQm9uYW56YTtkcml2ZV9kaXI6OkJyYWNlcnMgb2YgdGhlIFNpbHZlciBGb3g7ZHJpdmVfZGlyOjpTcGlyaXQgQnJlYWtlciBNZWdhUGFjaztkcml2ZV9kaXI6OlN0b3JtIFNwaXJpdCBNZWdhUGFjaztkcml2ZV9kaXI6OlN2ZW4gSW1tb3J0YWxzIE1lZ2FQYWNrIFVQO2RyaXZlX2Rpcjo6U3dpbmUgb2YgdGhlIFN1bmtlbiBHYWxsZXkgUHJlbTtkcml2ZV9kaXI6OlN0ZXdhcmQgb2YgdGhlIEZvcmJpZGRlbiBDaGFtYmVyIEhlYWQ7ZHJpdmVfZGlyOjpNYW50bGUgb2YgdGhlIFdoaXNwZXJlZCBCb25kO2RyaXZlX2Rpcjo6Rm9jYWwgUmVzb25hbmNlIFYgMy4wO2RyaXZlX2Rpcjo6R29sZCBDb2xvciBmb3IgVEI7ZHJpdmVfZGlyOjpTY3l0aGVzIG9mIFNvcnJvdztkcml2ZV9kaXI6OkNoYXNtIG9mIHRoZSBCcm9rZW4gQ29kZSBBcm1vcjtkcml2ZV9kaXI6OkNoYXNtIG9mIHRoZSBCcm9rZW4gQ29kZSBIZWxtO2RyaXZlX2Rpcjo6RGVtb24gRm9ybSBvZiB0aGUgRm91bGZlbGwgQ29ycnVwdG9yIFVQO2RyaXZlX2Rpcjo6Q29udHJvbGxlZCBCdXJuO2RyaXZlX2Rpcjo6Q2xlYXJjdXQgQ2F2YWxpZXIgU2hvdWxkZXJzO2RyaXZlX2Rpcjo6R29sZGVuIFJlY3RpZmllcjtkcml2ZV9kaXI6OkhlbG0gb2YgdGhlIFNpZWdlIEVuZ2luZTtkcml2ZV9kaXI6Okh1bGwgb2YgdGhlIFNpZWdlIEVuZ2luZTtkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBTaWVnZSBFbmdpbmU7ZHJpdmVfZGlyOjpBcmNhbmljIFJlc29uYW5jZSBCZWFtO2RyaXZlX2Rpcjo6Um9sbGVybWF3c3RlciBhbmQgTWVjaGEgQm9vdHMgb2YgVHJhdmVsIE1rIElJSTtkcml2ZV9kaXI6OlN1Ym1lcmdlZCBIYXphcmQgUHJvcGVsbGVyO2RyaXZlX2Rpcjo6U3VibWVyZ2VkIEhhemFyZCBMYXVuY2hlcjtkcml2ZV9kaXI6OlN1Ym1lcmdlZCBIYXphcmQgSHVsbDtkcml2ZV9kaXI6OlRyZWFudCBJbW1vcnRhbCBIZWFkIFN0dW50d29vZCBTeW1iaW9udDtkcml2ZV9kaXI6OlN0b2NrIG9mIHRoZSBTcGxpbnRlcmluZyBBd2U7ZHJpdmVfZGlyOjpBcm1zIG9mIHRoZSBTcGxpbnRlcmluZyBBd2U7ZHJpdmVfZGlyOjpTdHVudHdvb2QgU2FuY3R1YXJ5O2RyaXZlX2Rpcjo6TGFyZ2UgRnJvc3Rtb290O2RyaXZlX2Rpcjo6TWVkaXVtIEZyb3N0bW9vdDtkcml2ZV9kaXI6OlNtYWxsIEZyb3N0bW9vdDtkcml2ZV9kaXI6OlRpbnkgRnJvc3Rtb290O2RyaXZlX2Rpcjo6U3dvcmQgb2YgdGhlIENvbG9zc3VzIFByZW07ZHJpdmVfZGlyOjpBcm1vciBvZiB0aGUgU2F2YWdlIE1vbmdlcjtkcml2ZV9kaXI6OkhlbG0gb2YgdGhlIFNhdmFnZSBNb25nZXI7ZHJpdmVfZGlyOjpTY2FsZSBvZiBCaXR0ZXIgU3BvaWwgSW1tb3J0YWwgVVA7ZHJpdmVfZGlyOjpCaXR0ZXIgTGluZWFnZSBJbW1vcnRhbCBBeGVzO2RyaXZlX2Rpcjo6RXllIG9mIHRoZSBXZWF0aGVyZWQgU3Rvcm0gU2lnaWw7ZHJpdmVfZGlyOjpHb2xkZW4gUGlzY2VhbiBQdWx2ZXJpemVyO2RyaXZlX2Rpcjo6V2hpc2t5IHRoZSBTdG91dCBBcnRpZmFjdCBQcmVtO2RyaXZlX2Rpcjo6SGVsbSBvZiB0aGUgR3VhcmRlZCBXb3JkO2RyaXZlX2Rpcjo6VHVza3Mgb2YgdGhlIEd1YXJkZWQgV29yZDtkcml2ZV9kaXI6OkFybW9yIG9mIHRoZSBHdWFyZGVkIFdvcmQ7ZHJpdmVfZGlyOjpLbmlmZSBvZiBEaXN0aW5ndWlzaGVkIEV4cGVkaXRpb25hcnk7ZHJpdmVfZGlyOjpEZW1vbmZvcmdlZCBTZXQ7ZHJpdmVfZGlyOjpFbWVyYWxkIENvbnF1ZXN0O2RyaXZlX2Rpcjo6QXJtb3Igb2YgR3JpbSBSZWZvcm1hdGlvbjtkcml2ZV9kaXI6OlBhbGUgQXVndXIgUHJlbTtkcml2ZV9kaXI6OlRoZSBIYWxsb3dzIFdpdGhpbjtkcml2ZV9kaXI6OlRoZSBIYWxsb3dzIFdpdGhpbiBUb21ic3RvbmU7ZHJpdmVfZGlyOjpDb3Jwc2UgSGl2ZSBvZiBHcmltIFJlZm9ybWF0aW9uO2RyaXZlX2Rpcjo6VXJzYSBJbW1vcnRhbHMgTWVnYVBhY2s7ZHJpdmVfZGlyOjpIZWxtIG9mIEVjaG9lcztkcml2ZV9kaXI6OkxlZ3Mgb2YgdGhlIEZhbGxlbiBQcmluY2Vzcztkcml2ZV9kaXI6OkNyaW1zb24gTWQ5519cm5mdWwgUmV2ZXJpZTtkcml2ZV9kaXI6OlNjcmVlYXVrcyBUYWxvbiBQcmVtO2RyaXZlX2Rpcjo6Q2hvbXBlciBXYXJkO2RyaXZlX2Rpcjo6U3BpdHRlcnMgb2YgdGhlIFZpcnVsZW50IEtyYWl0O2RyaXZlX2Rpcjo6Q3VsdCBvZiBBa3Rvaztkcml2ZV9kaXI6OldpbmdzIG9mIHRoZSBGYXRhbCBCbG9vbTtkcml2ZV9kaXI6OlRhaWwgb2YgdGhlIEZlcm9jaWQ5519cyBUb3hpY2FudDtkcml2ZV9kaXI6OlZpc2FnZSBNZWdhUGFjaztkcml2ZV9kaXI6OkJlaG9sZGVuIG9mIHRoZSBCYW5pc2hlZCBPbmVzIC0gV2VhcG9uO2RyaXZlX2Rpcjo6QmVob2xkZW4gb2YgdGhlIEJhbmlzaGVkIE9uZXMgLSBTaG91bGRlcjtkcml2ZV9kaXI6OlVtYnJhbCBHbHlwaDtkcml2ZV9kaXI6OldhcmRlbiBvZiB0aGUgSGVsbGJvcm47ZHJpdmVfZGlyOjpCZWx0IG9mIHRoZSBTcGl0ZWZ1bCBEamlubjtkcml2ZV9kaXI6OkJlaG9sZGVuIG9mIHRoZSBCYW5pc2hlZCBPbmVzIC0gQmFjaztkcml2ZV9kaXI6OkJlaG9sZGVuIG9mIHRoZSBCYW5pc2hlZCBPbmVzIC0gQXJtcztkcml2ZV9kaXI6OkJlaG9sZGVuIG9mIHRoZSBCYW5pc2hlZCBPbmVzIC0gR29sZW07ZHJpdmVfZGlyOjpEZXZpbCBSaXBwZXI7ZHJpdmVfZGlyOjpDcmltc29uIEN5cnJpZGFlO2RyaXZlX2Rpcjo6Q3JpbXNvbiBQaXF1ZSBQcmVtO2RyaXZlX2Rpcjo6U2tpdHRlcmluZyBEZXNvbGF0aW9uIFByZW07ZHJpdmVfZGlyOjpGcm9zdGhlYXJ0O2RyaXZlX2Rpcjo6Qm9ua2VycyBvZiBBd2FsZWI7ZHJpdmVfZGlyOjpNYXNxdWUgb2YgQXdhbGViO2RyaXZlX2Rpcjo6UGFkZGFwb24gb2YgUmliYml0YXIgViA0LjA7ZHJpdmVfZGlyOjpBd2FsZWJzIFRydW5kbGV3ZWVkO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgRm9yZXRlbGxlcipzIE9hdGg7ZHJpdmVfZGlyOjpSYXR0bGViaXRlO2RyaXZlX2Rpcjo6V3JhaXRoIEtpbmcgQXJjYW5hIE1lZ2FQYWNrO2RyaXZlX2Rpcjo6UGF1bGRyb24gb2YgdGhlIERyZWFkYm9ybiBSZWdlbnQ7ZHJpdmVfZGlyOjpUZW1wZXN0IEhlbG0gb2YgdGhlIFRodW5kZXJnb2QgKyBSaWdodGVvdXMgVGh1bmRlcmJvbHQ7ZHJpdmVfZGlyOjpEZXNlcnQgU2FuZHMgQmFieSBSb3NoYW47ZHJpdmVfZGlyOjpUaGUgSW50ZXJuYXRpb25hbCAyMDE2IEN1cnNvciBQYWNrO2RyaXZlX2Rpcjo6TmVva2luIEZhaWVyaWUgV2FyZDtkcml2ZV9kaXI6OkRlY2xhcmF0aW9uIG9mIHRoZSBEaXZpbmUgTGlnaHQgUmFkaWFudCBUb3dlcnM7ZHJpdmVfZGlyOjpEZWNsYXJhdGlvbiBvZiB0aGUgRGl2aW5lIFNoYWRvdyBEaXJlIFRvd2Vycztkcml2ZV9kaXI6OlJlcHRpbGlhbiBSZWZ1Z2UgUmFkaWFudCBDcmVlcHM7ZHJpdmVfZGlyOjpSZXB0aWxpYW4gUmVmdWdlIERpcmUgQ3JlZXBzO2RyaXZlX2Rpcjo6UmljayBhbmQgTW9ydHkgQW5ub3VuY2VyO2RyaXZlX2Rpcjo6UmljayBhbmQgTW9ydHkgTWVnYS1LaWxsO2RyaXZlX2Rpcjo6QXp1cmUgQ29uc3RlbGxhdGlvbiBIVUQ7ZHJpdmVfZGlyOjpTcGFuIG9mIFNvcnJvdztkcml2ZV9kaXI6OlN0ZXdhcmQgb2YgdGhlIEZvcmJpZGRlbiBDaGFtYmVyIEFybW9yO2RyaXZlX2Rpcjo6QmVhcmluZyBvZiB0aGUgS2luZyBSZXN0b3JlZCBEaXN0aW5ndWlzaGVkO2RyaXZlX2Rpcjo6UHJvZ2VuaXRvcnMgQmFuZTtkcml2ZV9kaXI6OkJsb3Nzb20gb2YgdGhlIE1lcnJ5IFdhbmRlcmVyO2RyaXZlX2Rpcjo6TWVycnkgV2FuZGVyZXIqcyBCcnVzaCBQcmVtO2RyaXZlX2Rpcjo6VGVtcGVzdCBSZXZlbGF0aW9uO2RyaXZlX2Rpcjo6TWFuZSBvZiB0aGUgQ3J5c3RhbCBEcmlmdDtkcml2ZV9kaXI6OkljZWZsaWdodCBFZGlmaWNlO2RyaXZlX2Rpcjo6TWluZXMgb2YgdGhlIFByZXNzdXJlIFJlZ3VsYXRvcjtkcml2ZV9kaXI6OkVuaWdtYSBNZWdhUGFjaztkcml2ZV9kaXI6OkdvbGRlbiBPcm5pdGhvbWFuY2VyIE1hbnRsZTtkcml2ZV9kaXI6OkNydXggb2YgUGVycGxleCBJbW1vcnRhbCBTdHlsZTtkcml2ZV9kaXI6OkdvbGRlbiBTdGFmZiBvZiBQZXJwbGV4IFByZW07ZHJpdmVfZGlyOjpQcmVsYXRlcyBDbG9hayBvZiB0aGUgV3l2ZXJuIExlZ2lvbjtkcml2ZV9kaXI6Ok1hc2sgb2YgdGhlIERlbW9uIFRyaWNrc3Rlcjtkcml2ZV9kaXI6OlBhdWxkcm9ucyBvZiB0aGUgRGVtb24gVHJpY2tzdGVyO2RyaXZlX2Rpcjo6QXJtb3Igb2YgdGhlIERlbW9uIFRyaWNrc3RlciBSZWQ7ZHJpdmVfZGlyOjpTdGFmZiBvZiB0aGUgRGVtb24gVHJpY2tzdGVyO2RyaXZlX2Rpcjo6Q3Jvd24gb2YgUHJpc21hdGljIEdyYWNlO2RyaXZlX2Rpcjo6QXJtb3Igb2YgUHJpc21hdGljIEdyYWNlO2RyaXZlX2Rpcjo6VGlkZWh1bnRlciBNZWdhUGFjaztkcml2ZV9kaXI6OkhvcnJvciBmcm9tIHRoZSBEZWVwIEFybXM7ZHJpdmVfZGlyOjpIb3Jyb3IgZnJvbSB0aGUgRGVlcCBCZWx0O2RyaXZlX2Rpcjo6VGVycmFpbiAtIFNhbmN0dW1zIG9mIHRoZSBEaXZpbmU7ZHJpdmVfZGlyOjpTbGFyZGFyIE1lZ2FQYWNrIHNldDtkcml2ZV9kaXI6Ok55eCBBc3Nhc3NpbiBNZWdhUGFjayBuZXc7ZHJpdmVfZGlyOjpHb3RoaWMgV2hpc3BlciBDYXBlO2RyaXZlX2Rpcjo6R290aGljIFdoaXNwZXIgQmVsdDtkcml2ZV9kaXI6OkNvZGljaWwgb2YgdGhlIFZlaWxlZCBPbmVzO2RyaXZlX2Rpcjo6QXZvd2FuY2Ugb2YgdGhlIFZlaWxlZCBPbmVzO2RyaXZlX2Rpcjo6RW5kbGVzcyBOaWdodCBDYXBlO2RyaXZlX2Rpcjo6SG9vZCBvZiB0aGUgRXZlcmJsYWNrO2RyaXZlX2Rpcjo6RW5kbGVzcyBOaWdodCBNb3VudDtkcml2ZV9kaXI6OlBhdWxkcm9ucyBvZiB0aGUgRXZlcmJsYWNrO2RyaXZlX2Rpcjo6QmxhZGUgb2YgdGhlIERlbW9uaWMgVmVzc2VsIFByZW07ZHJpdmVfZGlyOjpPcmlnaW5zIG9mIEZhaXRoIFByZW07ZHJpdmVfZGlyOjpCcmFjZXJzIGFuZCBTaG91bGRlcnMgb2YgdGhlIFN1cnZpdm9yO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgU3Vydml2b3I7ZHJpdmVfZGlyOjpIYWlyIG9mIHRoZSBTdXJ2aXZvcjtkcml2ZV9kaXI6Ok9mZmhhbmQgQmFzaGVyIG9mIE1hZ2UgU2t1bGxzO2RyaXZlX2Rpcjo6U2hvdWxkZXJzIG9mIHRoZSBTdXJ2aXZvcjtkcml2ZV9kaXI6OkJhc2hlciBvZiBNYWdlIFNrdWxscztkcml2ZV9kaXI6Ok1hc2sgb2YgTWV0aXJhO2RyaXZlX2Rpcjo6SGFyYm9yYmxvc3NvbTtkcml2ZV9kaXI6OkhpZGRlbiBWZWN0b3IgLSBBcm1vcjtkcml2ZV9kaXI6OkhpZGRlbiBWZWN0b3IgLSBCZWx0O2RyaXZlX2Rpcjo6SGlkZGVuIFZlY3RvciAtIEhhdDtkcml2ZV9kaXI6OkhpZGRlbiBWZWN0b3IgLSBCbGFkZTtkcml2ZV9kaXI6OkZvcnR1bmVzIFRvdXQgUHJlbTtkcml2ZV9kaXI6OkJyYWNlcnMgb2YgdGhlIEJsYWRlZm9ybSBBZXN0aGV0ZTtkcml2ZV9kaXI6OlNob3VsZGVycyBvZiB0aGUgQmxhZGVmb3JtIEFlc3RoZXRlO2RyaXZlX2Rpcjo6QmVsdCBvZiB0aGUgQmxhZGVmb3JtIEFlc3RoZXRlO2RyaXZlX2Rpcjo6Q3JpbXNvbiBFZGdlIG9mIHRoZSBMb3N0IE9yZGVyO2RyaXZlX2Rpcjo6SG9vZCBvZiB0aGUgQmxhZGVmb3JtIEFlc3RoZXRlO2RyaXZlX2Rpcjo6R29sZGVuIFNjYXZlbmdpbmcgR3V0dGxlc2x1Zztkcml2ZV9kaXI6Okluc2F0aWFibGUgQm9uZXNhdyBQcmVtO2RyaXZlX2Rpcjo6TGFyZ2UgVGFzc2VscyBvZiB0aGUgQmxhY2sgRGVhdGg7ZHJpdmVfZGlyOjpEZW5kaSBEb2xsO2RyaXZlX2Rpcjo6UGF1bGRyb24gUGVyY2g7ZHJpdmVfZGlyOjpXcmlzdCBTaGFja2xlcyBvZiB0aGUgQmxhY2sgRGVhdGg7ZHJpdmVfZGlyOjpEcmFnb25jbGF3IEhvb2s7ZHJpdmVfZGlyOjpNb3JwaGxpbmcgSW1tb3J0YWxzIE1lZ2FQYWNrIFVQO2RyaXZlX2Rpcjo6UXVlZW4gb2YgUGFpbiBBcmNhbmEgTWVnYVBhY2s7ZHJpdmVfZGlyOjpMYW50ZXJuIG9mIHRoZSBGYWVzaGFkZSBGbG93ZXI7ZHJpdmVfZGlyOjpQaGFudG9tIEFkdmVudCBVUDtkcml2ZV9kaXI6OlBoYW50b20gQWR2ZW50IEJlbHQgVVA7ZHJpdmVfZGlyOjpXaW5kcmFuZ2VyIEFyY2FuYSBzdHlsZSAxIChCbHVlIEJpcmQpICsgRnVsbCBXUiBpbW1vcnRhbDtkcml2ZV9kaXI6OlNvdWwgRGlmZnVzZXIgUHJlbTtkcml2ZV9kaXI6OlRyYW5zdmVyc2FudCBTb3VsO2RyaXZlX2Rpcjo6RXRpZW5uZSpzIFJldmVuZ2U7ZHJpdmVfZGlyOjpQbGFuZXRmYWxsIGFuZCBKdWRnZW1lbnQgb2YgdGhlIEZhbGxlbiBhbmQgQnJhY2VycyBvZiB0aGUgQ2F2ZXJuIEx1bWluYXIgQVJDQU5BIE1lZ2FQYWNrOyAxMjN8fHw=