bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogIDExMXx8fCAyMjI6OiAkMnkkMTAkTURjM1l6VXdORFkxWVdVellqa3lZdXB6ZzkwekdOdUd5eTZyMmFJTFU4dTZOd0Y1cmYyWEcgMjIyfHx8IDEyMzo6IEd1YXJkaWFucyBvZiB0aGUgTG9zdCBQYXRoIERpcmUgVG93ZXJzO0d1YXJkaWFucyBvZiB0aGUgTG9zdCBQYXRoIFJhZGlhbnQgVG93ZXJzO1J1YmljayBBcmNhbmEgRU5HIFZvaWNlO1N1aXQgb2YgdGhlIERhcmticmV3IEVuZm9yY2VyO1ByaXNvbmVycyBBbmNob3I7QXJtcyBvZiB0aGUgQm9pbGVycGxhdGUgQnJ1aXNlcjtFdGVybmFsIFJhZGlhbmNlIEJsYWRlcyBQcmVtO01vbHRlbiBDbGF3IFByZW07Q3J1Y2libGUgb2YgUmlsZTtNYW50bGUgb2YgdGhlIENpbmRlciBCYXJvbiBTdHlsZSAxO1Bpc3RvbiBJbXBhbGVyO01hbmlhcyBNYXNrIFByZW07Qm93IG9mIHRoZSBIb3dsaW5nIFdpbmQgViA0LjA7RnJvc3RnbGFkZSBGYW1pbGlhciBIYXQ7QXJtcyBvZiBaZWJ1bG9uO1JhcGllcnMgb2YgdGhlIEJ1cm5pbmcgR29kIFYgMy4xO0pld2VsIG9mIEFlb25zIFByZW07QnJhY2VycyBvZiBBZW9ucyBQcmVtO1RpbWVicmVha2VyIFByZW07Rmxhc2hwb2ludCBQcm9zZWx5dGUgLSBIZWFkO05vcnRoZXJuIEJsaWdodCBTcGlyaXRzO0RhcmsgQXJ0aXN0cnkgQ2FwZTtEYXJrIEFydGlzdHJ5IEJlbHQ7SGVhdmVuLVBpZXJjaW5nIFBhdWxkcm9ucztMZWdhY3kgb2YgdGhlIEZhbGxlbiBMZWdpb247VG9ybWVudGVkIFN0YWZmIGVmZmVjdDtHb2xkZW4gTW9vbmZhbGwgUHJlbTtUd2lsaWdodCBTY2hpc207QWJ5c3NhbCBIZWxsY2xhdztGaXJlIExvdHVzIEJlbHQ7Q29sb3NzYWwgQ3J5c3RhbCBDaG9ydXMgZWZmZWN0O0dvbGRlbiBNYXNrIG9mIE1ldGlyYTtBeGlhIG9mIE1ldGlyYTtQbGFndWUgQmFyb24gSGF0O0dvbGRlbiBTdWxsZW4gSG9sbG93IFYgMy4yO0dvbGRlbiBTaGFyZHMgb2YgRXhpbGU7RGlmZnVzYWwgTGFuY2U7Q2FuZHkgQ2F0IEJhY2s7SW5zYXRpYWJsZSBCb25lc2F3O0dvbGRlbiBTY2F2ZW5naW5nIEd1dHRsZXNsdWc7R3JhbmQgQWJzY2Vzc2lvbiBIb29rIEJ1bmRsZTtBZXRoZXItV2luZ3M7RW1pbmVuY2Ugb2YgUmlzdHVsIEtuaWZlIEF0dGFjaztCbG9vZGZlYXRoZXIgRmVhc3Q7SHVuZ2VyIG9mIHRoZSBIb3dsaW5nIFdpbGRzIEFybXM7SHVzaCBvZiBFdGVybmFsIE5pZ2h0O0dvbGRlbiBHcmFzcGluZyBCbHVkZ2VvbiBlZmZlY3Q7UGFsZSBFZGdlIFYgMi4wO1BoYW50b20gQWR2ZW50IEJlbHQgVVA7UGhhbnRvbSBBZHZlbnQgVVA7UGhhbnRvbSBBZHZlbnQgU2hvdWxkZXJzIFVQO1BoYW50b20gQWR2ZW50IFdlYXBvbiBVUDtHb2xkZW4gRnVsbC1Cb3JlIEJvbmFuemE7Q2Fubm9uIG9mIHRoZSBPY2N1bHRpc3RzIFB1cnN1aXQ7SXJvbiBTdXJnZSBWIDIuMjtTYXZhZ2UgTWV0dGxlO1Jvc2Ugb2YgdGhlIENvcnJpZGFuIE1hZXN0cm87VGhlIExpZ2h0bmluZyBPcmNoaWQgb2YgRW1pbmVudCBSZXZpdmFsO0NvbXBsZXRlIEdhcmIgb2YgdGhlIENvcnJpZGFuIE1hZXN0cm87Rm9jYWwgUmVzb25hbmNlIFYgMy4wO1NwYXVsZGVycyBvZiB0aGUgUHNpb24gSW5xdWlzaXRvcjtIZWFkcGllY2Ugb2YgdGhlIERlYWRseSBOaWdodHNoYWRlO1JlY3RpZmllcjtEYXJrIE1lYWRvdyBNYXNzYWNyZSBBcm1vcjtEYXJrIE1lYWRvdyBNYXNzYWNyZSBBcm1zO0RhcmsgTWVhZG93IE1hc3NhY3JlIEhlYWQ7R29sZGVuIFBhbGUgTWF1c29sZXVtO01hbGVmaWMgRHJha2VzIFN0cmlrZSBvbmx5IEVmZmVjdDtDcmltc29uIEN5cnJpZGFlO1N5bHZhbiBDYXNjYWRlIFByZW07UmFpbm1ha2VyIFYgNC4wO0Zyb3N0cmVhY2ggQnJpZ2FuZHMgSGF0O0Zyb3N0cmVhY2ggQnJpZ2FuZHMgU2NhcmY7QXhlIG9mIHRoZSBFbmR1cmluZyBDb25zY3JpcHQ7U3RvdXRoZWFydCBHcm93bGVyIE93bDtCZWFzdCBvZiBWZXJtaWxpb24gV2lsZHM7TWFzayBvZiB0aGUgQmxvb2Rmb3JnZTtPZmYtSGFuZCBXZWFwb24gb2YgdGhlIEJsb29kZm9yZ2U7SW5mZXJuYWwgQ2hpZWZ0YWluIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7RW50cm9waWMgSGVsbWV0O05vdGhsaWMgQnVyZGVuO0RhcmsgUmVhbG0gT3JhY2xlcyBNYXNrO0dvbGRlbiBHcmF2ZWxtYXc7RmxvdXJpc2hpbmcgTG9kZXN0YXIgUHJlbTtIYXJib3JibG9zc29tIG9mIHRoZSBDcmltc29uIFdpdG5lc3M7T3Zlcmdyb3duIEVtYmxlbSBBZ2hhbmltIEVmZmVjdDtUSS04IEJvdHRsZSBFZmZlY3Q7VEktOSBTZWFzb25hbCBDcmVlcCBEZW55IEVmZmVjdDtUSS04IEZvdW50YWluIGx2bCAyIEVmZmVjdDtQaGFzZSBCb290cyBUSS02IEVmZmVjdDtSYWRpYW5jZSBUSS02IEVmZmVjdDtUSS04IFRQIGx2bCAyIEVmZmVjdDtUaGUgU3RhbmxleSBQYXJhYmxlIEFubm91bmNlcjtCYXN0aW9uIE1lZ2EtS2lsbDtJY2UgQmxvc3NvbTtZdWxzYXJpYXMgTWFudGxlIFByZW07VHdpbGlnaHQgSGV4IC0gT2ZmaGFuZDtUd2lsaWdodCBIZXggLSBCZWx0O1R3aWxpZ2h0IEhleCAtIEhlYWQ7VHdpbGlnaHQgSGV4IC0gQmFjaztUd2lsaWdodCBIZXggLSBBcm1vcjtXaGlzcGVycyBvZiB0aGUgRGFtbmVkIEhlYWQ7UHlyZXhhZWMgRmxvZTtOeXggQXNzYXNzaW5zIERhZ29uO0Nyb3duIG9mIEdpbGRlZCBXb3JzaGlwO0JvdHRvbWZlZWRlciBQaWVyY2VycztXZWFwb24gb2YgdGhlIEJsb29kZm9yZ2U7TWFyayBvZiB0aGUgRmlyc3QgSHVudCBCZXN0b3dlZDtBZ2hhbmltcyBCYXNoZXIgUHJlbTtXaGlzcGVycyBvZiB0aGUgRGFtbmVkIFdpbmdzO0NyZXN0IG9mIHRoZSBXeXJtIExvcmRzO0Zyb3N0Z2xhZGUgRmFtaWxpYXIgQ2FwZTtCcmFjZXJzIG9mIHRoZSBDYXZlcm4gTHVtaW5hcjtCZWx0IG9mIHRoZSBSZWQgTWQ5519bnRhaW47TWFzdGVyIG9mIHRoZSBTZWFyaW5nIFBhdGggQXJtcztDaW5kZXIgU2Vuc2VpIEJlbHQ7Q2FwIG9mIHRoZSBTbW9sZGVyaW5nIFNhZ2U7UGF1bGRyb25zIG9mIHRoZSBWb2xjYW5pYyBHdWFyZDtCZWx0IG9mIHRoZSBFbWVyYWxkIEFnZTtWaXNhZ2Ugb2YgdGhlIEVtZXJhbGQgQWdlO0dvbGRlbiBBdG9taWMgUmF5IFRocnVzdGVycyBQcmVtO0RhcmsgQXJ0aXN0cnkgQnJhY2VycztFZGdlIG9mIHRoZSBMb3N0IE9yZGVyO0xldmlhdGhhbiBXaGFsZSBCbGFkZSBvZiBFbWluZW50IFJldml2YWw7R3JhbmQgQmVsdCBvZiB0aGUgV2l0Y2ggSHVudGVyIFRlbXBsYXI7R3JhbmQgR2xvdmVzIG9mIHRoZSBXaXRjaCBIdW50ZXIgVGVtcGxhcjtMZWdzIG9mIHRoZSBTZWFib3JuZSBSZXByaXNhbDtTaGVhcmluZyBEZXBvc2l0aW9uO0JhY2sgb2YgdGhlIE1hZCBNdXRpbmVlcjtNdWxjdGFudCBQYWxsO1NjZXB0ZXIgb2YgdGhlIEluZmVybmFsIFJhbWJsZXI7SGVsbSBvZiB0aGUgV2luZ2VkIFNlbnRpbmVsO0FyZW5hIENoYW1waW9uIEJlbHQ7QXJlbmEgQ2hhbXBpb24gQXJtb3I7Rmx1dHRlcmluZyBTdGFmZiBWIDIuMDtLaXRlc3RhciBTcGxlbmRvciBCZWFrO0tpdGVzdGFyIFNwbGVuZG9yIFdpbmdzO05vdmEgb2YgR29sZGVuIE5pcnZhbmE7VGhlIEJhcnJlbiBWZWN0b3I7TGFzaCBvZiB0aGUgTGl6YXJkIEtpbiBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO0FybXMgb2YgRWxhc215cjtTY2FsZSBvZiB0aGUgQnJlYWNoIFdhcmRlbjtHb2xkZW4gR3Jhc3BpbmcgQmx1ZGdlb247QXJtcyBvZiB0aGUgR3VhcmRpYW4gb2YgdGhlIFNhcHBoaXJlIEZsYW1lO0JlbHQgb2YgdGhlIFN0b3Jtd3JvdWdodCBBcmJpdGVyO0hlbG0gb2YgdGhlIEJhdHRsZWhhd2s7UGF1bGRyb24gb2YgdGhlIFN0b3Jtd3JvdWdodCBBcmJpdGVyO0dyYW5kIEJsYWRlIG9mIHRoZSBEZW1pZ29kO0JsYWRlcyBvZiB0aGUgRm91bGZlbGwgQ29ycnVwdG9yIFByZW1pdW07QmxhZGVzIG9mIHRoZSBCYWxlZnVsIEhvbGxvdztGcmFjdGFsIEhvcm5zIG9mIElubmVyIEFieXNtIFVQO1dpbmdzIG9mIHRoZSBGb3VsZmVsbCBDb3JydXB0b3IgUHJlbWl1bTtBcm0gRmlucyBvZiB0aGUgRGVlcHdlZWQgRHJvd25lcjtMZWFzaGVkIFJvY2tzaGFyaztCcmFja2lzaCBTdGFsa2VyIEJlbHQ7Um9sbGVybWF3c3RlciBhbmQgTWVjaGEgQm9vdHMgb2YgVHJhdmVsIE1rIElJSTtTd29yZCBvZiB0aGUgQ29sb3NzdXMgUHJlbTtQaXNjZWFuIFB1bHZlcml6ZXI7U2lnaWwgb2YgdGhlIEJhcnJpZXIgUm9ndWU7Q2xhd3Mgb2YgdGhlIFNhbmdzdHJhdGggRm9sZDtUb2xsaW5nIFNoYWRvd3M7RmFjZSBvZiBJbmVycmFudCBFbWluZW5jZTtIYW5kcyBvZiBJbmVycmFudCBFbWluZW5jZTtGZWF0aGVyc3dpbmcgSGFpcjtBcm1vciBvZiB0aGUgUmlzaW5nIEdhbGU7Q3Jvd24gb2YgdGhlIEFyY3RpYyBSZWNsdXNlO1dpbmdzIG9mIHRoZSBBcmN0aWMgUmVjbHVzZTtQYWRkYXBvbiBvZiBSaWJiaXRhciBWIDQuMDtCZWx0IG9mIHRoZSBXYXJ0b3JuIEhlYXZlbnM7UGF1bGRyb25zIG9mIHRoZSBXYXJ0b3JuIEhlYXZlbnM7QnJhY2VycyBvZiB0aGUgV2FydG9ybiBIZWF2ZW5zO01hcmsgb2YgdGhlIE1pc3RyYWwgRmllbmQgViAyLjE7TG9zdCBSYW5nZXI7TGluZWFnZSBQcm92aW5jZSBvZiB0aGUgSHVudCBFdGVybmFsO0FieXNzYWwgVm9ydGV4O0xvcmQgb2YgQ2hyb25vcHRpYyBTeW50aGVzaXM7VHJhbnNtdXRlZCBBcm1hbWVudHM7V2FyLUJ1cnJvdyBSYXZhZ2VyO0Jld2l0Y2hpbmcgRmxhcmUgViAyLjA7TWVtb3JpZXMgb2YgdGhlIFZvdyBFdGVybmFsO1Zvb2RvbyBNZWVwbztEYXJrZmFsbCBXYXJkZW47SGF2b2Mgb2YgRHJhZ29uIFBhbGFjZSBWIDIuMDtQcmlzbWF0aWMgR3JhY2U7V3JhdGggb2YgS2EgViAyLjEgU3R5bGUgMjtVbmZldHRlcmVkIE1hbGV2b2xlbmNlO0hlcmFsZCBvZiBNZWFzdXJlbGVzcyBSdWluIFYgMi4xO1RvbGwgb2YgdGhlIEZlYXJmdWwgQXJpYTtWZW5nZWFuY2Ugb2YgdGhlIFN1bndhcnJpb3I7Sm9sbHkgUmVhdmVyO1JlbWluaXNjZW5jZSBvZiBEcmVhbXM7R29sZGVuIE5ldGhlciBMb3JkcyBSZWdhbGlhIFNldCBQcmVtO01vbnN0cm91cyBSZXByaXNhbDtNYWdpc3RlciBvZiB0aGUgTmFycm93IEZhdGVzO0FuY2llbnQgTWFndXMgU3R5bGUgMjtFdGVybmFsIEhhcnZlc3Q7R29sZCBTa3ltYWdlO0RhcmsgUmVlZiBFc2NhcGUgViAyLjE7SGludGVybGFuZCBTdGFsa2VyO1N1Ym1lcmdlZCBIYXphcmQ7VHJlayBvZiB0aGUgVHJhaWxibGF6ZXI7UGx1bmRlciBvZiB0aGUgU2F2YWdlIE1vbmdlcjtGZXJvY2lvdXMgSGVhcnQ7RWNob2VzIG9mIHRoZSBFeXJpZSBWIDIuMDtNb2xva2F1IFN0YWxrZXI7QW5jaWVudCBNZWNoYW5pc207RXBvY2ggb2YgdGhlIEFieXNtO0RhcmsgUnVpbiBTZXQgViAzLjE7VGhlIEtlZW4gQ29tbWFuZGVyO0RlbGlnaHRzIG9mIFBldGFsdW5hIFBhdGhmaW5kZXI7TWlzdHJlc3Mgb2YgdGhlIExvbmcgTmlnaHQ7Rmlyc3QgTmlnaHQgb2YgdGhlIFN1bW1lciBDaGlsZDtWYW5xdWlzaGluZyBEZW1vbnMgR2VuZXJhbCBWIDMuMTtUaGUgV2lsZCBUYW1lcjtDcmVlZCBvZiB0aGUgT3V0bGF3IEh1bnRzbWFuO1JlbGVudGxlc3MgV2FyYnJpbmdlciBWIDMuMDtCYXJyZW4gU3Vydml2b3IgViAyLjA7SW1wZXJpYWwgUmVsaWNzIFYgMi4xO1RlbXBlc3RzIFdyYXRoO0xlZ2FjeSBvZiB0aGUgRWxkd3VybSBDcmVzdCBCbGFjaztIYXJuZXNzIG9mIHRoZSBGaXNzdXJlZCBTb3VsO1NreS1IaWdoIFdhcnNoaXAgU3R5bGUgMSBWIDMuMDtTZXJwZW50aW5lIEd1YXJkO1RyYWlsIG9mIHRoZSBHcmV5IEdob3N0O1NlaXNtaWMgQmVyc2Vya2VyO1RhbGVzIG9mIHRoZSBHcmV5IFdhc3RlcztUaHVuZGVyd3JhdGhzIENhbGxpbmcgU2V0O1NvdmVyZWlnbiBvZiB0aGUgS3JheSBMZWdpb25zIDJzdCBTdHlsZTtTdG9yZWdnYSAzIExWTCBVbHQgKyBJY2UgVGlueTtBdHJvY2l0aWVzIG9mIHRoZSBBYnlzc2FsIFNjb3VyZ2U7Q2hpbGwgb2YgdGhlIEtlZXBlcnMgR2F6ZTtPdXRsYW5kaXNoIEdvdXJtZXQ7U3RvbmVtYXJjaCBTb3ZlcmVpZ24gU3R5bGUgMjtSaWdodGVvdXMgVGh1bmRlcmJvbHQgYW5kIEFyY2FuYSBNZWdhUGFjazsgMTIzfHx8