limitHWID:: 1 000||| 111:: 1B0D4F60-D7DA-11DD-8A45-3085A9EC940C;; 111||| 222:: 44e78c1f51f2a1dfc677587fe7a94f9752c8b6ab980b1f2fb0335baf39bf2068223d7a4afa9f84de8d6c85cb51c367d9b63c8faa5973645415486a85a066a8a0 222||| 123:: Tempest Helm of the Thundergod Prem;Yulsarias Mantle Prem;Wyrmwrought Flare;Crimson Cyrridae;Razzils Midas Knuckles Prem;Rapiers of the Burning God V 3.1;Golden Sullen Hollow V 3.2;Planetfall Blink;Full-Bore Bonanza;The Lightning Orchid of Eminent Revival;Soul Diffuser V 2.1;SF Arcana Megapack;Immortal Invoker Kid;Queen of Pain Arcana MegaPack;Manifold Paradox PA Arcana Style 3;Windranger Arcana style 1 (Blue Bird) + Full WR immortal;Sven Immortals MegaPack UP;Axe full Immortals Megapack alt;Wraith King Arcana MegaPack;Golden Shadow Masquerade Prem;Mace of Aeons Prem;Faceless Madness;Crimson Bracers of Aeons Prem;Golden Mandate of the Stormborn;Garb of the Corridan Maestro;Ursa Immortals MegaPack;Monkey King Arcana MegaPack;Codicil of the Veiled Ones;Armor of the Fearful Aria Prem;Swine of the Sunken Galley Prem;Feast of Abscession;Earth Green Color for TB;Silent Wake of the Crimson Witness;Reapers Wreath;Planetfall;Mars TI10 Collectors Cache MegaPack;Legion Commander ModMaker MegaPack;Moonfall Prem;Slark MegaPack New;Darkbrew Enforcer and Eternal Radiance Blades and Midas Knuckles MegaPack;Tempest Revelation;Maw of Eztzhok;Bewitching Flare V 2.0;Gold Skymage;Big Un V 3.0;Hunter of Kings V 2.0;Bindings of Deep Magma;Heavenly Sword Doom V 3.0;Sherman Maiden V 4.1; 123|||