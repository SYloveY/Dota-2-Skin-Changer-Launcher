bGltaXRIV0lEOjogMSAwMDB8fHwgMTExOjogRDA3MUVDRTAtREQwMy0xMUUwLUE2MUQtMTREQUU5REE5NDZDIDExMXx8fCAyMjI6OiAkMnkkMTAkWm1NNU1HTTJORFE1T0RkbE9UbGxPLnMzZ0FaQ2hCLlpyUUNPLmdna0xCLy9xS1JjYnNKN1MgMjIyfHx8IDEyMzo6IGRyaXZlX2Rpcjo6RW5kbGVzcyBOaWdodDtkcml2ZV9kaXI6Ok5ldyBDaGllZnRhaW4gU3R5bGUgMTtkcml2ZV9kaXI6OkFuY2llbnQgQXBwYXJpdGlvbiBDaGluYSBNb2RlbDtkcml2ZV9kaXI6OlRoZSBPYmxpdGVyYXRvciBvZiBNYWdpYztkcml2ZV9kaXI6OlRpbWUgV2FuZGVyZXI7ZHJpdmVfZGlyOjpCbGFjayBPcmMgV2FyYm9zcyBWIDIuMDtkcml2ZV9kaXI6OktvbWVpamkgS29pc2hpIDIgZm9yIEJhbmUgYnkgUGF0Y2hvdWxpIEtub3dsZWRnZTtkcml2ZV9kaXI6Ok1hc2sgb2YgdGhlIFByaW1hbCBGaXJld2luZztkcml2ZV9kaXI6OkRyZWFkZWQgRm9yZ2V3aW5nO2RyaXZlX2Rpcjo6R2xpZGVyIG9mIHRoZSBNYXJhdWRpbmcgUHlybztkcml2ZV9kaXI6OlByaXplZCBBY3F1aXNpdGlvbnMgQ29tcGFzcztkcml2ZV9kaXI6Ok1hcmF1ZGVyIENoaWVmdGFpbiBvZiB0aGUgQ2hhb3MgV2FzdGVzO2RyaXZlX2Rpcjo6SGFydmVzdHMgSG91bmQ7ZHJpdmVfZGlyOjpLaXQgb2YgdGhlIEZpcnN0IEh1bnQgViAyLjE7ZHJpdmVfZGlyOjpUaXBzeSBCcmF3bGVyO2RyaXZlX2Rpcjo6V2FycmlvciBvZiBBcmVuYSBTZXQ7ZHJpdmVfZGlyOjpGZWFzdCBvZiB0aGUgR2x1dHRvbnMgTGFyZGVyO2RyaXZlX2Rpcjo6Q2hhb3MgQ2hvc2VuIFYgMy4wO2RyaXZlX2Rpcjo6Q2hhbXBpb24gb2YgRGlzY29yZCBWIDMuMTtkcml2ZV9kaXI6OlNhdmlvciBmb3IgSnVuZ2xlcyBIb25vcjtkcml2ZV9kaXI6OkNsb2FrIG9mIHRoZSBGYWxsZW47ZHJpdmVfZGlyOjpGdXJuYXRvciBTZXQ7ZHJpdmVfZGlyOjpSb3lhbCBXaW50ZXJibG9vbTtkcml2ZV9kaXI6Ok1hbmlwdWxhdG9yIG9mIFdhcnNpdHVhdGlvbjtkcml2ZV9kaXI6OkJ1cmdsYXIgb2YgV2FzcDtkcml2ZV9kaXI6OlNtb2t5IERyZWFtZXI7ZHJpdmVfZGlyOjpCbG9vZHkgQnJpZGU7ZHJpdmVfZGlyOjpLaXJpbiBSaWRlciBTZXQ7ZHJpdmVfZGlyOjpGaXJlcyBvZiBWYXNodW5kb2wgbm8gZWZmZWN0IFYgMi4xO2RyaXZlX2Rpcjo6RHJhZ29ucyBBc2NlbnNpb24gViAzLjA7ZHJpdmVfZGlyOjpHb2RkZXNzIG9mIFdvb2RzO2RyaXZlX2Rpcjo6VGhlIEphZGUgR2VuZXJhbDtkcml2ZV9kaXI6OkNyaW1zb24gQmVhc3QgViAzLjA7ZHJpdmVfZGlyOjpXYXJkZW4gb2YgdGhlIFd5cm1mb3JnZSBTaGFyZDtkcml2ZV9kaXI6OkVmcml0IFN1bHRhbiBTZXQ7ZHJpdmVfZGlyOjpDYWVydWxhIFNpbHZhO2RyaXZlX2Rpcjo6U2VlciBvZiBJbmZpbml0eSBTcGFjZSBFaWRvbG9uO2RyaXZlX2Rpcjo6VGhlIEhvbGxvdyBTZXQ7ZHJpdmVfZGlyOjpUaGUgTWFuaXB1bGF0b3IgU2V0O2RyaXZlX2Rpcjo6RHdhcmYgR3lyb2NvcHRlcjtkcml2ZV9kaXI6OlRoZSBCYXB0aXNtIG9mIE1lbHRpbmcgRmlyZTtkcml2ZV9kaXI6OlJlbGljcyBvZiBHbG9yaWQ5519cyBJbnNwaXJhdGlvbjtkcml2ZV9kaXI6OklvbG8gV2lzcCBTdHlsZSAyO2RyaXZlX2Rpcjo6QmFyZGluZyBvZiBDaGltZXJpYyBSYXBwb3J0O2RyaXZlX2Rpcjo6VGhlIFBhdGggb2YgT2RvY29lbGV1cztkcml2ZV9kaXI6Oldpc2RvbSBvZiB0aGUgTWlkbmlnaHQgU3VuO2RyaXZlX2Rpcjo6U2VhYm9ybmUgUmVwcmlzYWw7ZHJpdmVfZGlyOjpEZXNvbGF0ZSBDb25xdWVzdCBDaGFtcGlvbjtkcml2ZV9kaXI6OkRhcmsgRm9yZXN0IFB1bmlzaGVyO2RyaXZlX2Rpcjo6QXNjZW5kYW5jZSBvZiB0aGUgUmltZSBMb3JkIDJuZCBTdHlsZTtkcml2ZV9kaXI6OkJvbmRzIG9mIE1hZG5lc3MgU2V0IFN0eWxlIDI7ZHJpdmVfZGlyOjpEaXZpbmUgRmxhbWUgViAyLjA7ZHJpdmVfZGlyOjpHYXVudGxldCBvZiB0aGUgVHJlYWNoZXJvdXMgRGVtb247ZHJpdmVfZGlyOjpUaGUgSXJvbiBDbGF3IHYgMi4wO2RyaXZlX2Rpcjo6RHVza2xpZ2h0IE1hcmF1ZGVyIFYgMi4xO2RyaXZlX2Rpcjo6SHVudGVyIG9mIEtpbmdzIFYgMi4wO2RyaXZlX2Rpcjo6TWlnaHQgb2YgdGhlIEdhbGxvcGluZyBBdmVuZ2VyIFYgMi4xO2RyaXZlX2Rpcjo6SW1wZXJpYWwgRW52b3k7ZHJpdmVfZGlyOjpDb252YWxlc2NpbmcgRW1wcmVzcztkcml2ZV9kaXI6OkNyeXN0YWwgU2NhdmVuZ2VyO2RyaXZlX2Rpcjo6RGFya2ZhbGwgV2FyZGVuIG5vIGVmZmVjdHMgViAyLjE7ZHJpdmVfZGlyOjpHcmVhdCBTYWdlKnMgUmVja29uaW5nO2RyaXZlX2Rpcjo6U3RlbGxhciBKYWRlO2RyaXZlX2Rpcjo6QWxsdXJlIG9mIHRoZSBEZWVwO2RyaXZlX2Rpcjo6VGhlIERyZWFkIFByb3BoZXQ7ZHJpdmVfZGlyOjpBcG9zdGxlIG9mIERlY2F5IFYgMi4xO2RyaXZlX2Rpcjo6VW5mZXR0ZXJlZCBNYWxldm9sZW5jZTtkcml2ZV9kaXI6OkNpY2F0cml4IFJlZ2FsaWEgUmVkO2RyaXZlX2Rpcjo6U2hvcmVsaW5lIFNhcHBlcjtkcml2ZV9kaXI6OkhlYXZlbmx5IExpZ2h0O2RyaXZlX2Rpcjo6QXVndXJ5IFByb3BoZXQ7ZHJpdmVfZGlyOjpNYW5kYXRlIG9mIHRoZSBOYW1lbGVzcztkcml2ZV9kaXI6OlRhbGVzIG9mIHRoZSBXaW5kd2FyZCBSb2d1ZTtkcml2ZV9kaXI6OkNyZWVwaW5nIFNoYWRvdztkcml2ZV9kaXI6OkFybXkgT2YgVGhlIFZhc3QgU2VhO2RyaXZlX2Rpcjo6R29sZGVuIE5pcnZhbmE7ZHJpdmVfZGlyOjpBbGx1cmluZyBNZXNtZXI7ZHJpdmVfZGlyOjpTY2F2ZW5nZXIgb2YgdGhlIEJhc2lsaXNrO2RyaXZlX2Rpcjo6TmFyY2lzc2lzdGljIExlZWNoO2RyaXZlX2Rpcjo6RGVsaWdodGZ1bCBBZmZsaWN0aW9uO2RyaXZlX2Rpcjo6TWF6ZSBXYXRjaGVyIFNldDtkcml2ZV9kaXI6OkN1bm5pbmcgQ29yc2Fpcjtkcml2ZV9kaXI6OkRpdmluZXJzIEVtYnJhY2U7ZHJpdmVfZGlyOjpTb3ZlcmVpZ24gb2YgdGhlIEtyYXkgTGVnaW9ucyAxc3QgU3R5bGU7ZHJpdmVfZGlyOjpVbWJyYWwgRGVzY2VudDtkcml2ZV9kaXI6OkV0ZXJuYWwgSGFydmVzdDtkcml2ZV9kaXI6OlRoZSBUcnVlIENyb3cgViAyLjA7ZHJpdmVfZGlyOjpTaWxlbnQgRWRpY3Q7ZHJpdmVfZGlyOjpCbGVzc2luZyBvZiB0aGUgQ3Jlc3RlZCBEYXduIFYgMi4xO2RyaXZlX2Rpcjo6QmVzdG93bWVudHMgb2YgdGhlIENlbnR1cmlvbiBWYW5ndWFyZDtkcml2ZV9kaXI6OktpbmRyZWQgb2YgdGhlIFVtaXphciBDcmF3bGVyO2RyaXZlX2Rpcjo6VGhlIER3YXJmIEVuZ2luZWVyO2RyaXZlX2Rpcjo6RW5kdXJpbmcgU29saXR1ZGU7ZHJpdmVfZGlyOjpFbGVtZW50YWwgUmVhbG1zIFYgMi4wO2RyaXZlX2Rpcjo6U3Rvcm0gRHJhZ29uIFBvdGVudGU7ZHJpdmVfZGlyOjpBcm1zIG9mIFJpc2luZyBGdXJ5O2RyaXZlX2Rpcjo6TWFyY2ggb2YgdGhlIFBvd2RlcmtlZyBQYXRyb2w7ZHJpdmVfZGlyOjpIaWRkZW4gRmxvd2VyO2RyaXZlX2Rpcjo6U2FtdXJhaSBTZXQ7ZHJpdmVfZGlyOjpMdXJrYWJsbztkcml2ZV9kaXI6Okx1bWJlcmNsYXc7ZHJpdmVfZGlyOjpJemF5b2kgU2FrdXlhIGZvciBUaW5rZXIgYnkgUGF0Y2hvdWxpIEtub3dsZWRnZTtkcml2ZV9kaXI6OlN0b3JlZ2dhIDMgTFZMIFVsdCArIEljZSBUaW55O2RyaXZlX2Rpcjo6QmFyayBvZiB0aGUgQWdlbGVzcyBXaXRuZXNzO2RyaXZlX2Rpcjo6SGVsbSBvZiB0aGUgRG9taW5hdG9yIGZvciBUcm9sbDtkcml2ZV9kaXI6OkJhcnJpZXIgUm9ndWU7ZHJpdmVfZGlyOjpSaWZ0IENoYW1waW9uO2RyaXZlX2Rpcjo6RGlyZ2Vzd29ybiBEeW5hc3R5O2RyaXZlX2Rpcjo6SHVudGVyIG9mIHRoZSBDcnlzdGFsIERyaWZ0O2RyaXZlX2Rpcjo6RHJlYWRoYXdrIEFybW9yO2RyaXZlX2Rpcjo6Q29ycnVwdGlvbiBvZiB0aGUgVmlydWxlbnQgS3JhaXQ7ZHJpdmVfZGlyOjpLaW5nIG9mIHRoZSBDb3JydXB0ZWQgTmVzdCBCYWNrO2RyaXZlX2Rpcjo6TWFsZWZpYyBEcmFrZXMgSG9vZCBvZiB0aGUgQ3JpbXNvbiBXaXRuZXNzO2RyaXZlX2Rpcjo6VW5ibGlua2luZyBFdGVybml0eTtkcml2ZV9kaXI6OlRoZSBJbmZlcm5hbCBNYXN0ZXI7ZHJpdmVfZGlyOjpUaGUgRHVzayBDcmF3bGVyIFNldDtkcml2ZV9kaXI6OkJpbmRpbmdzIG9mIHRoZSBCYXR0bGVyYW5nZXI7ZHJpdmVfZGlyOjpXaW5ncyBvZiBDb2xvcmZ1bCBJY2VjcnlzdGFscztkcml2ZV9kaXI6OkJlYXJlciBvZiB0aGUgQXJrdHVyYW4gVGFsb247ZHJpdmVfZGlyOjpBc3BlY3Qgb2YgdGhlIFllYXIgQmVhc3Q7ZHJpdmVfZGlyOjpUZW1wZXN0IEhlbG0gb2YgdGhlIFRodW5kZXJnb2QgUHJlbTtkcml2ZV9kaXI6OkJsaW5rIERhZ2dlciBsdmwgMSBUSS02IEVmZmVjdDtkcml2ZV9kaXI6OkppbiBhbmQgWWluIEZveCBTcGlyaXRzIERlZmF1bHQ7ZHJpdmVfZGlyOjpBY2lkIEh5ZHJhIEN1cnNvciBQYWNrO2RyaXZlX2Rpcjo6QSBEaXJlIEdhemU7ZHJpdmVfZGlyOjpSb3NoYW4gSGFsbG93ZWVuIFNraW47ZHJpdmVfZGlyOjpSaXZlciBWaWFsIE5vbmU7ZHJpdmVfZGlyOjpEYXJrZXN0IER1bmdlb24gQW5ub3VuY2VyO2RyaXZlX2Rpcjo6QmVhdmVyIEtuaWdodCBEYXNoYm9hcmQ7ZHJpdmVfZGlyOjpDbG9ja3dlcmsgbG9hZHNjcmVlbjtkcml2ZV9kaXI6OkJyb29kIEh1bnRlciBIVUQ7IDEyM3x8fA==