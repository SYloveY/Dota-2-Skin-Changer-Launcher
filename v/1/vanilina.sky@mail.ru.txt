limitHWID:: 1 000||| 111::  111||| 222:: $2y$10$NzdmNGRjN2RmODdmZTdkZOYoy6smNne6Uxe7BxRSP.kNTx68E2NGq 222||| 123:: Blood Shard;Curse of the Crow King Head;Memories of Bone Pauldron;Curse of the Crow King Arms;Cloak of the Haunted Lord;Cuirass of the Stonemarch Sovereign;Tempest Helm of the Thundergod Prem;Golden Immortal Pantheon;Symbol of the King Restored;Seer of Infinity Space Eidolon;Waaagh Helm of Big *Un;Armguards of Big *Un;Razzils Midas Knuckles Prem;Young Alchemist*s Knot;Frostreach Brigands Axes;Lycosidae*s Brood;Perceptive Spiderling;Steelweb Countenance;Legs of the Abysm;Smeevils Penance Style 1;Crystal Maiden Announcer;Lineage Helm of Broken Scale;Belt of the Dragon*s Disciple;Bracers of the Survivor;Armor of the Forgotten Plane;Shoulders of the Survivor;Golden Basher of Mage Skulls;Golden Offhand Basher of Mage Skulls;Ice Burst Bracers;Black Ice Constellation - Cloak;DeathBlossom Drow Ranger Head;Ice Burst Greaves;Quiver of the Winged Bolt;Shoulders of the Black Wind Raven;Black Ice Constellation - Weapon;Heartless Hunt - Off-Hand;Tonfa of the Giant Hunter;Mark of the First Hunt;Hat of the Hunter;Heartless Hunt - Back;Plate of the Giant Hunter;Belt of Empiric Incendiary;Hat of Empiric Incendiary;Torch;Glider of the Marauding Pyro;Barbarous Blades Back;Barbarous Blades Mask;Beast of the Crimson Ring Armor;Surly Bogstomper Fishclub;Flail of the Burning Nightmare;Fury of Boundless Darkness Head;Viridus Claw;Belt of the Emerald Age;Crown of Nezzureem;Viridus Spine;Mace of Aeons;Sleeves of the Icebound Floret;Lineage Tails of the Tundra Warden;Tiara of the Crystalline Queen;Yulsaria*s Mantle;Shards of the Crystalline Comet;Moonlight Fairy Head;Tricks of the Saccharine Saboteur;The Duskbloom Trickster Off-Hand;Wings of the Faeshade Flower;Dark Willow Iron Thorn Armor;Northern Blight Arms;Dark Artistry Cape;Covenant of the Depths Belt;Mask of the Divine Sorrow;Dark Artistry Pauldrons;Valentine Ward;Bracers of Odocoeleus;Vestments of the Exiled Ronin;Sigil Mask of the Bladekeeper;Legs of Odocoeleus;Blackened Edge of the Bladekeeper;God*s Mercy;Arena Champion Spear;Arena Champion Armor;Arena Champion Belt;Staff of Gun-Yu;Princess of the Coral Sea Armor;Jewels of the Partisan Guard;Princess of the Coral Sea Legs;Off-Hand Blade of the Partisan Guard;Naginata of the Allure;Assassination of Dark Feather Back;Assassination of Dark Feather Belt;Assassination of Dark Feather Head;Armor of Cruel Reprisal;Dragonterror Sword;Arms of Desolation;Small Bad To The Bone;Frostmoot Tree;Tiny Bad To The Bone;Medium Bad To The Bone;Large Elemental Ice;Conspicuous Culprit Armor;Conspicuous Culprit Mohawk;mohawk shoulder;Weapons of the Savage Monger;Hand of Hell*s Ambassador;Infernal Wings;Mulctant Pall;Fin King*s Charm;Shock of the Anvil;Humble Drifter Oar;Complete Wings of the Ethereal Monarch;Hookblade of Skadi;Muh Keen Gun;Meranth Dragoon Shield;Hallowed Flame Belt;Helm of the Stormwrought Arbiter;Pauldron of the Stormwrought Arbiter;Indomitable Legacy - Weapon;Death Bearing Wings Head;Controls of the Fortified Fabricator;Blackshield Protodrone Helm;Blackshield Protodrone Missile Launcher;Blackshield Protodrone Armor;Blackshield Protodrone Stinger;Blackshield Protodrone Laser;Arms of the Frostshard Ascendant;Tidosaurus Tail;Recluse Reef Denizen;Weapon of the Frostshard Ascendant;Malefic Drakes Hood of the Crimson Witness;Barding of the Siege-Drake;Dimension Ripper Arms;Vespoid Stalker Back;Vespoid Stalker Head;Ember Tipped Striders;Aurora*s Pyre Back;Crown of the Arctic Recluse;Broodmother Anime Voice;Pedestal Bladeform Legacy;TI-10 Mjollnir Effect;TI-10 Phase Boots Effect;Antipode Courier (Angel only);Rose And The Beast;Kirin Rider Set;The Gifts of Zhuzhou;Crystal Scavenger;Visions of the Forsaken Flame;Riptide Raider V 2.0;The Plaguemonger;Dapper Disguise;Raiments of Twilight Shade;Toxic Death Eater;Storm Dragon Potente;Molten Destructor;Ferocious Heart;Corruption of the Virulent Krait;Father Of Spirits;Bindings of the Battleranger;Samareen Sacrifice;Armaments of Leviathan Set;Dusklight Marauder V 2.1;Engulfing Spike V 2.1;Direstone Bindings Set;Spirit of The Sacred Glove;Memories of the Vow Eternal;Harsh Sojourn;Alluring Mesmer;Researcher of Oblivion Magic;Deep Sea Scoundrel;Exact Marksman;Ironbarde Charger;Unfettered Malevolence;Ritual of the Loyal Fold;Smoky Dreamer;Wayfaring Scholar Set; 123|||